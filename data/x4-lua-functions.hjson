{
  AbilityMenuClosed: {
    description: Notifies* *the system that the ability menu was closed.
    parameters: []
    returnType: unknown
    deprecated: true
    detailed: ""
    notes: **DEPRECATED** - use FFI function CircularMenuClosed() instead
  }
  AbilityMenuOpened: {
    description: Function which needs to be called, if the ability menu is opened.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  AbortMission: {
    description: Aborts the specified mission.
    parameters: [
      {
        name: missionID
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  ActivateDroneAbility: {
    description: Activates the drone in the given drone slot number (valid range: 1-8).
    parameters: [
      {
        name: droneSlotNumber
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  ActivatePassiveDroneAbilities: {
    description: Activates all drones with passive abilities.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  AddAmmo: {
    description: Tries to add the specified amount of the ammo to the defensible. Returns actually added amount.
    parameters: [
      {
        name: defensible
        optional: false
        type: any
      }
      {
        name: ammomacroname
        optional: false
        type: any
      }
      {
        name: amount
        optional: false
        type: any
      }
      {
        name: checkonly
        optional: true
        type: any
      }
    ]
    returnType: addedamount
    deprecated: false
    detailed: ""
    notes: Added "checkonly" parameter in 4.00 Beta 4
  }
  AddCargo: {
    description: Adds the specified amount of the ware to the object.
    parameters: [
      {
        name: containerID
        optional: false
        type: any
      }
      {
        name: ware
        optional: false
        type: any
      }
      {
        name: amount
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  AddInventory: {
    description: Adds the specified amount of the ware to the inventory of the entity.*Â Optionally flag this as the result of crafting.
    parameters: [
      {
        name: entityID
        optional: false
        type: any
      }
      {
        name: ware
        optional: false
        type: any
      }
      {
        name: amount
        optional: false
        type: any
      }
      {
        name: crafting
        optional: true
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: Added "crafting" parameter in 4.00 Beta 4
  }
  AddKnownItem: {
    description: Adds the item to the specified library, if not yet added.
    parameters: [
      {
        name: library
        optional: false
        type: any
      }
      {
        name: item
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  AddLicence: {
    description: Adds the licence of the specified type of the licencefaction to the faction
    parameters: [
      {
        name: faction
        optional: false
        type: any
      }
      {
        name: licencetype
        optional: false
        type: any
      }
      {
        name: licencefaction
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  AddLogbookEntry: {
    description: Adds text as a logbook entry in the specified category.
    parameters: [
      {
        name: category
        optional: false
        type: any
      }
      {
        name: text
        optional: false
        type: any
      }
      {
        name: interaction
        optional: true
        type: any
      }
      {
        name: interactioncomponent
        optional: true
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  AddMoney: {
    description: Adds or removes the specified amount to the entity account
    parameters: [
      {
        name: entityID
        optional: false
        type: any
      }
      {
        name: amount
        optional: false
        type: any
      }
    ]
    returnType: transferredamount
    deprecated: false
    detailed: ""
    notes: ""
  }
  AddPlayerDrone: {
    description: Adds specified macro as drones to the playership.
    parameters: [
      {
        name: macro
        optional: false
        type: any
      }
      {
        name: amount
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  AddTradeToShipQueue: {
    description: Adds the specified trade to the queue of the container. Returns ID of the trade on the queue.
    parameters: [
      {
        name: tradeID
        optional: false
        type: any
      }
      {
        name: containerID
        optional: false
        type: any
      }
      {
        name: amount
        optional: false
        type: any
      }
    ]
    returnType: tradeID
    deprecated: false
    detailed: ""
    notes: ""
  }
  AddUITriggeredEvent: {
    description: Triggers MD/AI event condition <event\_ui\_triggered />.
    parameters: [
      {
        name: screen
        optional: false
        type: any
      }
      {
        name: control
        optional: false
        type: any
      }
      {
        name: screenparam
        optional: true
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: optional screenparam parameter added in 4.00 RC 2
  }
  AddUnits: {
    description: Adds or removes the specified amount of units to/from the defensible. Units can be flagged unavailable.
    parameters: [
      {
        name: defensibleID
        optional: false
        type: any
      }
      {
        name: unitMacro
        optional: false
        type: any
      }
      {
        name: amount
        optional: false
        type: any
      }
      {
        name: unavailable
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  AdjustMultilineString: {
    description: Helper function to fix unsupported line breaks.
    parameters: [
      {
        name: string
        optional: false
        type: any
      }
    ]
    returnType: string
    deprecated: false
    detailed: ""
    notes: ""
  }
  AIRangeUpdated: {
    description: Triggers the object signal "range\_setting\_updated" on all subordinates of the controllable.
    parameters: [
      {
        name: controllableID
        optional: false
        type: any
      }
      {
        name: entityID
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  AttackEnemySettingChanged: {
    description: Triggers the object signal "update config" on defence npc
    parameters: [
      {
        name: defencenpcID
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  CalculateBuildSlotHullFraction: {
    description: Calculates the fraction of hull for an individual build slot of the component.
    parameters: [
      {
        name: componentID
        optional: false
        type: any
      }
      {
        name: sequence
        optional: false
        type: any
      }
      {
        name: stage
        optional: false
        type: any
      }
    ]
    returnType: hullfraction
    deprecated: false
    detailed: ""
    notes: ""
  }
  CalculateTotalHullFraction: {
    description: Calculates the fraction of hull of the component.
    parameters: [
      {
        name: componentID
        optional: false
        type: any
      }
    ]
    returnType: hullfraction
    deprecated: false
    detailed: ""
    notes: ""
  }
  CanBeSubordinateOf: {
    description: Checks whether the controllable can be subordiante of the othercontrollable.
    parameters: [
      {
        name: controllableID
        optional: false
        type: any
      }
      {
        name: othercontrollableID
        optional: false
        type: any
      }
    ]
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  CancelConversation: {
    description: Cancels the current conversation, e.g. when closing a conversation menu.
    parameters: []
    returnType: success
    deprecated: false
    detailed: ""
    notes: ""
  }
  CanTradeWith: {
    description: Checks if trade is possible for the specified container.
    parameters: [
      {
        name: tradeID
        optional: false
        type: any
      }
      {
        name: containerID
        optional: false
        type: any
      }
      {
        name: amount
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: It may be necessary to call **SetVirtualCargoMode** on containerID first, if the container has a shopping queue.
  }
  CanViewLiveData: {
    description: Checks whether live data is available for the specified object or zone.
    parameters: [
      {
        name: objectID or zoneID
        optional: false
        type: any
      }
    ]
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  CheckInputProfileRegression: {
    description: Checks whether inputmap.xml version regressed in the past.
    parameters: []
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  CheckSuitableTransportType: {
    description: Checks whether the specified container can transport the ware.
    parameters: [
      {
        name: containerID
        optional: false
        type: any
      }
      {
        name: ware
        optional: false
        type: any
      }
    ]
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  ClearContainerStockLimitOverride: {
    description: Remove any defined stock limit for a particular ware at a ship/station.
    parameters: [
      {
        name: containerID
        optional: false
        type: any
      }
      {
        name: ware
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  ClearContainerWarePriceOverride: {
    description: Removes custom prices from the container of the destructible. Optional only for the specified ware and only buy/sell prices.
    parameters: [
      {
        name: destructibleID
        optional: false
        type: any
      }
      {
        name: ware
        optional: true
        type: any
      }
      {
        name: buysellswitch
        optional: true
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  ClearErrors: {
    description: Clears the internal error log.
    parameters: []
    returnType: unknown
    deprecated: true
    detailed: ""
    notes: **DEPRECATED** - use FFI function ClearErrorLog() instead
  }
  ClearLogbook: {
    description: Removes all entries from the logbook. Optional a number of entries can be preserved and only affect a specified category.
    parameters: [
      {
        name: keepnumentries
        optional: true
        type: any
      }
      {
        name: category
        optional: true
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  ClearTradeQueue: {
    description: Clear the trade queue of the specified container.
    parameters: [
      {
        name: containerID
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: Clearing the trade queue will not happen instantaneously, especially if a trade is of the queue is already in progress.
  }
  CompareJumpRoute: {
    description: Compare the length of one jump route with another. Both are specified with the amount of gate transitions and jumps they include.
    parameters: [
      {
        name: numgates
        optional: false
        type: any
      }
      {
        name: numjumps
        optional: false
        type: any
      }
      {
        name: othernumgates
        optional: false
        type: any
      }
      {
        name: othernumjumps
        optional: false
        type: any
      }
    ]
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  ConvertIDTo64Bit: {
    description: Converts a luaID to a 64-bit integer, e.g.to interface with an FFI function.
    parameters: [
      {
        name: luaID
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  ConvertIntegerString: {
    description: Formats number into a string with a given accuracy, thousand seperators, trailing spaces to offset SI prefixes and colored SI prefixes.
    parameters: [
      {
        name: number
        optional: false
        type: any
      }
      {
        name: separators
        optional: true
        type: any
      }
      {
        name: accuracy
        optional: true
        type: any
      }
      {
        name: notrailingspaces
        optional: true
        type: any
      }
      {
        name: colorprefix
        optional: true
        type: any
      }
    ]
    returnType: string
    deprecated: false
    detailed: ""
    notes: ""
  }
  ConvertMissionLevelString: {
    description: Converts the difficulty of a mission into a string.
    parameters: [
      {
        name: difficulty
        optional: false
        type: any
      }
    ]
    returnType: string
    deprecated: false
    detailed: ""
    notes: ""
  }
  ConvertMissionTypeString: {
    description: Converts the type of a mission into a string.
    parameters: [
      {
        name: missiontype
        optional: false
        type: any
      }
    ]
    returnType: string
    deprecated: false
    detailed: ""
    notes: ""
  }
  ConvertMoneyString: {
    description: Formats a money value into a string with a given accuracy, thousand seperators, credit cents, trailing spaces to offset SI prefixes and colored SI prefixes.
    parameters: [
      {
        name: money
        optional: false
        type: any
      }
      {
        name: showcents
        optional: true
        type: any
      }
      {
        name: separators
        optional: true
        type: any
      }
      {
        name: accuracy
        optional: true
        type: any
      }
      {
        name: notrailingspaces
        optional: true
        type: any
      }
      {
        name: colorprefix
        optional: true
        type: any
      }
    ]
    returnType: string
    deprecated: false
    detailed: ""
    notes: ""
  }
  ConvertStringTo64Bit: {
    description: Converts a string representing a 64-bit value to a 64-bit integer.
    parameters: [
      {
        name: 64BitStringID
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  ConvertStringToLuaID: {
    description: Converts a string representing a 64-bit value to a luaID, e.g. to pass it to MD/AI as a component.
    parameters: [
      {
        name: 64BitStringID
        optional: false
        type: any
      }
    ]
    returnType: luaID
    deprecated: false
    detailed: ""
    notes: ""
  }
  ConvertTimeString: {
    description: Formats a time value in seconds into a string in the provided format.
    parameters: [
      {
        name: time
        optional: false
        type: any
      }
      {
        name: format
        optional: true
        type: any
      }
      {
        name: separators
        optional: true
        type: any
      }
      {
        name: precision
        optional: true
        type: any
      }
    ]
    returnType: string
    deprecated: false
    detailed:
      '''
      *Possible specifiers in the format string:*
      *   *%s: All seconds*
      *   *%.#s: All seconds with precision override (# = 1...9)*, e.g. %.3s
      *   *%S: Seconds (00-59)*
      *   *%.#S: Seconds (00-59) with precision override (# = 1...9)*, e.g. %.3S
      *   *%m: All minutes*
      *   *%M: Minutes (00-59)*
      *   *%h: All hours*
      *   *%H: Hours (00-23)*
      *   *%d: All days*
      *   *%%: A % sign*
      *   *%T: Use time format from TextDB, showing days only if time > 1d*
      *   *%.#T: Like %T but with precision override*Â (# = 1...9), e.g. %.3T
      *Default format is "%T" if no format string is provided.*
      *Separators: Use thousand separators, only applies to %s, %m, %h, %d*
      *Precision: Number of fractional digits. Only applies to %s, %S, and %T. Default is 0. Use -1 for automatic display. A value of -1 is not compatible with separators. (Can be overridden by .# notation in format string)*
      '''
    notes: precision support for %s, %S, and %T were added in 4.00 Beta 1
  }
  CreateCheckBox: {
    description: ""
    parameters: [
      {
        name: checkboxDescription
        optional: false
        type: any
      }
    ]
    returnType: descriptor
    deprecated: false
    detailed: ""
    notes: ""
  }
  CreateGraph: {
    description: ""
    parameters: [
      {
        name: graphDescription
        optional: false
        type: any
      }
    ]
    returnType: descriptor
    deprecated: false
    detailed: ""
    notes: ""
  }
  CreateInteractionDescriptor: {
    description: Creates an interaction descriptor with the specified parameters.
    parameters: [
      {
        name: param1
        optional: false
        type: any
      }
      {
        name: param2
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: true
    detailed: ""
    notes: **DEPRECATED** - use CreateInteractionDescriptor2() instead
  }
  CreateInteractionDescriptor2: {
    description: Creates an interaction descriptor with the specified parameters and returns its ID.
    parameters: [
      {
        name: param1
        optional: false
        type: any
      }
      {
        name: param2
        optional: false
        type: any
      }
    ]
    returnType: interactionDescriptorID
    deprecated: false
    detailed: ""
    notes: ""
  }
  CreateObjectInPresentationCluster: {
    description: Creates the specified object in a new cluster with the optional background.
    parameters: [
      {
        name: objectmacro
        optional: false
        type: any
      }
      {
        name: backgroundmacro
        optional: true
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: The cluster needs to be destroyed using **DestroyPresentationCluster**, when it is no longer needed.
  }
  DebugProfileStart: {
    description: Resets the profile timer. Call this function at the start of the section which you want to profile.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  DebugProfileStop: {
    description: Returns the time (in ms) since the last call to DebugProfileStart().
    parameters: []
    returnType: timeInMs
    deprecated: false
    detailed: ""
    notes: ""
  }
  DestroyPresentationCluster: {
    description: Destroys a previously created cluster and everything inside it.
    parameters: [
      {
        name: clusterID
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  ExistsText: {
    description: Returns text if it exists, nil otherwise.
    parameters: [
      {
        name: page
        optional: false
        type: any
      }
      {
        name: line
        optional: false
        type: any
      }
    ]
    returnType: text
    deprecated: false
    detailed: ""
    notes: ""
  }
  FindJumpRoute: {
    description: Calculates the distance between two sectors in number of gate transitions and jumps needed.
    parameters: [
      {
        name: fromsectorID
        optional: false
        type: any
      }
      {
        name: tosectorID
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetAccountData: {
    description: Returns properties of the account of the specified entity. Possible properties are: "money", "minmoney", "maxmoney", "isdummy".
    parameters: [
      {
        name: entityID
        optional: false
        type: any
      }
      {
        name: ...
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetActiveGuidanceMissionComponent: {
    description: Returns the component with the active mission guidance if any.
    parameters: []
    returnType: componentID
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetAdapterOption: {
    description: Returns the name of the current adapter.
    parameters: []
    returnType: string
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetAimAssistOption: {
    description: Get current setting of the aim assist option.
    parameters: []
    returnType: int
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetAllCommanders: {
    description: Returns the chain of commanders for the specified controllable.
    parameters: [
      {
        name: controllableID
        optional: false
        type: any
      }
    ]
    returnType: componentIDArray
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetAllExtensionSettings: {
    description: Returns the settings for all registered extensions.
    parameters: []
    returnType: extensionSettingsTable
    deprecated: false
    detailed:
      '''
      `extensionSettingsTable`
      ```lua
      extensionSettingsTable = {
      Â Â [extensionid] = {
      Â Â Â Â enabled = is extension enabled?,
      Â Â Â Â sync = is extension synced?
      Â Â },
      Â Â ...
      }
      ```
      '''
    notes: ""
  }
  GetAllMacroUpgrades: {
    description: Returns information about all upgrades on a specified macro, with options to limit the information to parts of the buildplan.
    parameters: [
      {
        name: macro
        optional: false
        type: any
      }
      {
        name: sequence
        optional: false
        type: any
      }
      {
        name: stage
        optional: false
        type: any
      }
      {
        name: buildlimit
        optional: false
        type: any
      }
    ]
    returnType: upgradeArray
    deprecated: false
    detailed:
      '''
      `upgradeArray`
      ```lua
      upgradeArray = {
      Â Â [1] = {
      Â Â Â Â upgrade = upgrade type,
      Â Â Â Â name = upgrade name,
      Â Â Â Â total = total of available slots
      Â Â },
      Â Â [2] = { ... }
      }
      ```
      '''
    notes: ""
  }
  GetAllStatIDs: {
    description: Returns the ids of all statistic properties.
    parameters: []
    returnType: stringArray
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetAllUpgrades: {
    description: Returns information about all upgrades of the specified destructible, with options to limit the information to the base buildplan and/or upgrades with the specified tag.
    parameters: [
      {
        name: destructibleID
        optional: false
        type: any
      }
      {
        name: buildlimit
        optional: true
        type: any
      }
      {
        name: tag
        optional: true
        type: any
      }
    ]
    returnType: upgradeTable
    deprecated: false
    detailed:
      '''
      `upgradeTable`
      ```lua
      upgradeTable = {
      Â Â upgradetype = {
      Â Â Â Â name = upgrade name,
      Â Â Â Â ware = upgrade ware,
      Â Â Â Â tags = upgrade tags,
      Â Â Â Â total = total number of upgrades,
      Â Â Â Â free = number of free upgrades,
      Â Â Â Â operational = number of operational upgrades,
      Â Â Â Â construction = number of upgrades in construction
      Â Â },
      Â Â totaltotal = sum of total number of upgrades,
      Â Â totalfree = sum of number of free upgrades,
      Â Â totaloperational = sum of the number of operational upgrades,
      Â Â totalconstruction = sum of the number of upgrades in construction,
      Â Â estimated = is data filtered?
      }
      ```
      '''
    notes: ""
  }
  GetAllWeapons: {
    description: Returns information of all primary weapons and missiles*Â of the destructible.
    parameters: [
      {
        name: destructibleID
        optional: false
        type: any
      }
    ]
    returnType: weaponTable
    deprecated: false
    detailed:
      '''
      `weaponTable`
      ```lua
      weaponTable = {
      Â Â weapons = {
      Â Â Â Â [1] = {
      Â Â Â Â Â Â component = component id,
      Â Â Â Â Â Â macro = macro name,
      Â Â Â Â Â Â name = weapon name,
      Â Â Â Â Â Â range = bullet range,
      Â Â Â Â Â Â dps = hull and shield damage per sec
      Â Â Â Â },
      Â Â Â Â [2] = { ... }
      Â Â },
      Â Â missiles = {
      Â Â Â Â [1] = {
      Â Â Â Â Â Â name = missile name,
      Â Â Â Â Â Â speed = missile range,
      Â Â Â Â Â Â damage = explosion damage,
      Â Â Â Â Â Â macro = macro name,
      Â Â Â Â Â Â amount = amount number
      Â Â Â Â },
      Â Â Â Â [2] = { ... }
      Â Â }
      }
      ```
      '''
    notes: ""
  }
  GetAmmoCountAfterShoppingList: {
    description: Returns information of ammo counts on the container after the trade queue is resolved.
    parameters: [
      {
        name: containerID
        optional: false
        type: any
      }
    ]
    returnType: wareKeyTable
    deprecated: false
    detailed:
      '''
      `wareKeyTable`
      ```lua
      wareKeyTable = {
      Â Â [ware] = amount,
      Â Â ...
      }
      ```
      '''
    notes: Call **SetVirtualCargoMode**Â on containerID first, otherwise result will be empty.
  }
  GetAntiAliasModeOption: {
    description: Returns the current anti alias mode setting.
    parameters: []
    returnType: int
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetAntiAliasModes: {
    description: Returns all possible anti alias modes currently possible.
    parameters: []
    returnType: aaModesArray
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetAutoPilotTarget: {
    description: Returns the target of the auto pilot, if any.
    parameters: []
    returnType: componentID
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetAutorollOption: {
    description: Returns current autoroll setting.
    parameters: []
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetAutosaveOption: {
    description: Returns current autosave setting.
    parameters: []
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetBestFontSize: {
    description: Returns the best matching font size available for the specified font and size.
    parameters: [
      {
        name: fontname
        optional: false
        type: any
      }
      {
        name: fontsize
        optional: false
        type: any
      }
    ]
    returnType: fontsize
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetBonusContentData: {
    description: Returns information about all bonus content.
    parameters: []
    returnType: bonusContentArray
    deprecated: false
    detailed:
      '''
      `bonusContentArray`
      ```lua
      bonusContentArray = {
      Â Â [1] = {
      Â Â Â Â appid = appID,
      Â Â Â Â name = "Name",
      Â Â Â Â description = "Description",
      Â Â Â Â path = "path\\to\\content",
      Â Â Â Â optional = true|false,
      Â Â Â Â owned = true|false,
      Â Â Â Â installed = true|false,
      Â Â Â Â changed = true|false, -- installation state already changed, can't be changed again
      Â Â },
      Â Â [2] = ...
      }
      ```
      '''
    notes: ""
  }
  GetBoostToggleOption: {
    description: Returns the current boost toggle setting.
    parameters: []
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetBudgetData: {
    description: Returns properties of the budget of the specified entity. Possible properties are: "min", "max", "responsibility".
    parameters: [
      {
        name: entityID
        optional: false
        type: any
      }
      {
        name: ...
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetBuildAnchor: {
    description: Returns the build anchor of a container or buildmodule, e.g. the station a CV is building.
    parameters: [
      {
        name: containerID or buildmoduleID
        optional: false
        type: any
      }
    ]
    returnType: componentID
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetBuilderMacros: {
    description: Returns all information about all macros a container or buildmodule can build.
    parameters: [
      {
        name: containerID or buildmoduleID
        optional: false
        type: any
      }
    ]
    returnType: builderMacrosArray
    deprecated: false
    detailed:
      '''
      `builderMacrosArray`
      ```lua
      builderMacrosArray = {
      Â Â [1] = {
      Â Â Â Â macro = macro,
      Â Â Â Â name = name
      Â Â },
      Â Â [2] = { ... }
      }
      ```
      '''
    notes: ""
  }
  GetBuildProductionMethod: {
    description: Returns the production method used by the specified container or buildmodule to produce macro.
    parameters: [
      {
        name: containerID or buildmoduleID
        optional: false
        type: any
      }
      {
        name: macro
        optional: false
        type: any
      }
    ]
    returnType: method
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetBuildSlotDuration: {
    description: Returns the time the construction of the specified build slot takes on average.
    parameters: [
      {
        name: macro or componentID
        optional: false
        type: any
      }
      {
        name: sequence
        optional: false
        type: any
      }
      {
        name: stage
        optional: false
        type: any
      }
    ]
    returnType: duration
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetBuildSlotResources: {
    description: Returns the needed resources to build the specified build slot with this container or buildmodule.
    parameters: [
      {
        name: containerID or buildmoduleID
        optional: false
        type: any
      }
      {
        name: macro or componentID
        optional: false
        type: any
      }
      {
        name: sequence
        optional: false
        type: any
      }
      {
        name: stage
        optional: false
        type: any
      }
      {
        name: upgradePlanArray
        optional: false
        type: any
      }
    ]
    returnType: resourceTable
    deprecated: false
    detailed:
      '''
      `resourceTable`
      ```lua
      resourceTable = {
      Â Â [1] = {
      Â Â Â Â ware = ware id,
      Â Â Â Â name = ware name,
      Â Â Â Â cycle = amount,
      Â Â Â Â price = price
      Â Â },
      Â Â [2] = { ... },
      Â Â ...,
      Â Â totalprice = totalprice
      }
      ```
      `upgradePlanArray`
      ```lua
      upgradePlanArray = {
      Â Â [1] = {
      Â Â Â Â [1] = upgradetype,
      Â Â Â Â [2] = level
      Â Â },
      Â Â [2] = { ... }
      }
      ```
      '''
    notes: ""
  }
  GetBuildStageModules: {
    description: Returns all modules included in the specified buildslot.*
    parameters: [
      {
        name: macro or componentID
        optional: false
        type: any
      }
      {
        name: sequence
        optional: false
        type: any
      }
      {
        name: stage
        optional: false
        type: any
      }
    ]
    returnType: moduleArray
    deprecated: false
    detailed:
      '''
      `moduleArray`
      ```lua
      moduleArray Â = {
      Â Â [1] = {
      Â Â Â Â macro = module macro,
      Â Â Â Â name = module name,
      Â Â Â Â library = moduletypes library
      Â Â },
      Â Â [2] = { ... }
      }
      ```
      '''
    notes: ""
  }
  GetBuildStageUpgrades: {
    description: Returns information about all upgrades of the specified buildslot, with options to limit the information to the base buildplan and/or upgrades with the specified tag.
    parameters: [
      {
        name: containerID
        optional: false
        type: any
      }
      {
        name: sequence
        optional: false
        type: any
      }
      {
        name: stage
        optional: false
        type: any
      }
      {
        name: buildlimit
        optional: true
        type: any
      }
      {
        name: tags
        optional: true
        type: any
      }
    ]
    returnType: upgradeTable
    deprecated: false
    detailed:
      '''
      `upgradeTable`
      ```lua
      upgradeTable = {
      Â Â upgradetype = {
      Â Â Â Â name = upgrade name,
      Â Â Â Â tags = upgrade tags,
      Â Â Â Â total = total number of upgrades,
      Â Â Â Â operational = number of operational upgrades,
      Â Â Â Â construction = number of upgrades in construction
      Â Â },
      Â Â totaltotal = sum of total number of upgrades,
      Â Â totaloperational = sum of the number of operational upgrades,
      Â Â totalconstruction = sum of the number of upgrades in construction
      }
      ```
      '''
    notes: ""
  }
  GetBuildTree: {
    description: Returns information about the build tree of the specified macro or component.
    parameters: [
      {
        name: macro or componentID
        optional: false
        type: any
      }
    ]
    returnType: buildTreeTable
    deprecated: false
    detailed:
      '''
      `buildTreeTable`
      ```lua
      buildTreeTable = {
      Â Â name = "Station (base module) name for display",
      Â Â [1] = {
      Â Â Â Â sequence = "sequencename"
      Â Â Â Â name = "Sequence name for display",
      Â Â Â Â currentstage = currentstagenumber or 0, Â Â Â -- only if component supplied
      Â Â Â Â [1] = {
      Â Â Â Â Â Â stage = stagenumber,
      Â Â Â Â Â Â name = "Stage module name for display",
      Â Â Â Â Â Â primarycomponent = Primary component of that stage, if it is already build (Note: At the moment gives just the first of the primary components)
      Â Â Â Â },
      Â Â Â Â [2] = ...
      Â Â },
      Â Â [2] = ...
      }
      ```
      '''
    notes: ""
  }
  GetCaptureHQOption: {
    description: Returns current capture hq setting.
    parameters: []
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetCargoAfterShoppingList: {
    description: Returns information of ammo counts on the container after the trade queue is resolved.
    parameters: [
      {
        name: containerID
        optional: false
        type: any
      }
    ]
    returnType: wareKeyTable
    deprecated: false
    detailed:
      '''
      `wareKeyTable`
      ```lua
      wareKeyTable = {
      Â Â [ware] = amount,
      Â Â ...
      }
      ```
      '''
    notes: Call **SetVirtualCargoMode**Â on containerID first, otherwise result will be empty.
  }
  GetClusters: {
    description: Returns an array of all player-known clusters.
    parameters: [
      {
        name: showonmap
        optional: true
        type: any
      }
    ]
    returnType: componentIDArray
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetCollectableData: {
    description: Returns information on the content of the specified collectable.
    parameters: [
      {
        name: collectableID
        optional: false
        type: any
      }
    ]
    returnType: collectableDataTable
    deprecated: false
    detailed:
      '''
      `collectableDataTable`
      ```lua
      collectableDataTable = {
      Â type = "ammo" | "wares" | "shieldrestore",
      #if ammo:
      Â Â macro = ammo macro name,
      Â Â name = ammo name,
      Â Â icon = ammo icon,
      Â Â amount = ammo amount
      #elseif wares:
      Â Â wares = {
      Â Â Â Â [1] = {
      Â Â Â Â Â Â ware = ware,
      Â Â Â Â Â Â amount = amount
      Â Â Â Â },
      Â Â Â Â [2] = ...
      Â Â },
      Â Â money = contained money
      #elseif shieldrestore:
      Â Â restoretype = "duration" | "hp" | "percent",
      Â Â value = value (depending on restoretype)
      #end
      }
      ```
      '''
    notes: shieldrestore value changed to return a floating point number (rather than an integer number) in 4.10 Beta 1
  }
  GetCollisionAvoidanceAssistOption: {
    description: Returns current collision avoidance assist option.
    parameters: []
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetCommander: {
    description: Returns commander of specified controllable, if any.
    parameters: [
      {
        name: controllableID
        optional: false
        type: any
      }
    ]
    returnType: commanderID
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetCommanderEntity: {
    description: Returns commanding entity of specified controllable, if any.
    parameters: [
      {
        name: controllableID
        optional: false
        type: any
      }
    ]
    returnType: entityID
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetComponentData: {
    description: Returns properties of the specified component. Possible properties are:
    parameters: [
      {
        name: componentID
        optional: false
        type: any
      }
      {
        name: ...
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed:
      '''
      `Possible properties`
      ```lua
      - Any Component:
      Â "name", "uiname", "description", "image", "owner", "ownername", "ownershortname", "ownericon", "size", "zone", "zoneid", "sector",
      Â "sectorid", "cluster", "clusterid", "galaxyid", "macro", "parent", "revealpercent", "isplayerowned", "isfriend", "isenemy", "iskill", "isdock"
      Â "wares", "caninitiatecomm", "sequence", "stage"
      - Destructible:
      Â "hull", "hullmax", "hullpercent", "shield", "shieldmax", "shieldpercent", "efficiencyfactor", "efficiencybonus", "efficiencythreshold",
      Â "isfunctional"
      - Controllable:
      Â "controlentity", "pilot", "defencenpc", "tradenpc", "engineer", "boardingnpc", "architect", "maxforwardspeed", "maxradarrange"
      - Defensible:
      "missilecapacity", "boardingresistance", "boardingstrength"
      - Object:
      Â "primarypurpose", "primarypurposename"
      - Container:
      Â "engines", "shieldgenerators", "cargo", "products", "availableproducts", "allresources", "pureresources", "intermediatewares", "buildingmodule",
      Â "tradeoffers", "tradesubscription", "numtrips", "isshipyard", "tradewares"
      - Ship:
      Â "hasjumpdrive", "basejumpcost", "issellable", "nextjumptime", "isjumpdrivecharging", "isjumpdrivebusy", "isdocked", "isdocking"
      Â 
      - Station:
      Â "istradestation"
      - Entity:
      Â "typestring", "typeicon", "typename", "skills", "combinedskill", "experienceprogress", "neededexperience", "skillsvisible",
      Â "repairqueue", "aicommandstack", "aicommand", "aicommandraw", "aicommandparam", "aicommandparam2", "aicommandaction", "aicommandactionparam",
      Â "iscontrolentity", "money", "commissions", "discounts", "hasownaccount", "isspecialist", "isremotecommable", "wantedmoney", "ismissionactor",
      Â "buildmodule", "productionmoney", "isitemtrader"
      - Radar:
      Â "radarrange"
      - CollectableWares/Crate:
      Â "money"
      - ControlPanel
      Â "requireditems", "iscontrolpanelhacked", "hackexpirationtime"
      - Gate
      Â "destination"
      - Highway, HighwayEntryGate, HighwayExitGate
      Â "nextdestname"
      - Space
      Â "mapshortname"
      - Dockingbay
      Â "populationtype"
      - Production Module
      Â "isproducing"
      - Zone
      Â "istemporaryzone", "hasjumpbeacon", "exitsector"
      - Lockbox
      Â "numlocks"
      ```
      '''
    notes:
      '''
      Container "tradewares" property added in 3.60 Beta 3
      Entity "productionmoney" property added in 3.60 Beta 3
      Ship "nextjumptime" property added in 4.00 Beta 2
      Ship "isjumpdrivecharging" property added in 4.00 Beta 2
      Ship "isjumpdrivebusy" property added in 4.00 Beta 2
      Station "istradestation" property added in 4.00 Beta 3
      Entity "isitemtrader" property added in 4.00 Beta 3
      Ship "isdocked" property added in 4.00 Beta 5
      Ship "isdocking" property added in 4.00 Beta 5
      '''
  }
  GetComponentName: {
    description: Returns the name of the component. Iff the component is an object the name is formatted accordingly to the given parameters.
    parameters: [
      {
        name: componentID
        optional: false
        type: any
      }
      {
        name: fontname
        optional: false
        type: any
      }
      {
        name: fontsize
        optional: false
        type: any
      }
      {
        name: availablewidth
        optional: false
        type: any
      }
      {
        name: omitfaction
        optional: true
        type: any
      }
      {
        name: forcewidth
        optional: true
        type: any
      }
    ]
    returnType: name
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetConfineMouseOption: {
    description: Returns the current confine mouse option.
    parameters: []
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetContainedObjectsByOwner: {
    description: Returns an array* *of objects owned by the specified faction. Optionally results can be confined to a specified space.
    parameters: [
      {
        name: faction
        optional: false
        type: any
      }
      {
        name: space
        optional: true
        type: any
      }
    ]
    returnType: objectIDArray
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetContainedShips: {
    description: Returns an array of ships in the specified space or the galaxy.
    parameters: [
      {
        name: space
        optional: true
        type: any
      }
      {
        name: showonmap
        optional: true
        type: any
      }
    ]
    returnType: shipIDArray
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetContainedShipsByOwner: {
    description: Returns an array of ships owned by the specified faction. Optionally results can be confined to a specified space.
    parameters: [
      {
        name: faction
        optional: false
        type: any
      }
      {
        name: space
        optional: true
        type: any
      }
    ]
    returnType: shipIDArray
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetContainedStations: {
    description: Returns an array of stations in the specified space or the galaxy.
    parameters: [
      {
        name: space
        optional: true
        type: any
      }
      {
        name: showonmap
        optional: true
        type: any
      }
      {
        name: includeconstruction
        optional: true
        type: any
      }
    ]
    returnType: stationIDArray
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetContainedStationsByOwner: {
    description: Returns an array of stations owned by the specified faction. Optionally results can be confined to a specified space.
    parameters: [
      {
        name: faction
        optional: false
        type: any
      }
      {
        name: space
        optional: true
        type: any
      }
      {
        name: includeconstruction
        optional: true
        type: any
      }
    ]
    returnType: stationIDArray
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetContainerWarePrice: {
    description: Returns the price the specified container buys/sells the ware.
    parameters: [
      {
        name: containerID orÂ buildmoduleID
        optional: false
        type: any
      }
      {
        name: ware
        optional: false
        type: any
      }
      {
        name: buysellswitch
        optional: false
        type: any
      }
    ]
    returnType: price
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetContextByClass: {
    description: Returns the context of the specified class of the component.
    parameters: [
      {
        name: componentID
        optional: false
        type: any
      }
      {
        name: classname
        optional: false
        type: any
      }
      {
        name: includeself
        optional: true
        type: any
      }
    ]
    returnType: contextID
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetControlEntity: {
    description: Returns the control entity of the specified controllable of the given type.
    parameters: [
      {
        name: controllableID
        optional: false
        type: any
      }
      {
        name: commandertype
        optional: false
        type: any
      }
    ]
    returnType: entityID
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetControllerInfo: {
    description: Returns the current input mode ("mouseSteering"|"mouseCursor"|"gamepad"|"touch"|"joystick") and the joystick input angle (only reasonable in "touch", "joystick", or "gamepad" mode).
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: *The angle value will be -1, if the joystick is in its safe area. Otherwise it returns the angle in radian \[0..2Ï\] (with 0 corresponding to the joystick pointing upwards - rotation is clockwise).*
    notes:
      '''
      4.21 Beta 1 (VR: 4.20): Added "touch" as new possible input mode.
      4.30 RC 2 (VR: 4.30 Hotfix 2): Added "joystick" as new possible input mode.
      '''
  }
  GetCrashReportOption: {
    description: Returns the current crash report setting.
    parameters: []
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetCurRealTime: {
    description: Returns the real time since session start in seconds.
    parameters: []
    returnType: time
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetCurrentBuildSlot: {
    description: Returns information about the current build process of the specified container. Returns nil if not currently building.
    parameters: [
      {
        name: containerID
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed:
      '''
      `upgradePlanArray`
      ```lua
      upgradePlanArray = {
      Â Â [1] = {
      Â Â Â Â [1] = upgradetype,
      Â Â Â Â [2] = level
      Â Â },
      Â Â [2] = { ... }
      }
      ```
      '''
    notes: ""
  }
  GetCurrentBuildSlotResources: {
    description: Returns the needed resources to build the current build slot under construction by this container or buildmodule.
    parameters: [
      {
        name: containerID or buildmoduleID
        optional: false
        type: any
      }
    ]
    returnType: resourceTable
    deprecated: false
    detailed:
      '''
      `resourceTable`
      ```lua
      resourceTable = {
      Â Â [1] = {
      Â Â Â Â ware = ware id,
      Â Â Â Â name = ware name,
      Â Â Â Â cycle = amount,
      Â Â Â Â price = price
      Â Â },
      Â Â [2] = { ... },
      Â Â ...,
      Â Â totalprice = totalprice
      }
      ```
      '''
    notes: ""
  }
  GetCurrentModuleName: {
    description: Returns the name of the current game module.
    parameters: []
    returnType: unknown
    deprecated: true
    detailed: ""
    notes: **DEPRECATED** - use FFI function IsStartmenu() instead
  }
  GetCurTime: {
    description: Returns the ingame time in seconds.
    parameters: []
    returnType: unknown
    deprecated: true
    detailed: ""
    notes: **DEPRECATED** - use FFI function GetCurrentGameTime() instead
  }
  GetDate: {
    description: Returns a string or a table containing date and time, formatted according to the given string "format".
    parameters: [
      {
        name: format
        optional: true
        type: any
      }
      {
        name: time
        optional: true
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: Refer to the Lua documentation about os.date() for details.*
    notes: As of XR 4.30 RC 1 GetDate() supports only the following format specifiers:
  }
  GetDeadzoneOption: {
    description: Returns the current deadzone setting.
    parameters: []
    returnType: int
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetDialogOption: {
    description: Returns information about the specified dialog option of the current active conversation.
    parameters: [
      {
        name: index
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed:
      '''
      text is the actual dialog menu button text
      isSelectable indicates whether the option can be selected
      isImmediate indicates whether the option is flagged as an immediate option
      shortcutKey specifies the assigned shortcut key associated with the option
      RESERVED is an internal value not to be used
      mouseOverText is the text to display when mousing over the specified option*
      '''
    notes: ""
  }
  GetDifficultyOption: {
    description: Returns the current difficulty setting.
    parameters: []
    returnType: string
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetDistortionOption: {
    description: Returns the current distortion setting.
    parameters: []
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetDroneCommander: {
    description: Returns the drone commander of the specified drone, if any.
    parameters: [
      {
        name: drone
        optional: false
        type: any
      }
    ]
    returnType: dronecommanderID
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetDrones: {
    description: Returns an array of all drones of that ship.
    parameters: [
      {
        name: shipID
        optional: false
        type: any
      }
    ]
    returnType: droneIDArray
    deprecated: false
    detailed: ""
    notes: See also **GetUnitStorageData**.
  }
  GetEffectDistanceOption: {
    description: Returns the current effect distance setting.
    parameters: []
    returnType: number
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetEfficiencyUpgrades: {
    description: Returns an array with the macro names of all efficiency upgrades connected to the specified destructible.
    parameters: [
      {
        name: destructible
        optional: false
        type: any
      }
    ]
    returnType: stringArray
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetEMCutsceneOption: {
    description: Returns false
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: **DEPRECATED**Â \- do not use
  }
  GetEntityTypeData: {
    description: Returns properties of the specified component. Possible properties are: "name", "icon"
    parameters: [
      {
        name: entitytype
        optional: false
        type: any
      }
      {
        name: ...
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetErrorSeverity: {
    description: Returns the severity of the specified log message.
    parameters: [
      {
        name: logMessageIndex
        optional: false
        type: any
      }
    ]
    returnType: severity
    deprecated: false
    detailed:
      '''
      severity
      level
      info
      1
      error
      2
      panic
      5
      '''
    notes: info
  }
  GetExtensionList: {
    description: Returns information about all extensions.
    parameters: []
    returnType: extensionTable
    deprecated: false
    detailed:
      '''
      `extensionTable`
      ```lua
      extensionTable = {
      Â Â [1] = {
      Â Â Â Â id = extension id,
      Â Â Â Â index = extension index,
      Â Â Â Â name = extension name,
      Â Â Â Â desc = extension description,
      Â Â Â Â author = extension author,
      Â Â Â Â date = extension date,
      Â Â Â Â location = extension location,
      Â Â Â Â version = extension version,
      Â Â Â Â enabled = extension enabled,
      Â Â Â Â sync = extension sync,
      Â Â Â Â personal = extension personal,
      Â Â Â Â isworkshop = is extension in workshop,
      Â Â Â error = extension error ID, if any,
      Â Â Â Â errortext = extension error text, if any,
      Â warning = workshop update warning, if any,
      Â Â Â Â warningtext = workshop update warning, if any,
      Â Â Â Â dependencies = {
      Â Â Â Â Â Â id = dependency id,
      Â Â Â Â Â Â name = dependency name,
      Â Â Â Â Â Â version = dependency version
      Â Â Â Â }
      Â Â }
      }
      ```
      '''
    notes: ""
  }
  GetExtensionUpdateWarningText: {
    description: Returns the update warning textÂ of a workshop extension, if any.
    parameters: [
      {
        name: extensionid
        optional: false
        type: any
      }
      {
        name: personal
        optional: false
        type: any
      }
    ]
    returnType: string
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetFOVOption: {
    description: Returns current fov setting.
    parameters: []
    returnType: number
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetFreeCargoAfterShoppingList: {
    description: Returns amount of free cargo space for the specified ware after the trade queue will be resolved.
    parameters: [
      {
        name: containerID
        optional: false
        type: any
      }
      {
        name: ware
        optional: false
        type: any
      }
    ]
    returnType: amount
    deprecated: false
    detailed: ""
    notes: Call **SetVirtualCargoMode**Â onÂ containerIDÂ first, otherwise result will be empty.
  }
  GetFreeUnitStorageAfterShoppingList: {
    description: Returns amount for free unit storage space for the specified container.
    parameters: [
      {
        name: containerID
        optional: false
        type: any
      }
    ]
    returnType: amount
    deprecated: false
    detailed: ""
    notes: Call **SetVirtualCargoMode**Â onÂ containerIDÂ first, otherwise result will be empty.
  }
  GetFullscreenDetailmonitorOption: {
    description: Returns the current fullscreen detailmonitor setting.
    parameters: []
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetFullscreenOption: {
    description: Returns the current fullscreen and borderless setting.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetGamepadModeOption: {
    description: Returns the current gamepad mode setting.
    parameters: []
    returnType: int
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetGammaOption: {
    description: Returns the current gamma setting.
    parameters: []
    returnType: number
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetGates: {
    description: Returns an array of gates in the specified space.
    parameters: [
      {
        name: space
        optional: false
        type: any
      }
      {
        name: showonmap
        optional: true
        type: any
      }
    ]
    returnType: gateIDArray
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetGfxQualityOption: {
    description: Returns the current gfx quality setting.
    parameters: []
    returnType: int
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetGlobalSyncSetting: {
    description: Returns the current global extension sync setting.
    parameters: []
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetGlowOption: {
    description: Returns the current glow setting.
    parameters: []
    returnType: int
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetHeldLicences: {
    description: Returns a table with information about all held licences of the specified faction.
    parameters: [
      {
        name: faction
        optional: false
        type: any
      }
    ]
    returnType: licenceTable
    deprecated: false
    detailed:
      '''
      `licenceTable`
      ```lua
      licenceTable = {
      Â Â [1] = {
      Â Â Â Â id = licence id,
      Â Â Â type = licence type,
      Â Â Â Â name = licence name,
      Â Â Â Â icon = licence icon,
      Â Â Â Â price = licence price,
      Â Â Â Â minrelation = minimum relation required,
      Â Â Â Â faction = factionid
      Â Â },
      Â Â [2] = { ... }
      }
      ```
      '''
    notes: ""
  }
  GetHintPosition: {
    description: Returns the defined x, y coordinates of the specified position in percent with (0, 0) being in the upper left corner. Hint positions can be defined in parameters.xml.
    parameters: [
      {
        name: position
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetHoloMapColors: {
    description: Returns the colors defined for various*Â *holomap items in parameters.xml.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed:
      '''
      `Color`
      ```lua
      Color = {
      Â Â r = red (0-255),
      Â Â g = green (0-255),
      Â Â b = blue (0-255),
      Â Â a = alpha (0-100)
      }
      ```
      '''
    notes: ""
  }
  GetIncomingRemoteWares: {
    description: Returns information about incoming remote transport wares.
    parameters: [
      {
        name: wareType
        optional: false
        type: any
      }
    ]
    returnType: wareKeyTable
    deprecated: false
    detailed:
      '''
      `wareKeyTable`
      ```lua
      wareKeyTable = {
      Â Â [ware] = amount,
      Â Â ...
      }
      ```
      '''
    notes: ""
  }
  GetInputActionMap: {
    description: Returns the current input actions mapped.
    parameters: []
    returnType: actionTable
    deprecated: false
    detailed:
      '''
      `actionTable`
      ```lua
      actionTable = {
      Â Â [ActionID] = {
      Â Â Â Â [1] = {
      Â Â Â Â Â Â [1] = InputID Source,
      Â Â Â Â Â Â [2] = InputID Code,
      Â Â Â Â Â Â [3] = InputID Signum
      Â Â Â Â },
      Â Â Â Â [2] = { ... }
      Â Â },
      Â Â [ActionID] = { ... }
      }
      ```
      '''
    notes: ""
  }
  GetInputProfiles: {
    description: Returns information about the current input profiles.
    parameters: []
    returnType: inputProfileTable
    deprecated: false
    detailed:
      '''
      `inputProfileTable`
      ```lua
      inputProfileTable = {
      Â Â [1] = {
      Â Â Â Â id = profile ID,
      Â Â Â Â version = profile version,
      Â Â Â Â filename = filename,
      Â Â Â Â personal = is file in personal folder?,
      Â Â Â Â name = profile name,
      Â Â Â Â customname = profile custom name
      Â Â },
      Â Â [2] = { ... }
      }
      ```
      '''
    notes: ""
  }
  GetInputRangeMap: {
    description: Returns the current input ranges mapped.
    parameters: []
    returnType: rangeTable
    deprecated: false
    detailed:
      '''
      `rangeTable`
      ```lua
      rangeTable = {
      Â Â [RangeID] = {
      Â Â Â Â [1] = {
      Â Â Â Â Â Â [1] = InputID Source,
      Â Â Â Â Â Â [2] = InputID Code,
      Â Â Â Â Â Â [3] = InputID Signum
      Â Â Â Â },
      Â Â Â Â [2] = { ... }
      Â Â },
      Â Â [RangeID] = { ... }
      }
      ```
      '''
    notes: ""
  }
  GetInputStateMap: {
    description: Returns the current input states mapped.
    parameters: []
    returnType: stateTable
    deprecated: false
    detailed:
      '''
      `stateTable`
      ```lua
      stateTable = {
      Â Â [StateID] = {
      Â Â Â Â [1] = {
      Â Â Â Â Â Â [1] = InputID Source,
      Â Â Â Â Â Â [2] = InputID Code,
      Â Â Â Â Â Â [3] = InputID Signum
      Â Â Â Â },
      Â Â Â Â [2] = { ... }
      Â Â },
      Â Â [StateID] = { ... }
      }
      ```
      '''
    notes: ""
  }
  GetInventory: {
    description: Returns information about the wares held in the inventory of specified entity.
    parameters: [
      {
        name: entityID
        optional: false
        type: any
      }
    ]
    returnType: wareTable
    deprecated: false
    detailed:
      '''
      `wareTable`
      ```lua
      wareTable = {
      Â Â [ware1] = {
      Â Â Â Â name = ware name
      Â Â Â Â amount = ware amount
      Â Â Â Â price = ware price
      Â Â },
      Â Â [ware2] = { ... }
      }
      ```
      '''
    notes: ""
  }
  GetInversionSetting: {
    description: Returns the current inversion setting for the specified input range.
    parameters: [
      {
        name: rangeid
        optional: false
        type: any
      }
    ]
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetJoysticksOption: {
    description: Returns information about currently connected joysticks.
    parameters: []
    returnType: joystickTable
    deprecated: false
    detailed:
      '''
      `joystickTable`
      ```lua
      joystickTable = {
      Â Â [1] = {
      Â Â Â Â name = joystick name,
      Â Â Â Â guid = joystick guid
      Â Â },
      Â Â [2] = { ... }
      }
      ```
      '''
    notes: ""
  }
  GetJumpBeacons: {
    description: Returns an array of jumpbeacons in the specified zone.
    parameters: [
      {
        name: zoneID
        optional: false
        type: any
      }
      {
        name: showonmap
        optional: true
        type: any
      }
    ]
    returnType: jumpbeaconIDArray
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetLegacyMainMenuOption: {
    description: Returns the current legacy main menu setting.
    parameters: []
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetLegacyShadersOption: {
    description: Returns the current legacy shaders setting.
    parameters: []
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetLibrary: {
    description: Returns information about the items in the specified library.
    parameters: [
      {
        name: library
        optional: false
        type: any
      }
    ]
    returnType: libraryTable
    deprecated: false
    detailed:
      '''
      `libraryTable`
      ```lua
      libraryTable = {
      Â Â [1] = {
      Â Â Â Â id = item id,
      Â Â Â Â name = item name,
      Â Â Â Â icon = item icon
      Â Â Â Â [parent = item parent]
      Â Â Â Â [relation = player relation]
      Â Â },
      Â Â [2] = { ... }
      }
      ```
      '''
    notes: ""
  }
  GetLibraryEntry: {
    description: Returns detailed information about the specified library entry.
    parameters: [
      {
        name: library
        optional: false
        type: any
      }
      {
        name: itemid
        optional: false
        type: any
      }
    ]
    returnType: entryTable
    deprecated: false
    detailed:
      '''
      `entryTable`
      ```lua
      entryTable = {
      Â Â name = info name,
      Â Â description = info description,
      Â Â icon = info icon,
      Â Â image = info image,
      Â Â video = info video
      Â Â [race = npc race,
      Â Â faction = npc faction]
      Â Â [hull = object hull,
      Â Â maxspeed = object maxspeed,
      Â Â shield = object shield,
      Â Â jumpdrive = object has jumpdrive?,
      Â Â storagecapacity = storage capacity,
      Â Â storagetags = storage tags,
      Â Â storagenames = storage names,
      Â Â unitcapacity = unit capacity,
      Â Â productions = {
      Â Â Â Â [1] = {
      Â Â Â Â Â Â [1] = {
      Â Â Â Â Â Â Â Â id = product id,
      Â Â Â Â Â Â Â Â name = product name,
      Â Â Â Â Â Â Â Â cycle = product cycle time,
      Â Â Â Â Â Â Â Â amount = product amount
      Â Â Â Â Â Â },
      Â Â Â Â Â Â [2] = { ... }
      Â Â Â Â },
      Â Â Â Â [2] = { ... }
      Â Â },
      Â Â weapons = {
      Â Â Â Â [1] = {
      Â Â Â Â Â Â class = weapon / missile,
      Â Â Â Â Â Â id = weapon id,
      Â Â Â Â Â Â name = weapon name
      Â Â Â Â },
      Â Â Â Â [2] = { ... }
      Â Â },
      Â Â upgrades = {
      Â Â Â Â [1] = {
      Â Â Â Â Â Â upgrade = upgrade type,
      Â Â Â Â Â Â name = upgrade name,
      Â Â Â Â Â Â total = upgrade total amount
      Â Â Â Â },
      Â Â Â Â [2] = { ... }
      Â Â }]
      Â Â [primaryrace = faction primaryrace]
      Â Â [avgprice = ware average price,
      Â Â volume = ware volume,
      Â Â transporttype = ware transport type,
      Â Â methods = {
      Â Â Â Â [1] = method,
      Â Â Â Â [2] = ...
      Â Â }]
      Â Â [range = weapon range,
      Â Â dps = weapon dps]
      Â Â [speed = missile speed,
      Â Â acceleration = missile acceleration,
      Â Â damage = missile damage]
      Â Â [hull = shieldgen hull,
      Â Â shield = shieldgen shield]
      Â Â [hull = turret hull,
      Â Â range = turret range,
      Â Â dps = turret dps,
      Â Â rotation = turret rotation speed]
      }
      ```
      '''
    notes: '''"storagenames" field added in 4.22 Beta 2Â (VR: 4.22)'''
  }
  GetLibrarySize: {
    description: Returns the size of the specified library.
    parameters: [
      {
        name: library
        optional: false
        type: any
      }
    ]
    returnType: int
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetLocalizedKeyName: {
    description: Returns the name of the key assigned to the specified input action, state or range.
    parameters: [
      {
        name: type
        optional: false
        type: any
      }
      {
        name: id
        optional: false
        type: any
      }
    ]
    returnType: string
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetLocalizedRawKeyName: {
    description: Returns the name of the specified keycode.
    parameters: [
      {
        name: keycode
        optional: false
        type: any
      }
    ]
    returnType: string
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetLocalMouseClickPosition: {
    description: Returns the current mouse click position (nil, if the mouse was not clicked on the current environment).
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetLocalMousePosition: {
    description: Returns the current mouse position (nil, if the mouse is not over the current environment).
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetLODOption: {
    description: Returns the current lod setting.
    parameters: []
    returnType: number
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetLogbook: {
    description: Returns logbook entries in the specified range, optionally filtered by category.
    parameters: [
      {
        name: start
        optional: false
        type: any
      }
      {
        name: count
        optional: false
        type: any
      }
      {
        name: category
        optional: true
        type: any
      }
    ]
    returnType: logbookTable
    deprecated: false
    detailed:
      '''
      `logbookTable`
      ```lua
      logbookTable = {
      Â Â [1] = {
      Â Â Â Â text = log text,
      Â Â Â Â time = timestamp,
      Â Â Â Â category = log category,
      Â Â Â Â interaction = log interaction type,
      Â Â Â Â interactioncomponent = log interaction component, dependent on type
      Â Â [2] = ...
      }
      ```
      '''
    notes: ""
  }
  GetMacroBuildSlotResources: {
    description: ""
    parameters: [
      {
        name: macro
        optional: false
        type: any
      }
      {
        name: sequence
        optional: false
        type: any
      }
      {
        name: stage
        optional: false
        type: any
      }
    ]
    returnType: resourceTable
    deprecated: false
    detailed:
      '''
      `resourceTable`
      ```lua
      resourceTable = {
      Â Â [1] = {
      Â Â Â Â ware = ware id,
      Â Â Â Â name = ware name,
      Â Â Â Â cycle = amount,
      Â Â Â Â price = price
      Â Â },
      Â Â [2] = { ... },
      Â Â ...,
      Â Â totalprice = totalprice
      }
      ```
      '''
    notes: ""
  }
  GetMacroData: {
    description: Returns properties of the specified macro. Possible properties are:
    parameters: [
      {
        name: macro
        optional: false
        type: any
      }
      {
        name: ...
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: *"name", "icon", "efficiencyfactor", "efficiencybonus", "ware", "primarypurpose", "primarypurposename", "storagecapacity", "storagetags", "storagenames", "scanlevel"*
    notes:
      '''
      "scanlevel" property added in 4.00 RC 1
      as of 4.00 RC 1 "storagetags" no longer returns "fuel", if the queried object contains another storage type as well
      "storagenames" property added in 4.22 Beta 2Â (VR: 4.22)
      '''
  }
  GetMacroUnitStorageCapacity: {
    description: Returns the capacity of unit storage on the specified macro build slot.
    parameters: [
      {
        name: macro
        optional: false
        type: any
      }
      {
        name: sequence
        optional: false
        type: any
      }
      {
        name: stage
        optional: false
        type: any
      }
      {
        name: buildlimit
        optional: true
        type: any
      }
    ]
    returnType: int
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetMappedJoysticks: {
    description: Returns an array of joysticks currently mapped for input. Indices refer to the return value of **GetJoysticksOption**().
    parameters: []
    returnType: joystickIndexArray
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetMaxTextLength: {
    description: Returns the maximum length of the specified text which can fit in the given width in this font.
    parameters: [
      {
        name: text
        optional: false
        type: any
      }
      {
        name: fontname
        optional: false
        type: any
      }
      {
        name: fontsize
        optional: false
        type: any
      }
      {
        name: width
        optional: false
        type: any
      }
    ]
    returnType: stringLength
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetMenuParameters: {
    description: Returns the parameters the current menu was opened with.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetMiningUnitMacros: {
    description: Returns all unit macros the specified macro can use to mine, if any.
    parameters: [
      {
        name: macro
        optional: false
        type: any
      }
    ]
    returnType: macroArray
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetMissionDetails: {
    description: Returns details of the specified mission.
    parameters: [
      {
        name: missionIndex
        optional: false
        type: any
      }
      {
        name: fontname
        optional: false
        type: any
      }
      {
        name: fontsize
        optional: false
        type: any
      }
      {
        name: textwidth
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes:
      '''
      4.00 Beta 3: added hasObjective return value
      4.31 Beta 1: removed fontname, fontsize, and textwidth parameters
      '''
  }
  GetMissionObjective: {
    description: Returns details of the specified mission's objective.
    parameters: [
      {
        name: missionIndex
        optional: false
        type: any
      }
      {
        name: fontname
        optional: false
        type: any
      }
      {
        name: fontsize
        optional: false
        type: any
      }
      {
        name: textwidth
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: 4.31 Beta 1: removed fontname, fontsize, and textwidth parameters
  }
  GetMissionOfferAtConnection: {
    description: Returns details about the mission offer at the specified location.
    parameters: [
      {
        name: componentID
        optional: false
        type: any
      }
      {
        name: templateConnectionName
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetMissionOfferDetails: {
    description: Returns details about the specified mission offer.
    parameters: [
      {
        name: offerID
        optional: false
        type: any
      }
      {
        name: fontname
        optional: false
        type: any
      }
      {
        name: fontsize
        optional: false
        type: any
      }
      {
        name: textwidth
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes:
      '''
      4.10 Beta 5: added offercomponent return value
      4.31 Beta 1: removed fontname, fontsize, and textwidth parameters
      '''
  }
  GetModuleType: {
    description: Returns the module type of the specified destructible.
    parameters: [
      {
        name: destructibleID
        optional: false
        type: any
      }
    ]
    returnType: type
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetNeededBuildSlotResources: {
    description: Returns the needed resources of the specified buildmodule.
    parameters: [
      {
        name: containerID or buildmoduleID
        optional: false
        type: any
      }
    ]
    returnType: resourceTable
    deprecated: false
    detailed:
      '''
      `resourceTable`
      ```lua
      resourceTable = {
      Â Â [1] = {
      Â Â Â Â ware = ware id,
      Â Â Â Â name = ware name,
      Â Â Â Â cycle = amount,
      Â Â Â Â price = price
      Â Â },
      Â Â [2] = { ... },
      Â Â ...,
      Â Â totalprice = totalprice
      }
      ```
      '''
    notes: ""
  }
  GetNonSquadShipsForTradeOffersOption: {
    description: Returns the setting whether non-squad ships should be included in the trade offers menu.
    parameters: []
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetNotificationDetails: {
    description: Returns details about the specified notification (or nil, if there's an error or if the notification doesn't exist).
    parameters: [
      {
        name: notificationID
        optional: false
        type: any
      }
    ]
    returnType: notificationDetailsTable
    deprecated: false
    detailed: ""
    notes:
      '''
      4.31 Beta 1: added the interactionID to the returned table
      4.31 Beta 1: **DEPRECATED** the interactionDescriptor from the returned table
      '''
  }
  GetNotUpgradesByClass: {
    description: Returns an array of all components included in the specified destructible of the specified class, which are not upgrades.
    parameters: [
      {
        name: destructibleID
        optional: false
        type: any
      }
      {
        name: class
        optional: false
        type: any
      }
    ]
    returnType: componentIDArray
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetNPCBlackboard: {
    description: Return the blackboard variable "valueName" from the blackboard of the specified entity.
    parameters: [
      {
        name: entityID
        optional: false
        type: any
      }
      {
        name: valueName
        optional: false
        type: any
      }
    ]
    returnType: value
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetNPCs: {
    description: Returns an array of entities in the specified desctructible.
    parameters: [
      {
        name: destructibleID
        optional: false
        type: any
      }
    ]
    returnType: entityIDArray
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetNPCsInSectorOnStations: {
    description: Returns an array of entities on stations in the specified sector* within the given distance to the player.
    parameters: [
      {
        name: sectorID
        optional: false
        type: any
      }
      {
        name: distance
        optional: false
        type: any
      }
    ]
    returnType: entityIDArray
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetNumIncomingRemoteWares: {
    description: Returns the number of incoming remote transport wares for specified type.
    parameters: [
      {
        name: wareType
        optional: false
        type: any
      }
    ]
    returnType: int
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetNumLogbook: {
    description: Returns the number of logbook entries, optionally filtered by the given category.
    parameters: [
      {
        name: category
        optional: true
        type: any
      }
    ]
    returnType: int
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetNumMissions: {
    description: Returns the number of accecpted missions.
    parameters: []
    returnType: int
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetObjectRepairStatus: {
    description: Returns information of all damaged subsystems of the specified container.*
    parameters: [
      {
        name: containerID
        optional: false
        type: any
      }
    ]
    returnType: subsystemsTable
    deprecated: false
    detailed:
      '''
      `subsystemsTable`
      ```lua
      subsystemsTable = {
      Â Â shieldgens = {
      Â Â Â Â [1] = component id,
      Â Â Â Â [2] = ...
      Â Â },
      Â Â engines = {
      Â Â Â Â [1] = component id,
      Â Â Â Â [2] = ...
      Â Â },
      Â Â weapons = {
      Â Â Â Â [1] = component id,
      Â Â Â Â [2] = ...
      Â Â },
      Â Â jumpdrives = {
      Â Â Â Â [1] = component id,
      Â Â Â Â [2] = ...
      Â Â }
      }
      ```
      '''
    notes: ""
  }
  GetOwnLicences: {
    description: Returns information*Â *of the own licences the specified faction offers.
    parameters: [
      {
        name: faction
        optional: false
        type: any
      }
    ]
    returnType: licenceTable
    deprecated: false
    detailed:
      '''
      `licenceTable`
      ```lua
      licenceTable = {
      Â Â [1] = {
      Â Â Â Â id = licence id,
      Â Â Â type = licence type,
      Â Â Â Â name = licence name,
      Â Â Â Â icon = licence icon,
      Â Â Â Â price = licence price,
      Â Â Â Â minrelation = minimum relation required,
      Â Â Â Â issellable = can the licence be bought
      Â Â },
      Â Â [2] = { ... }
      }
      ```
      '''
    notes: ""
  }
  GetPersonalizedCrashReportsOption: {
    description: Returns the setting to send personalized crash reports.
    parameters: []
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetPlatforms: {
    description: Returns an array of dockingbays that are platforms of the specified container.
    parameters: [
      {
        name: containerID
        optional: false
        type: any
      }
    ]
    returnType: dockingbayIDArray
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetPlayerActivity: {
    description: Returns the current player mode.
    parameters: []
    returnType: string
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetPlayerAmmoCount: {
    description: Returns the ammo count of the specified macro on the player ship.
    parameters: [
      {
        name: macro
        optional: false
        type: any
      }
    ]
    returnType: int
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetPlayerContextByClass: {
    description: Returns the context of the player with the specified class, if any.
    parameters: [
      {
        name: class
        optional: false
        type: any
      }
    ]
    returnType: contextID
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetPlayerDroneSlots: {
    description: Returns the number of drone slots on the player ship.
    parameters: []
    returnType: int
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetPlayerDroneStorageData: {
    description: Returns information on the drones of the playership.
    parameters: []
    returnType: playerDroneTable
    deprecated: false
    detailed:
      '''
      `playerDroneTable`
      ```lua
      playerDroneTable = {
      Â Â stored = total stored amount,
      Â Â [1] = {
      Â Â Â Â name = "Unit Name",
      Â Â Â Â amount = amountnumber,
      Â Â Â Â macro = Macro Name
      Â Â },
      Â Â [2] = { ... }
      }
      ```
      '''
    notes: ""
  }
  GetPlayerEnvironmentObject: {
    description: Returns the player's enviroment object.
    parameters: []
    returnType: componentID
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetPlayerInventory: {
    description: Returns information about the wares held in the inventory of specified entity.
    parameters: []
    returnType: wareTable
    deprecated: false
    detailed:
      '''
      `wareTable`
      ```lua
      wareTable = {
      Â Â [ware1] = {
      Â Â Â Â name = ware name
      Â Â Â Â amount = ware amount
      Â Â Â Â price = ware price
      Â Â },
      Â Â [ware2] = { ... }
      }
      ```
      '''
    notes: ""
  }
  GetPlayerMoney: {
    description: Returns the amount of money in the player account.
    parameters: []
    returnType: money
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetPlayerPrimaryShipCockpitMacro: {
    description: Returns the macro of the cockpit currently installed in the player ship.
    parameters: []
    returnType: macro
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetPlayerPrimaryShipID: {
    description: Returns the player primary ship.
    parameters: []
    returnType: shipID
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetPlayerPrimaryShipMacro: {
    description: Returns the macro of the player primary ship.
    parameters: []
    returnType: macro
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetPlayerRoom: {
    description: Returns the current player room.
    parameters: []
    returnType: roomID
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetPlayerTarget: {
    description: Returns the current player target.
    parameters: []
    returnType: componentID
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetPossibleAdapters: {
    description: Returns information about all possible display adapters.
    parameters: []
    returnType: adapterTable
    deprecated: false
    detailed:
      '''
      `adapterTable`
      ```lua
      adapterTable = {
      Â Â [1] = {
      Â Â Â Â name = adapter name,
      Â Â Â Â ordinal = adapter ordinal
      Â Â }
      }
      ```
      '''
    notes: ""
  }
  GetPossibleProducts: {
    description: Returns information about all possible products of the specified productionmodule.
    parameters: [
      {
        name: productionmoduleID
        optional: false
        type: any
      }
    ]
    returnType: productionInfoTable
    deprecated: false
    detailed:
      '''
      `productionInfoTable`
      ```lua
      productionInfoTable = {
      Â Â [1] = {
      Â Â Â Â ware = product id,
      Â Â Â Â name = product name,
      Â Â Â Â cycletime = cycle duration,
      Â Â Â Â component = componentname
      Â Â Â Â resources = {
      Â Â Â Â Â Â [1] = {
      Â Â Â Â Â Â Â Â ware = resource id,
      Â Â Â Â Â Â Â Â name = resource name,
      Â Â Â Â Â Â Â Â cycle = cycle amount
      Â Â Â Â Â Â },
      Â Â Â Â Â Â [2] = { ... }
      Â Â Â Â }
      Â Â },
      Â Â [2] = { ... }
      }
      ```
      '''
    notes: ""
  }
  GetPossibleResolutions: {
    description: Returns information about all possible resolutions.
    parameters: []
    returnType: resolutionsTable
    deprecated: false
    detailed:
      '''
      `resolutionsTable`
      ```lua
      resolutionsTable = {
      Â Â [1] = {
      Â Â Â Â height = resolution height in px,
      Â Â Â Â width = resolution width in px
      Â Â },
      Â Â [2] = { ... }
      }
      ```
      '''
    notes: ""
  }
  GetPrioritizedPlatformNPCs: {
    description: Returns an array of entities on the specified dockingbay.
    parameters: [
      {
        name: dockingbayID
        optional: false
        type: any
      }
    ]
    returnType: entityIDArray
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetProductionModuleData: {
    description: Returns information about the specified productionmodule.
    parameters: [
      {
        name: productionmoduleID
        optional: false
        type: any
      }
    ]
    returnType: productionDataTable
    deprecated: false
    detailed:
      '''
      `productionDataTable`
      ```lua
      if production queue empty: productionDataTable = {
      Â Â state = "empty"
      }
      else: productionDataTable = {
      Â Â state = "ProductionState",
      Â Â cycletime = CycleTime (only if state == "producing", otherwise 0),
      Â Â cycleefficiency = cycle efficiency percentage (100% default),
      Â Â remainingcycletime = Time remaining for this cycle (only if state == "producing", otherwise 0),
      Â Â cycleprogress = percentage of current cycle progress (only if state = "producing", otherwise 0),
      Â Â remainingtime = time until out of resources (does not take limited storage space into account),
      Â Â products = {
      Â Â efficiency = product efficiency percentage (100% default),
      Â Â Â Â [1] = {Â 
      Â Â Â Â Â Â ware = "wareid",Â 
      Â Â Â Â Â Â name = "Ware Name",Â 
      Â Â Â Â Â Â amount = storageamount,Â 
      Â Â Â Â Â Â cycle = cycleamount,Â 
      Â Â Â Â Â Â component = componentnameÂ 
      Â Â Â Â },
      Â Â Â Â [2] = { ... }
      Â Â },
      Â Â presources = { ... }, Â Â Â -- primary resources, analogous to products table
      Â Â sresources = { ... }, Â Â Â -- secondary resources, analogous to products table
      Â Â estimated = is data filtered?
      }
      ```
      '''
    notes: ""
  }
  GetProductionModules: {
    description: Returns an array with all productionmodules in the specified destructible.
    parameters: [
      {
        name: destructible
        optional: false
        type: any
      }
    ]
    returnType: productionmoduleIDArray
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetRadarModuleName: {
    description: Returns the name of the macro with biggest radar range included in the specified object.
    parameters: [
      {
        name: objectID
        optional: false
        type: any
      }
    ]
    returnType: string
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetRadarOption: {
    description: Returns the current radar setting.
    parameters: []
    returnType: int
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetReferenceProfit: {
    description: Returns the profit selling the specified ware from the given container at the given price will provide.
    parameters: [
      {
        name: container
        optional: false
        type: any
      }
      {
        name: ware
        optional: false
        type: any
      }
      {
        name: price
        optional: false
        type: any
      }
      {
        name: amount
        optional: false
        type: any
      }
      {
        name: shoppinglistidx
        optional: true
        type: any
      }
    ]
    returnType: money
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetRegisteredModules: {
    description: Returns information about all registered modules.
    parameters: []
    returnType: moduleArray
    deprecated: false
    detailed:
      '''
      `moduleArray`
      ```lua
      moduleArray = {
      Â Â id = module id,
      Â Â name = module name,
      Â Â description = gamestart description, if any,
      Â Â image = gamestart image, if any
      }
      ```
      '''
    notes: ""
  }
  GetRelativeMousePosition: {
    description: Returns the x/y/z-mouse cursor coordinates relative to the the elements own coordinate space. The return value range isÂ \[0, 1\] if sizedMousePoint is not specified or false, andÂ \[0, maxExtends\] if sizedMousePoint is set to true. 0/0/0 corresponding to the upper left front edge of the element and maxExtends corresponding to boxWidth/boxHeight/boxDepth of the specified elemnt.
    parameters: [
      {
        name: element
        optional: false
        type: any
      }
      {
        name: sizedMousePoint
        optional: true
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: *Note that the return value is undefined if the element is not pickable at all or wasn't hit by the mouse cursor in the current frame.*
    notes: 4.31 Beta 1: added sizedMousePoint parameter
  }
  GetRepairResources: {
    description: Returns the resources needed to repair the specified repairdestructible by the given buildmodule to targethullfraction.
    parameters: [
      {
        name: containerID or buildmoduleID
        optional: false
        type: any
      }
      {
        name: repairdestructibleID
        optional: false
        type: any
      }
      {
        name: sequence
        optional: false
        type: any
      }
      {
        name: stage
        optional: false
        type: any
      }
      {
        name: buildlimit
        optional: false
        type: any
      }
      {
        name: targethullfraction
        optional: false
        type: any
      }
    ]
    returnType: resourceTable
    deprecated: false
    detailed:
      '''
      `resourceTable`
      ```lua
      resourceTable = {
      Â Â [1] = {
      Â Â Â Â ware = ware id,
      Â Â Â Â name = ware name,
      Â Â Â Â cycle = amount,
      Â Â Â Â price = price
      Â Â },
      Â Â [2] = { ... },
      Â Â ...,
      Â Â totalprice = totalprice
      }
      ```
      '''
    notes: ""
  }
  GetResolutionOption: {
    description: Returns the current resolution*Â *or the resolution set in config.xml.
    parameters: [
      {
        name: checkconfig
        optional: true
        type: any
      }
    ]
    returnType: resolutionTable
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetRumbleOption: {
    description: Returns the current controller rumble intensity setting.
    parameters: []
    returnType: number
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetSalesRepProduction: {
    description: Returns the productionmodule in the same build slot as the specified entity.
    parameters: [
      {
        name: entityID
        optional: false
        type: any
      }
    ]
    returnType: productionmoduleID
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetSaveList: {
    description: Returns information about existing savegames.
    parameters: []
    returnType: savegameTable
    deprecated: false
    detailed:
      '''
      `savegameTable`
      ```lua
      savegameTable = {
      Â Â filename = save filename,
      Â Â name = savegame name,
      Â Â version = savegame version,
      Â Â time = formatted save date,
      Â Â rawtime = save date,
      Â Â playtime = played time,
      Â Â playername = player name,
      Â Â location = save location,
      Â Â money = player money,
      Â Â difficulty = save difficulty,
      Â Â mindifficulty = minimum difficulty the save was ever set to,
      Â error = there was an error loading the savegame (non-localized error message in name property)
      Â Â [invalidgameid = the save is from an invalid game],
      Â Â [invalidversion = save version is higher than current game version],
      Â Â invalidpatches = {
      Â Â Â Â [1] = {
      Â Â Â Â Â Â id = patch id,
      Â Â Â Â Â Â name = patch name,
      Â Â Â Â Â Â state = patch state,
      Â Â Â Â Â Â requiredversion = version of this patch required by the savegame,
      Â Â Â Â Â Â installedversion = version of this patch that is installed
      Â Â Â Â },
      Â Â Â Â [2] = { ... }
      Â Â }
      }
      ```
      '''
    notes: Performance critical, do not call unnecessarily.
  }
  GetSaveList2: {
    description: Returns available information about existing savegames.
    parameters: []
    returnType: savegameTable
    deprecated: false
    detailed:
      '''
      *Note to trigger population of the list GetSaveList2() returns, call the FFI function ReloadSaveList() first (or make sure it was called before at some point).
      While this function returns the same data as GetSaveList(), it does only return the data which is available right now without blocking the game to wait for all savegame details having been processed. This allows for a more performant non-blocking approach than would be possible with GetSaveList().*
      '''
    notes: ""
  }
  GetSectors: {
    description: Returns an array of sectors in the specified cluster.
    parameters: [
      {
        name: clusterID
        optional: false
        type: any
      }
    ]
    returnType: sectorIDArray
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetSensitivitySetting: {
    description: Returns the current sensitivity setting for the specified input range.
    parameters: [
      {
        name: rangeid
        optional: false
        type: any
      }
    ]
    returnType: number
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetShaderQualityOption: {
    description: Returns the current shader quality setting.
    parameters: []
    returnType: int
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetShadowOption: {
    description: Returns the current shadow setting.
    parameters: []
    returnType: int
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetShoppingList: {
    description: Returns information about the trade queue of the specified container.
    parameters: [
      {
        name: containerID
        optional: false
        type: any
      }
    ]
    returnType: shoppingListTable
    deprecated: false
    detailed:
      '''
      `shoppingListTable`
      ```lua
      shoppingListTable = {
      Â Â [1] = {
      Â Â Â Â id = trade id,
      Â Â Â Â name = ware name,
      Â Â Â Â amount = trade amount,
      Â Â Â Â minamount = trade minimum amount,
      Â Â Â Â price = trade price,
      Â Â Â Â isbuyoffer = is the container selling?,
      Â Â Â Â isselloffer = is the container buying?,
      Â Â Â Â averageprice = trade ware avg. price,
      Â Â Â Â [station = trade partner,
      Â Â Â Â stationname = trade partner's name,
      Â Â Â Â stationzone = trade partner's zone name,
      Â Â Â Â stationsectorid = trade partner's sector,]
      Â Â Â Â iswareexchange = is it a ware exchange trade?,
      Â Â Â Â ispassive = is container passive?
      Â Â },
      Â Â [2] = { ... }
      }
      ```
      '''
    notes: ""
  }
  GetSoftShadowsOption: {
    description: Returns the current soft shadow setting.
    parameters: []
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetSoundOption: {
    description: Returns the current global sound setting.
    parameters: []
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetSSAOOption: {
    description: Returns the current ssao setting.
    parameters: []
    returnType: int
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetStandardUnitMacros: {
    description: Returns an array of unit macros that are considered standard for the specified macro.
    parameters: [
      {
        name: macro
        optional: false
        type: any
      }
    ]
    returnType: macroArray
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetStatData: {
    description: Returns properties of the specified statistic. Possible properties are: "exists", "value", "hidden", "displayname", "displayvalue"
    parameters: [
      {
        name: stat
        optional: false
        type: any
      }
      {
        name: ...
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetSteeringNoteOption: {
    description: Returns the current steering note setting.
    parameters: []
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetStopShipInMenuOption: {
    description: Returns the current setting whether the playership should stop while a menu is open.
    parameters: []
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetStorageData: {
    description: Returns information about the storage capabilities in the specified destructible.
    parameters: [
      {
        name: destructibleID
        optional: false
        type: any
      }
    ]
    returnType: storageDataTable
    deprecated: false
    detailed:
      '''
      `storageDataTable`
      ```lua
      storageDataTable = {
      Â Â modules = {
      Â Â Â Â [1] = storagemodule,
      Â Â Â Â [2] = ...
      Â Â }
      Â Â capacity = totalcapacityamount,
      Â Â stored = totalstoredamount,
      Â Â estimated = is data filtered?,
      Â Â [1] = {
      Â Â Â Â name = "cargobayname",
      Â Â Â Â capacity = capacityamount,
      Â Â Â Â stored = storedamount,
      Â Â Â Â consumption = totalconsumption,
      Â Â Â Â [1] = {
      Â Â Â Â Â Â ware = "wareid",
      Â Â Â Â Â Â name = "Ware Name",
      Â Â Â Â Â Â amount = amountnumber,
      Â Â Â Â Â Â volume = ware volume,
      Â Â Â Â Â Â consumption = consumption and production of this ware,
      Â Â Â Â },
      Â Â Â Â [2] = ...
      Â Â },
      Â Â [2] = ...
      }
      ```
      '''
    notes: ""
  }
  GetSubordinates: {
    description: Returns an array with all subordinates of the specified controllable, optionally filtered by the commandertype.
    parameters: [
      {
        name: controllableID
        optional: false
        type: any
      }
      {
        name: commandertype
        optional: true
        type: any
      }
    ]
    returnType: componentIDArray
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetSubtitleOption: {
    description: Returns the current subtitle option.
    parameters: []
    returnType: string
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetTextHeightExact: {
    description: Returns the height in pixels of the specified text.
    parameters: [
      {
        name: text
        optional: false
        type: any
      }
      {
        name: font
        optional: false
        type: any
      }
      {
        name: fontsize
        optional: false
        type: any
      }
      {
        name: width
        optional: false
        type: any
      }
      {
        name: wordwrap
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: true
    detailed: Note that the width parameter specifies the maximum width (per row) to be displayed. The parameter is ignored, if wordwrap is false.*
    notes: **DEPRECATED** - use FFI function GetTextHeight() instead
  }
  GetTextNumLines: {
    description: Returns the number of lines of the specified textÂ with the given font and width and the actual width of the wordwrapped text.
    parameters: [
      {
        name: text
        optional: false
        type: any
      }
      {
        name: font
        optional: false
        type: any
      }
      {
        name: fontsize
        optional: false
        type: any
      }
      {
        name: width
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: 4.00 Beta 1: added the second return value (actualwidth)
  }
  GetTextWidth: {
    description: Returns the width in pixels of the specified text.
    parameters: [
      {
        name: text
        optional: false
        type: any
      }
      {
        name: fontname
        optional: false
        type: any
      }
      {
        name: fontsize
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: true
    detailed: ""
    notes: **DEPRECATED** - use FFI function GetTextWidth() instead
  }
  GetTotalValue: {
    description: Returns the value of the specified container, optionally for selling and in reference to the price list of the reference container.
    parameters: [
      {
        name: containerID
        optional: false
        type: any
      }
      {
        name: sellprice
        optional: true
        type: any
      }
      {
        name: referenceContainerID
        optional: true
        type: any
      }
    ]
    returnType: money
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetTradeData: {
    description: Returns information about the specified trade.
    parameters: [
      {
        name: trade
        optional: false
        type: any
      }
    ]
    returnType: tradeData
    deprecated: false
    detailed:
      '''
      `tradeDataTable`
      ```lua
      tradeData = {
      Â Â id = trade id,
      Â Â ware = trade ware,
      Â Â name = ware name,
      Â Â amount = trade amount,
      Â Â desiredamount = trade desired amount,
      Â Â minamount = trade min amount,
      Â Â price = trade price,
      Â Â marketprice = price without discounts/commissions,
      Â Â quantityfactor = market price / average price,
      Â Â total price = price * amount,
      Â Â totalmarketprice = market price * amount,
      Â Â isbuyoffer = is it a buy offer?,
      Â Â isselloffer = is it a sell offer?,
      Â Â rebundle = rebundle units?,
      Â Â unbundle = unbundle units?
      Â Â [station = trade container,
      Â Â stationname = trade container name,
      Â Â stationzone = trade container zone name,
      Â Â stationzoneid = trade container zone,
      Â Â stationsectorid = trade container sector,
      Â Â isplayer = is trade container player owned,
      Â Â pricemodifiers = {
      Â Â Â Â [1] = {
      Â Â Â Â Â Â name = modifier name,
      Â Â Â Â Â Â level = modifier level,
      Â Â Â Â Â Â amount = modifier amount,
      Â Â Â Â Â Â expire = modifier expire time
      Â Â Â Â },
      Â Â Â Â [2] = { ... }
      Â Â },
      Â Â faction = trade container faction,]
      Â Â expire = trade expire time
      }
      ```
      '''
    notes: ""
  }
  GetTradeList: {
    description: Returns an array of player known trades, optionally indexed by id strings.
    parameters: [
      {
        name: tradeship
        optional: true
        type: any
      }
      {
        name: sortby
        optional: true
        type: any
      }
      {
        name: indexbyid
        optional: true
        type: any
      }
    ]
    returnType: tradeDataArray
    deprecated: false
    detailed:
      '''
      `tradeDataArray`
      ```lua
      tradeDataArray = {
      Â Â [1 or IDString] = {
      Â Â Â Â id = trade id,
      Â Â Â Â ware = trade ware,
      Â Â Â Â name = ware name,
      Â Â Â Â amount = trade amount,
      Â Â Â Â desiredamount = trade desired amount,
      Â Â Â Â minamount = trade min amount,
      Â Â Â Â price = trade price,
      Â Â Â Â marketprice = price without discounts/commissions,
      Â Â Â Â quantityfactor = market price / average price,
      Â Â Â Â total price = price * amount,
      Â Â Â Â totalmarketprice = market price * amount,
      Â Â Â Â isbuyoffer = is it a buy offer?,
      Â Â Â Â isselloffer = is it a sell offer?,
      Â Â Â Â rebundle = rebundle units?,
      Â Â Â Â unbundle = unbundle units?
      Â Â Â Â [station = trade container,
      Â Â Â Â stationname = trade container name,
      Â Â Â Â stationzone = trade container zone name,
      Â Â Â Â stationzoneid = trade container zone,
      Â Â Â Â stationsectorid = trade container sector,
      Â Â Â Â isplayer = is trade container player owned,
      Â Â Â Â pricemodifiers = {
      Â Â Â Â Â Â [1] = {
      Â Â Â Â Â Â Â Â name = modifier name,
      Â Â Â Â Â Â Â Â level = modifier level,
      Â Â Â Â Â Â Â Â amount = modifier amount,
      Â Â Â Â Â Â Â Â expire = modifier expire time
      Â Â Â Â Â Â },
      Â Â Â Â Â Â [2] = { ... }
      Â Â Â Â },
      Â Â Â Â faction = trade container faction,]
      Â Â Â Â expire = trade expire time
      Â Â },
      Â Â [2 or IDString] = { ... }
      }
      ```
      '''
    notes: Added "indexbyid" parameter in 4.00 Beta 4
  }
  GetTradeRestrictions: {
    description: Returns information about trade restictions for the specified container.*
    parameters: [
      {
        name: containerID
        optional: false
        type: any
      }
    ]
    returnType: restrictionsTable
    deprecated: false
    detailed:
      '''
      `restrictionsTable`
      ```lua
      restrictionsTable = {
      Â Â faction = global restriction to trade with other factions,
      Â Â overrrides = {
      Â Â Â Â [ware] = bool,
      Â Â Â Â ...
      Â Â }
      }
      ```
      '''
    notes: ""
  }
  GetTradesAtConnection: {
    description: Returns an array of trades at the specified connection.
    parameters: [
      {
        name: componentID
        optional: false
        type: any
      }
      {
        name: templateConnectionName
        optional: false
        type: any
      }
    ]
    returnType: tradeArray
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetTradeShipData: {
    description: Returns information about the specified ship related to trading.
    parameters: [
      {
        name: shipID
        optional: false
        type: any
      }
    ]
    returnType: tradeShipData
    deprecated: false
    detailed:
      '''
      `tradeShipData`
      ```lua
      tradeShipData = {
      Â Â shipid = shipID,
      Â Â name = ship name,
      Â Â cargo = {
      Â Â Â Â ware = ware,
      Â Â Â Â name = ware name,
      Â Â Â Â amount = ware amount,
      Â Â Â Â volume = ware volume
      Â Â },
      Â Â queue = {
      Â Â Â Â [1] = {
      Â Â Â Â Â Â id = trade id,
      Â Â Â Â Â Â name = ware name,
      Â Â Â Â Â Â amount = trade amount,
      Â Â Â Â Â Â minamount = trade min amount,
      Â Â Â Â Â Â price = trade price,
      Â Â Â Â Â Â isbuyoffer = is the ship selling?,
      Â Â Â Â Â Â isselloffer = is the ship buying?,
      Â Â Â Â Â Â averageprice = trade ware avg. price,
      Â Â Â Â Â Â [stationname = trade partner name,
      Â Â Â Â Â Â stationsectorid = trade partner sector]
      Â Â Â Â },
      Â Â Â Â [2]= { ... }
      Â Â },
      Â Â cargocurrent = currently used cargo space,
      Â Â cargomax = cargo capacity,
      Â Â cargofree = free cargo capacity,
      Â Â numtrips = number of planned trips
      }
      ```
      '''
    notes: ""
  }
  GetTradeShipList: {
    description: Returns an array with information about ships related to trading.
    parameters: []
    returnType: tradeShipDataArray
    deprecated: false
    detailed:
      '''
      `tradeShipDataArray`
      ```lua
      tradeShipDataArray = {
      Â [1] = {
      Â Â Â Â shipid = shipID,
      Â Â Â Â name = ship name,
      Â Â Â Â cargo = {
      Â Â Â Â Â Â ware = ware,
      Â Â Â Â Â Â name = ware name,
      Â Â Â Â Â Â amount = ware amount,
      Â Â Â Â Â Â volume = ware volume
      Â Â Â Â },
      Â Â Â Â queue = {
      Â Â Â Â Â Â [1] = {
      Â Â Â Â Â Â Â Â id = trade id,
      Â Â Â Â Â Â Â Â name = ware name,
      Â Â Â Â Â Â Â Â amount = trade amount,
      Â Â Â Â Â Â Â Â minamount = trade min amount,
      Â Â Â Â Â Â Â Â price = trade price,
      Â Â Â Â Â Â Â Â isbuyoffer = is the ship selling?,
      Â Â Â Â Â Â Â Â isselloffer = is the ship buying?,
      Â Â Â Â Â Â Â Â averageprice = trade ware avg. price,
      Â Â Â Â Â Â Â Â [stationname = trade partner name,
      Â Â Â Â Â Â Â Â stationsectorid = trade partner sector]
      Â Â Â Â Â Â },
      Â Â Â Â Â Â [2]= { ... }
      Â Â Â Â },
      Â Â Â Â cargocurrent = currently used cargo space,
      Â Â Â Â cargomax = cargo capacity,
      Â Â Â Â cargofree = free cargo capacity,
      Â Â Â Â numtrips = number of planned trips
      Â Â },
      Â Â [2] = { ... }
      }
      ```
      '''
    notes: ""
  }
  GetTransportUnitMacros: {
    description: Returns an array*Â of unit macros suitable for transport of cargo for the specified macro.
    parameters: [
      {
        name: macro
        optional: false
        type: any
      }
    ]
    returnType: macroArray
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetUIElementRectangleScreenPosition: {
    description: Retrieves the positioning information for the given target element in rectangle mode (only applicable in non-worldspace mode).
    parameters: [
      {
        name: posID
        optional: false
        type: any
      }
      {
        name: minRecSize
        optional: false
        type: any
      }
      {
        name: maxRecSize
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed:
      '''
      *width and height indicate the size of the rectangle and is ensured to always be a multiply of* 2.
      *For the other return values, refer to GetUIElementScreenPosition().*
      '''
    notes: ""
  }
  GetUIElementScreenPosition: {
    description: Retrieves the positioning information for the given target element (only applicable in non-worldspace mode).
    parameters: [
      {
        name: posID
        optional: false
        type: any
      }
      {
        name: iconSizeOnScreen
        optional: false
        type: any
      }
      {
        name: iconSizeOffScreen
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed:
      '''
      *x2d and y2d are ranging from -viewWidth/2 (or -viewHeight/2) to +viewWidht/2 (or +viewHeight/2) with 0/0 being the center of the screen and -viewWidth/2|-viewHeight/2 being the lower left corner of the screen.
      z is the position between the clipping planes ranging form 0 to 1.
      onscreen indicates whether the elemnt is actually on- or off-screen.*
      '''
    notes: ""
  }
  GetUIRelation: {
    description: Returns the relation of the player to the specified faction.
    parameters: [
      {
        name: faction
        optional: false
        type: any
      }
    ]
    returnType: relation
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetUnitStorageData: {
    description: Returns information about the units stored on the specified defensible. Optionally filtered by unit category.
    parameters: [
      {
        name: defensibleID
        optional: false
        type: any
      }
      {
        name: unitcategory
        optional: true
        type: any
      }
      {
        name: virtualammo
        optional: true
        type: any
      }
      {
        name: excluderestricted
        optional: true
        type: any
      }
    ]
    returnType: unitTable
    deprecated: false
    detailed:
      '''
      `unitTable`
      ```lua
      unitTable Â = {
      Â Â capacity = capacityamount,
      Â Â stored = storedamount,
      Â Â [categorystored = storedamount of this category]
      Â Â [1] = {
      Â Â Â Â macro = "macroname",
      Â Â Â Â name = "Unit Name",
      Â Â Â Â amount = amountnumber,
      Â Â Â Â unavailable = unavailablenumber,
      Â Â },
      Â Â [2] = { ... }
      }
      ```
      '''
    notes:
      '''
      If you want to use the virtualammo flag, call **SetVirtualCargoMode**Â first.

      4.00 Beta 6: added excluderestricted parameter
      '''
  }
  GetUpgradesResources: {
    description: Returns the needed resources to build the specified upgrades with this container or buildmodule.
    parameters: [
      {
        name: containerID or buildmoduleID
        optional: false
        type: any
      }
      {
        name: upgradeDestructibleID
        optional: false
        type: any
      }
      {
        name: sequence
        optional: false
        type: any
      }
      {
        name: stage
        optional: false
        type: any
      }
      {
        name: buildlimit
        optional: false
        type: any
      }
      {
        name: upgradePlanArray
        optional: false
        type: any
      }
    ]
    returnType: resourceTable
    deprecated: false
    detailed:
      '''
      `resourceTable`
      ```lua
      resourceTable = {
      Â Â [1] = {
      Â Â Â Â ware = ware id,
      Â Â Â Â name = ware name,
      Â Â Â Â cycle = amount,
      Â Â Â Â price = price
      Â Â },
      Â Â [2] = { ... },
      Â Â ...,
      Â Â totalprice = totalprice
      }
      ```
      `upgradePlanArray`
      ```lua
      upgradePlanArray = {
      Â Â [1] = {
      Â Â Â Â [1] = upgradetype,
      Â Â Â Â [2] = level
      Â Â },
      Â Â [2] = { ... }
      }
      ```
      '''
    notes: ""
  }
  GetVersionString: {
    description: Returns the current game version.
    parameters: []
    returnType: string
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetViewDistanceOption: {
    description: Returns the current view distance setting.
    parameters: []
    returnType: number
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetVolumeOption: {
    description: Returns the current volume setting of the specified type.
    parameters: [
      {
        name: volumetype
        optional: false
        type: any
      }
    ]
    returnType: number
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetVSyncOption: {
    description: Returns the current vsync setting.
    parameters: []
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetWareCapacity: {
    description: Returns the capacity of the specified container for the given ware. By default existing cargo is ignored.
    parameters: [
      {
        name: containerID
        optional: false
        type: any
      }
      {
        name: ware
        optional: false
        type: any
      }
      {
        name: ignoreexisting = true
        optional: true
        type: any
      }
    ]
    returnType: int
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetWareData: {
    description: Returns properties of the specified component. Possible properties are:*Â "name", "shortname", "description", "icon", "avgprice", "minprice", "maxprice", "pricerange", "tags", "illegal", "inventory", "component",
    parameters: [
      {
        name: ware
        optional: false
        type: any
      }
      {
        name: ...
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: '''"transport", "image", "video", "hasproductionmethod", "productionmethod", "products", "resources", "buyprice", "volatile", "gift", "allowdrop", "groupID", "groupName", "groupIcon", "isweaponmod", "isammo", "issinglecraft"'''
    notes:
      '''
      "allowdrop" property added in 4.00 Beta 1
      "groupID" property added in 4.00 Beta 1
      "groupName" property added in 4.00 Beta 1
      "groupIcon" property added in 4.00 Beta 1
      "isweaponmod" property added in 4.00 Beta 4
      "isammo" property added in 4.00 Beta 4
      "issinglecraft" property added in 4.00 Beta 5
      '''
  }
  GetWareExchangeTradeList: {
    description: Returns information about possible ware exchange trade between the two trade partners.*
    parameters: [
      {
        name: tradingshipID
        optional: false
        type: any
      }
      {
        name: tradedcontainerID
        optional: false
        type: any
      }
      {
        name: sortby
        optional: true
        type: any
      }
    ]
    returnType: tradeDataArray
    deprecated: false
    detailed:
      '''
      `tradeDataArray`
      ```lua
      tradeDataArray = {
      Â Â [1] = {
      Â Â Â Â id = trade id,
      Â Â Â Â ware = trade ware,
      Â Â Â Â name = ware name,
      Â Â Â Â amount = trade amount,
      Â Â Â Â desiredamount = trade desired amount,
      Â Â Â Â minamount = trade min amount,
      Â Â Â Â price = trade price,
      Â Â Â Â marketprice = price without discounts/commissions,
      Â Â Â Â quantityfactor = market price / average price,
      Â Â Â Â total price = price * amount,
      Â Â Â Â totalmarketprice = market price * amount,
      Â Â Â Â isbuyoffer = is it a buy offer?,
      Â Â Â Â isselloffer = is it a sell offer?,
      Â Â Â Â rebundle = rebundle units?,
      Â Â Â Â unbundle = unbundle units?
      Â Â Â Â [station = trade container,
      Â Â Â Â stationname = trade container name,
      Â Â Â Â stationzone = trade container zone name,
      Â Â Â Â stationzoneid = trade container zone,
      Â Â Â Â stationsectorid = trade container sector,
      Â Â Â Â isplayer = is trade container player owned,
      Â Â Â Â pricemodifiers = {
      Â Â Â Â Â Â [1] = {
      Â Â Â Â Â Â Â Â name = modifier name,
      Â Â Â Â Â Â Â Â level = modifier level,
      Â Â Â Â Â Â Â Â amount = modifier amount,
      Â Â Â Â Â Â Â Â expire = modifier expire time
      Â Â Â Â Â Â },
      Â Â Â Â Â Â [2] = { ... }
      Â Â Â Â },
      Â Â Â Â faction = trade container faction,]
      Â Â Â Â expire = trade expire time
      Â Â },
      Â Â [2] = { ... }
      }
      ```
      '''
    notes: Call **SetVirtualCargoMode**Â onÂ tradingshipid andÂ tradedcontaineridÂ first, otherwise result will be empty.
  }
  GetWareProductionLimit: {
    description: Returns the production limit for the specified ware on the given container.
    parameters: [
      {
        name: containerID
        optional: false
        type: any
      }
      {
        name: ware
        optional: false
        type: any
      }
    ]
    returnType: int
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetZones: {
    description: Returns an array of zones contained in the specified sector.
    parameters: [
      {
        name: sectorID
        optional: false
        type: any
      }
    ]
    returnType: zoneIDArray
    deprecated: false
    detailed: ""
    notes: ""
  }
  GetZoneYield: {
    description: Returns information about yields in the specified zone.
    parameters: [
      {
        name: zoneID
        optional: false
        type: any
      }
      {
        name: skipmaxyields
        optional: true
        type: any
      }
    ]
    returnType: yieldTable
    deprecated: false
    detailed:
      '''
      `yieldTable`
      ```lua
      yieldTable = {
      Â Â [1] = {
      Â Â Â Â ware = ware,
      Â Â Â Â name = ware name,
      Â Â Â Â amount = current yield,
      Â Â Â Â max = max yield
      Â Â },
      Â Â [2] = { ... },
      Â Â ...,
      Â Â snapshottime = time when data was taken, 0 if live.
      }
      ```
      '''
    notes: Performance critical, set skipmaxyields = true, if possible.
  }
  HasAllResourcesToCraft: {
    description: Checks whether the specified entity has all ingredients to craft the specified ware.
    parameters: [
      {
        name: entityID
        optional: false
        type: any
      }
      {
        name: ware
        optional: false
        type: any
      }
    ]
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  HasContainerStockLimitOverride: {
    description: Returns whether the ship/station has an override for the stock limit of a particular ware defined.
    parameters: [
      {
        name: containerID
        optional: false
        type: any
      }
      {
        name: ware
        optional: false
        type: any
      }
    ]
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  HasContainerWarePriceOverride: {
    description: Checks whether the specified ware has a price override on the given container.
    parameters: [
      {
        name: containerID or buildmoduleID
        optional: false
        type: any
      }
      {
        name: ware
        optional: false
        type: any
      }
      {
        name: buysellswitch
        optional: false
        type: any
      }
    ]
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  HasLicence: {
    description: Checks whether the specified faction holds the given licence of the licence faction.
    parameters: [
      {
        name: faction
        optional: false
        type: any
      }
      {
        name: licencetype
        optional: false
        type: any
      }
      {
        name: licencefaction
        optional: false
        type: any
      }
    ]
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  HasShipyard: {
    description: Checks whether the specified space includes a shipyard.
    parameters: [
      {
        name: spaceID
        optional: false
        type: any
      }
    ]
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  HasTag: {
    description: Checks whether the specified connection has the given tag.
    parameters: [
      {
        name: componentID
        optional: false
        type: any
      }
      {
        name: templateConnectionName
        optional: false
        type: any
      }
      {
        name: tagname
        optional: false
        type: any
      }
    ]
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  HasToRestoreOptionsMenu: {
    description: Returns static variable to re-init the options menu after ui reload, e.g. on device lost.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: **DEPRECATED** -Â This solution for static variables is deprecated. Use <savedvariable /> in ui.xml instead.
  }
  HaveExtensionSettingsChanged: {
    description: Checks whether extension settings changed in this session.
    parameters: []
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  IncStatValue: {
    description: Increases the specified statistic by the given value.
    parameters: [
      {
        name: stat
        optional: false
        type: any
      }
      {
        name: addvalue
        optional: true
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  InstallSteamDLC: {
    description: Installs the specified steam dlc.
    parameters: [
      {
        name: appid
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  InterruptPlayerComputer: {
    description: Stops the current player ship computer line.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  IsCheatVersion: {
    description: Checks whether the game has cheats enabled.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  IsComponentClass: {
    description: Checks whether the specified component is of the given class.
    parameters: [
      {
        name: componentID
        optional: false
        type: any
      }
      {
        name: classname
        optional: false
        type: any
      }
    ]
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  IsComponentConstruction: {
    description: Checks whether the specified component is under construction.
    parameters: [
      {
        name: componentiD
        optional: false
        type: any
      }
    ]
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  IsComponentOperational: {
    description: Checks whether the specified component is operational.
    parameters: [
      {
        name: componentID
        optional: false
        type: any
      }
    ]
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  IsContainerOperationalRangeSufficient: {
    description: Checks whether the given operational range of the specified containerÂ is sufficient to operate normally.
    parameters: [
      {
        name: containerID
        optional: false
        type: any
      }
      {
        name: spaceID
        optional: false
        type: any
      }
    ]
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  IsDockingPossible: {
    description: Checks whether the specified ship is allowed to dock at the given dockingbay.
    parameters: [
      {
        name: shipID
        optional: false
        type: any
      }
      {
        name: dockingbayID
        optional: false
        type: any
      }
    ]
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  IsFactionKnown: {
    description: Checks whether the specified faction is known to the player.
    parameters: [
      {
        name: faction
        optional: false
        type: any
      }
    ]
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  IsGamepadActive: {
    description: Check whether the gamepad is active.
    parameters: []
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  IsInfoUnlockedForPlayer: {
    description: Check whether the specified information of the given component is available to the player.
    parameters: [
      {
        name: componentID
        optional: false
        type: any
      }
      {
        name: info
        optional: false
        type: any
      }
    ]
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  IsKnownItem: {
    description: Checks whether the specified item is known in the given library.
    parameters: [
      {
        name: library
        optional: false
        type: any
      }
      {
        name: itemid
        optional: false
        type: any
      }
    ]
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  IsMacroClass: {
    description: Checks whether the specified macro is of the given class.
    parameters: [
      {
        name: macro
        optional: false
        type: any
      }
      {
        name: classname
        optional: false
        type: any
      }
    ]
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  IsObstructed: {
    description: Checks whether the specified target element (identified via the posID) is obstructed against the player view.
    parameters: [
      {
        name: posID
        optional: false
        type: any
      }
      {
        name: canBeObstructedByOwnComponent
        optional: false
        type: any
      }
      {
        name: ignoreCockpitObstruction
        optional: true
        type: any
      }
    ]
    returnType: bool
    deprecated: false
    detailed:
      '''
      If canBeObstructedByOwnComponent is set to true, then the target element can also be obstructed by elements on its own geometry (for example a target element on a capital ship would be obstructed by parts on the capital ship itself).
      If ignoreCockpitObstruction is set to true, then the player cockpit geometry will not cause the target element to be determined as being obstructed.* (defaults to true - which equals the behavior pre 4.20 Hotfix 1).
      '''
    notes: '''"ignoreCockpitObstruction" argument was added in 4.21 Beta 1 (VR:4.20 Hotfix 1)'''
  }
  IsPlayerFirstPerson: {
    description: Checks whether the player is in first person mode.
    parameters: []
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  IsSameComponent: {
    description: Helper function to compare two luaIDs or 64-bit integer representing components.
    parameters: [
      {
        name: component1ID
        optional: false
        type: any
      }
      {
        name: component2ID
        optional: false
        type: any
      }
    ]
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  IsSameTrade: {
    description: Helper function to compare two luaIDs representing trades.
    parameters: [
      {
        name: trade1ID
        optional: false
        type: any
      }
      {
        name: trade2ID
        optional: false
        type: any
      }
    ]
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  IsSavingPossible: {
    description: Checks whether saving is currently possible.
    parameters: []
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  IsSteamworksEnabled: {
    description: Checks whether steamworks are enabled.
    parameters: []
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  IsValidComponent: {
    description: Checks whether the specified component has a valid context.
    parameters: [
      {
        name: componentID
        optional: false
        type: any
      }
    ]
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  IsWareIllegalTo: {
    description: Check whether the specified ware is illegal for the given licencefaction. Optionally checks against a specified police faction.
    parameters: [
      {
        name: ware
        optional: false
        type: any
      }
      {
        name: licencefaction
        optional: false
        type: any
      }
      {
        name: policefaction
        optional: true
        type: any
      }
    ]
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  LeaveInteractMenu: {
    description: Ends the interact menu interaction.
    parameters: []
    returnType: unknown
    deprecated: true
    detailed: ""
    notes: **DEPRECATED** - use FFI function LeaveInteractMenu() instead
  }
  ListenForInput: {
    description: Raises a lua event for the next input instead of evaluating that input. Event names are: "keyboardInput", "mousebuttonsInput", "joyaxesInputPosSgn\[1-8\]", "joyaxesInputNegSgn\[1-8\]", "joybuttonsInput\[1-8\]"
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  LoadGame: {
    description: Loads the specified savegame.
    parameters: [
      {
        name: filename
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  LoadInputProfile: {
    description: Load the specified input profile.
    parameters: [
      {
        name: filename
        optional: false
        type: any
      }
      {
        name: personal
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  MakeRepairPriority: {
    description: Move the specified*Â *component to the top of the repair queue of the entity.
    parameters: [
      {
        name: entityID
        optional: false
        type: any
      }
      {
        name: componentID
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  MovePlayerToZone: {
    description: Teleport the player to the specified zone.
    parameters: [
      {
        name: zoneID
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: Needs cheats enabled.
  }
  NewGame: {
    description: Start a new game with the specified module and difficulty.
    parameters: [
      {
        name: modulename
        optional: false
        type: any
      }
      {
        name: difficulty
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  OpenSteamOverlayStorePage: {
    description: Opens the steam store page in the steam overlay.
    parameters: [
      {
        name: appid
        optional: true
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  OpenSteamOverlayWebPage: {
    description: Opens an url in the steam overlay.
    parameters: [
      {
        name: url
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  OpenWorkshop: {
    description: Open the specified extension in the workshop overlay.
    parameters: [
      {
        name: id
        optional: false
        type: any
      }
      {
        name: personal
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  Pause: {
    description: Pause the game.*Â If the explicit flag is set to true, this will pause the game as if the pause key was hit.
    parameters: [
      {
        name: explicit
        optional: true
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: Note: prior to 4.21 Beta 1 (VR: 4.20) a call to Pause() (or Pause(false) didn't display a Game Paused text. As of 4.21 Beta 1 (VR: 4.20) both cases will display this text now.
  }
  PlayCredits: {
    description: Play the credits.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  PlayerPrimaryShipHasContents: {
    description: Checks whether the specified key is part of the player ship. Possible keys are: "trademk1", "trademk2", "trademk3"
    parameters: [
      {
        name: key
        optional: false
        type: any
      }
    ]
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  PrepareRenderTarget: {
    description: (Optionally) Prepares the specified texture to be used as a rendertarget.
    parameters: [
      {
        name: texturename
        optional: false
        type: any
      }
    ]
    returnType: success
    deprecated: false
    detailed: *Retur*n value indicates success/failure.
    notes: **UNSUPPORTED.**Â Not designed to be used by mods.
  }
  ProceedFromMenu: {
    description: Proceeds from a conversation menu to the specified conversation section in MD. Optionally passing parameters.
    parameters: [
      {
        name: convsection
        optional: false
        type: any
      }
      {
        name: choiceparam
        optional: true
        type: any
      }
      {
        name: baseparam
        optional: true
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  QuickMenuOpened: {
    description: Notifies* *the system that the quick menu was closed.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  QuitGame: {
    description: Quit to desktop.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  QuitModule: {
    description: Quit the current module to the start menu.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  ReadText: {
    description: Returns text if it exists, error message otherwise.
    parameters: [
      {
        name: page
        optional: false
        type: any
      }
      {
        name: line
        optional: false
        type: any
      }
    ]
    returnType: text
    deprecated: false
    detailed: ""
    notes: ""
  }
  RegisterAddonBindings: {
    description: Registers addon key bindings using the <bindinggroup*Â /> nodes in ui.xml.Â *If no groupid is specified all groups will be registered.
    parameters: [
      {
        name: addonname
        optional: false
        type: any
      }
      {
        name: groupid = ""
        optional: true
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: **UNSUPPORTED.**Â Not designed to be used by mods.
  }
  RegisterMouseInteractions: {
    description: Registers the specified elemnent (and all its children) to enable mouse/pointer picking interactions.
    parameters: [
      {
        name: element
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  ReleaseInteractionDescriptor: {
    description: Releases the descriptor which was returned by CreateInteractionDescriptor().
    parameters: [
      {
        name: descriptor
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: **DEPRECATED** - use FFI: ReleaseInteractionDescriptor() instead
  }
  RemoveAmmo: {
    description: Removes the specified amount of the ammo from the object.
    parameters: [
      {
        name: defensibleID
        optional: false
        type: any
      }
      {
        name: ammoMacro
        optional: false
        type: any
      }
      {
        name: amount
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  RemoveCargo: {
    description: Removes the specified amount of the ware from the object.
    parameters: [
      {
        name: containerID
        optional: false
        type: any
      }
      {
        name: ware
        optional: false
        type: any
      }
      {
        name: amount
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  RemoveInventory: {
    description: Removes the specified amount of the ware from the inventory of the entity.
    parameters: [
      {
        name: entityID
        optional: false
        type: any
      }
      {
        name: ware
        optional: false
        type: any
      }
      {
        name: amount
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  RemoveLogbookEntry: {
    description: Removes the logbook entry at index.
    parameters: [
      {
        name: index
        optional: false
        type: any
      }
      {
        name: category
        optional: true
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  RemovePlayerDrone: {
    description: Removes specified macro from the playership.
    parameters: [
      {
        name: macroname
        optional: false
        type: any
      }
      {
        name: amount
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  RemoveSofttargetLockRequest: {
    description: ""
    parameters: [
      {
        name: requesterID
        optional: false
        type: any
      }
    ]
    returnType: requesterRemoved
    deprecated: false
    detailed:
      '''
      *Removes the lock-request for the specified requesterID.*
      *Note that the return value only indicates whether the requester was removed. It does not necessarily correspond to the target lock having been lifted (i.e. if there are still outstanding lock-requests).*
      '''
    notes: ""
  }
  RepairDestructibles: {
    description: Repairs the specified destructibles.
    parameters: [
      {
        name: destructible1ID
        optional: false
        type: any
      }
      {
        name: destructible2ID
        optional: false
        type: any
      }
      {
        name: ...
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  ReplacePlayerCockpit: {
    description: Replace the player ship cockpit with the specified macro.
    parameters: [
      {
        name: cockpitmacro
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  RequestSofttargetLock: {
    description: Adds a lock-request (with the specified requesterID) of the current softtarget (preventing the current target from being changed).
    parameters: [
      {
        name: requesterID
        optional: false
        type: any
      }
    ]
    returnType: success
    deprecated: false
    detailed: Prior to 4.20 the function could be used to prevent objects being targeted (i.e. calling RequestSofttargetLock() with no current target). As of 4.20 such a call will fail and indicate the failure via its return value.*
    notes: 4.21 Beta 1 (VR: 4.20): added success return value
  }
  ResetAllExtensionSettings: {
    description: Resets all changes to extension settings from this session.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  RestoreGameOptions: {
    description: Restores the game settings from the default config.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  RestoreGraphicOptions: {
    description: Restores the gfx settings from the default config.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  RestoreOptionsMenu: {
    description: Opens the options menu.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  RestoreSoundOptions: {
    description: Restores the sound settings from the default config.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  ReturnFromMenu: {
    description: Returns from a conversation menu. Optionally passing a parameter.
    parameters: [
      {
        name: returnparam
        optional: true
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SaveFullscreenOption: {
    description: Save the current fullscreen setting to the player config.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SaveGame: {
    description: Save the game to the specified filename.
    parameters: [
      {
        name: filename
        optional: false
        type: any
      }
      {
        name: savename
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SaveInputProfile: {
    description: Save the input profile.
    parameters: [
      {
        name: filename
        optional: false
        type: any
      }
      {
        name: id
        optional: false
        type: any
      }
      {
        name: customname
        optional: false
        type: any
      }
      {
        name: copyfromfile
        optional: true
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SaveInputSettings: {
    description: Save the input map.
    parameters: [
      {
        name: actionTable
        optional: false
        type: any
      }
      {
        name: stateTable
        optional: false
        type: any
      }
      {
        name: rangeTable
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed:
      '''
      `actionTable`
      ```lua
      actionTable = {
      Â Â [ActionID] = {
      Â Â Â Â [1] = {
      Â Â Â Â Â Â [1] = InputID Source,
      Â Â Â Â Â Â [2] = InputID Code,
      Â Â Â Â Â Â [3] = InputID Signum
      Â Â Â Â },
      Â Â Â Â [2] = { ... }
      Â Â },
      Â Â [ActionID] = { ... }
      }
      ```
      `stateTable`
      ```lua
      stateTable = {
      Â Â [StateID] = {
      Â Â Â Â [1] = {
      Â Â Â Â Â Â [1] = InputID Source,
      Â Â Â Â Â Â [2] = InputID Code,
      Â Â Â Â Â Â [3] = InputID Signum
      Â Â Â Â },
      Â Â Â Â [2] = { ... }
      Â Â },
      Â Â [StateID] = { ... }
      }
      ```
      `rangeTable`
      ```lua
      rangeTable = {
      Â Â [RangeID] = {
      Â Â Â Â [1] = {
      Â Â Â Â Â Â [1] = InputID Source,
      Â Â Â Â Â Â [2] = InputID Code,
      Â Â Â Â Â Â [3] = InputID Signum
      Â Â Â Â },
      Â Â Â Â [2] = { ... }
      Â Â },
      Â Â [RangeID] = { ... }
      }
      ```
      '''
    notes: ""
  }
  SaveResolutionOption: {
    description: Save the current resolutions setting to the player config.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  ScheduleReloadUI: {
    description: Schedule a ui reload.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SelectBackOption: {
    description: Select the back in a conversation choice.
    parameters: []
    returnType: bool
    deprecated: false
    detailed: ""
    notes: ""
  }
  SendEntityTransportDrone: {
    description: Sends the specified entity to the given container or the player ship via remote transport drone.
    parameters: [
      {
        name: entityID
        optional: false
        type: any
      }
      {
        name: containerID or nil
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SendTransportDrone: {
    description: Sends the specified wareAmountList from the sendingentity to the receivingentity.
    parameters: [
      {
        name: sendingentityID
        optional: false
        type: any
      }
      {
        name: receivingentityID
        optional: false
        type: any
      }
      {
        name: waretype
        optional: false
        type: any
      }
      {
        name: wareAmountArray
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed:
      '''
      `wareAmountArray`
      ```lua
      wareAmountArray = {
      Â Â [1] = {
      Â Â Â Â [1] = ware,
      Â Â Â Â [2] = amount
      Â Â },
      Â Â [2] = { ... }
      }
      ```
      '''
    notes: ""
  }
  SetActiveMission: {
    description: Sets the specified mission as active.
    parameters: [
      {
        name: missionID
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetAdapterOption: {
    description: Sets the display adapter to the specified ordinal.
    parameters: [
      {
        name: adapterOrdinal
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetAimAssistOption: {
    description: Sets the aim assist setting.
    parameters: [
      {
        name: setting
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetAntiAliasModeOption: {
    description: Sets the anti alias mode.
    parameters: [
      {
        name: antialiasmode
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetAutorollOption: {
    description: Toggles the autoroll setting.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetAutosaveOption: {
    description: Toggles autosave setting.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetBoostToggleOption: {
    description: Toggle the boost toggle setting.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetBudgetResponsibility: {
    description: Set the budget responsibility of the specified entity.
    parameters: [
      {
        name: entityID
        optional: false
        type: any
      }
      {
        name: responsibility
        optional: false
        type: any
      }
    ]
    returnType: responsibility
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetButtonColor: {
    description: Sets the color for the specified button.
    parameters: [
      {
        name: buttonID
        optional: false
        type: any
      }
      {
        name: r
        optional: false
        type: any
      }
      {
        name: g
        optional: false
        type: any
      }
      {
        name: b
        optional: false
        type: any
      }
      {
        name: alpha
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetCaptureHQOption: {
    description: Toggle the capture hq setting.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetCollisionAvoidanceAssistOption: {
    description: Toggle the collision avoidance assist setting.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetComponentName: {
    description: Set the name of the specified component.
    parameters: [
      {
        name: componentID
        optional: false
        type: any
      }
      {
        name: name
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetConfineMouseOption: {
    description: Toggle confine mouse setting.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetContainerStockLimitOverride: {
    description: Define a stock limit for a particular ware for this ship/station.
    parameters: [
      {
        name: containerID
        optional: false
        type: any
      }
      {
        name: ware
        optional: false
        type: any
      }
      {
        name: amount
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetContainerWarePriceOverride: {
    description: Sets the price the specified container buys/sells the ware.
    parameters: [
      {
        name: containerID or buildmoduleID
        optional: false
        type: any
      }
      {
        name: ware
        optional: false
        type: any
      }
      {
        name: buysellswitch
        optional: false
        type: any
      }
      {
        name: price
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetCrashReportOption: {
    description: Toggles the crash report setting.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetDeadzoneOption: {
    description: Set the deadzone setting to the specified percentage.
    parameters: [
      {
        name: percentage
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetDifficultyOption: {
    description: Sets the difficulty setting.
    parameters: [
      {
        name: setting
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetDistortionOption: {
    description: Toggles the distortion setting.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetEffectDistanceOption: {
    description: Sets the effect distance setting.
    parameters: [
      {
        name: distance
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetEMCutsceneOption: {
    description: Toggle the event monitor cutscene setting.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: **DEPRECATED**Â \- do not use
  }
  SetExtensionSettings: {
    description: Sets the setting of the specified extension.
    parameters: [
      {
        name: id
        optional: false
        type: any
      }
      {
        name: personal
        optional: false
        type: any
      }
      {
        name: setting
        optional: false
        type: any
      }
      {
        name: value
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetFOVOption: {
    description: Sets the fov setting.
    parameters: [
      {
        name: fov
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetFullscreenDetailmonitorOption: {
    description: Toggles the fullscreen detailmonitor setting.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetFullScreenOneToOne: {
    description: Sets the render mode of the current UI environment to fullscreen 1:1 mapping.* Return value indicates success/failure.
    parameters: []
    returnType: bool
    deprecated: false
    detailed: ""
    notes: 4.10 Beta 1: added boolean return value.
  }
  SetFullscreenOption: {
    description: Sets the fullscreen setting and optionally provide a prompt if the setting worked.
    parameters: [
      {
        name: setting
        optional: false
        type: any
      }
      {
        name: checksetting
        optional: true
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetFullScreenWorldSpace: {
    description: Sets the render mode of the current UI environment to worldspace rendering mode.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetGamepadModeOption: {
    description: Sets the gamepad mode option to setting.
    parameters: [
      {
        name: setting
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetGammaOption: {
    description: Sets the gamma setting.
    parameters: [
      {
        name: gamma
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetGfxQualityOption: {
    description: Sets the gfx quality setting.
    parameters: [
      {
        name: setting
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetGlowOption: {
    description: Sets the glow setting.
    parameters: [
      {
        name: setting
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetInversionSetting: {
    description: Toggles inversion for the specified range input.
    parameters: [
      {
        name: rangeid
        optional: false
        type: any
      }
      {
        name: configname
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetJoysticksOption: {
    description: Sets the specified guid as the joystick.
    parameters: [
      {
        name: joystick
        optional: false
        type: any
      }
      {
        name: guid
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetLegacyMainMenuOption: {
    description: Toggles the legacy main menu setting.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetLegacyShadersOption: {
    description: Toggles the legacy shaders setting.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetLODOption: {
    description: Sets the lod setting.
    parameters: [
      {
        name: lodfactor
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetMainMissiontargetMessage: {
    description: ""
    parameters: [
      {
        name: posID
        optional: false
        type: any
      }
      {
        name: messageID
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: **UNSUPPORTED.**Â Not designed to be used by mods.
  }
  SetMaxBudget: {
    description: Sets the max budget of the specified entity.
    parameters: [
      {
        name: entityID
        optional: false
        type: any
      }
      {
        name: amount
        optional: false
        type: any
      }
    ]
    returnType: amount
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetMinBudget: {
    description: Sets the min budget of the specified entity.
    parameters: [
      {
        name: entityID
        optional: false
        type: any
      }
      {
        name: amount
        optional: false
        type: any
      }
    ]
    returnType: amount
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetMouseOverride: {
    description: Sets the mouse cursor override of the specified element (and all of its children) to the given cursor ID. If the mouse is hovered over the element, the cursor will display the specified cursor icon*.
    parameters: [
      {
        name: element
        optional: false
        type: any
      }
      {
        name: cursorIcon
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: true
    detailed: ""
    notes: **DEPRECATED** - use SetPointerOverride() instead (simply pass the cursorIcon as pointerID)
  }
  SetMouseSleeping: {
    description: Sets the mouse to sleep until moved again.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetNonSquadShipsForTradeOffersOption: {
    description: Toggles the setting whether non-squad ships should be included in the trade offers menu.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetNPCBlackboard: {
    description: Sets the blackboard variable "valueName" from the blackboard of the specified entity to "value".*Â If the "value" is nil, the blackboard variable is cleared.
    parameters: [
      {
        name: entityID
        optional: false
        type: any
      }
      {
        name: valueName
        optional: false
        type: any
      }
      {
        name: value
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: 4.10 Beta 5: If the "value" is nil, the blackboard variable is cleared.
  }
  SetNPCSkill: {
    description: Set the specified skill of the given entity to value.
    parameters: [
      {
        name: entityID
        optional: false
        type: any
      }
      {
        name: skill
        optional: false
        type: any
      }
      {
        name: value
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetPersonalizedCrashReportsOption: {
    description: Toggles the setting to send personalized crash reports.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetPointerOverride: {
    description: Sets the pointer ID override of the specified element (and all of its children) to the given pointer ID. If the pointer (i.e. either the cursor or a pointing device) is hovered over the element, the pointer will display the specified pointer ID).
    parameters: [
      {
        name: element
        optional: false
        type: any
      }
      {
        name: pointerID
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetPriorityMissionTargetMessage: {
    description: ""
    parameters: [
      {
        name: posID
        optional: false
        type: any
      }
      {
        name: messageID
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: **UNSUPPORTED.**Â Not designed to be used by mods.
  }
  SetRadarOption: {
    description: Sets the radar setting.
    parameters: [
      {
        name: setting
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetRenderTargetOneToOne: {
    description: Swaps the rendering mode to a preset rendertarget. It's intended for UI internal use. No current support to utilize this in a useful way for UI modding.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetRenderTargetSize: {
    description: Sets the size of the specified rendertarget (given as a relative path to the texturename).
    parameters: [
      {
        name: texturename
        optional: false
        type: any
      }
      {
        name: width
        optional: false
        type: any
      }
      {
        name: height
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: **UNSUPPORTED.**Â Not designed to be used by mods.
  }
  SetResolutionOption: {
    description: Sets the resoltion to the specifed values. Optionally provide a prompt if the setting worked.
    parameters: [
      {
        name: width
        optional: false
        type: any
      }
      {
        name: height
        optional: false
        type: any
      }
      {
        name: checksetting
        optional: true
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetRumbleOption: {
    description: Sets the rumble setting.
    parameters: [
      {
        name: setting
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetSensitivitySetting: {
    description: Sets the sensitivity setting of the specified input range.
    parameters: [
      {
        name: rangeid
        optional: false
        type: any
      }
      {
        name: configname
        optional: false
        type: any
      }
      {
        name: sensitivity
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetShaderQualityOption: {
    description: Sets the shader quality setting.
    parameters: [
      {
        name: setting
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetShadowOption: {
    description: Sets the shadow setting.
    parameters: [
      {
        name: setting
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetSoftShadowsOption: {
    description: Toggles the soft shadow setting.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetSoundOption: {
    description: Toggle the global sound setting.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetSSAOOption: {
    description: Sets the ssao setting.
    parameters: [
      {
        name: setting
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetStatValue: {
    description: Sets the specified statistic to value.
    parameters: [
      {
        name: stat
        optional: false
        type: any
      }
      {
        name: value
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetSteeringNoteOption: {
    description: Toggles the steering note setting.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetStopShipInMenuOption: {
    description: Toggles the setting whether the playership should stop while a menu is open.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetSubtitleOption: {
    description: Sets the subtitle setting.
    parameters: [
      {
        name: setting
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetViewDistanceOption: {
    description: Sets the view distance setting.
    parameters: [
      {
        name: distance
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetVirtualCargoMode: {
    description: Sets the specified container to virtual cargo mode. Using its trade queue to predict future cargo and unit availability.
    parameters: [
      {
        name: containerID
        optional: false
        type: any
      }
      {
        name: onoff
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: Virtual cargo mode should be disabled again when leaving the current menu.
  }
  SetVolumeOption: {
    description: Sets the volume setting of the specified type.
    parameters: [
      {
        name: volumetype
        optional: false
        type: any
      }
      {
        name: volume
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  SetVSyncOption: {
    description: Toggles the vsync setting.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  ShowInteractMenu: {
    description: Starts the interact menu interaction.
    parameters: []
    returnType: unknown
    deprecated: true
    detailed: ""
    notes: **DEPRECATED** - use FFI function EnterInteractMenu() instead
  }
  SignalObject: {
    description: Sends a generic ObjectSignalledEvent on the specified component. These can be listened to by MD/AI script.
    parameters: [
      {
        name: componentID
        optional: false
        type: any
      }
      {
        name: param1
        optional: true
        type: any
      }
      {
        name: param2
        optional: true
        type: any
      }
      {
        name: param3
        optional: true
        type: any
      }
      {
        name: delay
        optional: true
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  StartAutoPilot: {
    description: Start the auto pilot on the specified component.
    parameters: [
      {
        name: componentID
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  StartBriefing: {
    description: Notifies the MD that a mission briefing was started.
    parameters: [
      {
        name: missionid
        optional: false
        type: any
      }
      {
        name: "{texturename1"
        optional: false
        type: any
      }
      {
        name: ...}
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  StartConversationFromMenu: {
    description: Starts the specified new conversation in MD. This requires that no conversation is currently active. Conversation parameter is required but can be nil.
    parameters: [
      {
        name: conversation
        optional: false
        type: any
      }
      {
        name: actor
        optional: false
        type: any
      }
      {
        name: convparam
        optional: false
        type: any
      }
    ]
    returnType: success
    deprecated: false
    detailed: ""
    notes: ""
  }
  StartSubConversationFromMenu: {
    description: Proceeds from a conversation menu to the specified new conversation in MD. Optionally passing parameters.
    parameters: [
      {
        name: conversation
        optional: false
        type: any
      }
      {
        name: actor
        optional: false
        type: any
      }
      {
        name: convparam
        optional: true
        type: any
      }
      {
        name: baseparam
        optional: true
        type: any
      }
      {
        name: view
        optional: true
        type: any
      }
    ]
    returnType: success
    deprecated: false
    detailed: ""
    notes: ""
  }
  StopAutoPilot: {
    description: Stops the auto pilot.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  StopBriefing: {
    description: Notifiy the MD that a mission briefing stopped.
    parameters: [
      {
        name: missionid
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  StopRestoringOptionsMenu: {
    description: Stop restoring the options menu after ui reloads.
    parameters: []
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  ToggleFactionTradeRestriction: {
    description: Toggle faction trade restriction on the specified container.
    parameters: [
      {
        name: containerID
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  ToggleFactionTradeWareOverride: {
    description: Toggle faction trade restriction override on the specified containerÂ for the given ware.
    parameters: [
      {
        name: containerID
        optional: false
        type: any
      }
      {
        name: ware
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  ToggleMissionGuidance: {
    description: Toggle the mission guidance for the specified mission.
    parameters: [
      {
        name: missionid
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  TransferInventoryToPlayer: {
    description: Transfers the specified ware and amount from the given entity toÂ the player.
    parameters: [
      {
        name: ware
        optional: false
        type: any
      }
      {
        name: amount
        optional: false
        type: any
      }
      {
        name: entityID
        optional: false
        type: any
      }
    ]
    returnType: transferredAmount
    deprecated: false
    detailed: ""
    notes: ""
  }
  TransferMoneyToPlayer: {
    description: Transfers the specified amount from the given entity toÂ the player.
    parameters: [
      {
        name: amount
        optional: false
        type: any
      }
      {
        name: entityID
        optional: false
        type: any
      }
    ]
    returnType: transferredMoney
    deprecated: false
    detailed: ""
    notes: ""
  }
  TransferPlayerInventoryTo: {
    description: Transfers the specified ware and amount from the player to the given entity.
    parameters: [
      {
        name: ware
        optional: false
        type: any
      }
      {
        name: amount
        optional: false
        type: any
      }
      {
        name: entityID
        optional: false
        type: any
      }
    ]
    returnType: transferredAmount
    deprecated: false
    detailed: ""
    notes: ""
  }
  TransferPlayerMoneyTo: {
    description: Transfers *the specified amount from the player to the given entity.
    parameters: [
      {
        name: amount
        optional: false
        type: any
      }
      {
        name: entityID
        optional: false
        type: any
      }
    ]
    returnType: transferredMoney
    deprecated: false
    detailed: ""
    notes: ""
  }
  TruncateText: {
    description: Truncates the given text with the specified limitations.
    parameters: [
      {
        name: text
        optional: false
        type: any
      }
      {
        name: fontname
        optional: false
        type: any
      }
      {
        name: fontsize
        optional: false
        type: any
      }
      {
        name: width
        optional: false
        type: any
      }
      {
        name: wordwrap
        optional: true
        type: any
      }
      {
        name: textheight
        optional: false
        type: any
      }
    ]
    returnType: text
    deprecated: false
    detailed: ""
    notes: ""
  }
  UninstallSteamDLC: {
    description: Uninstalls the specified steam dlc.
    parameters: [
      {
        name: appid
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  Unpause: {
    description: Unpause the game.*Â If the explicit flag is set to true, this will unpause the game as if the pause key was hit.
    parameters: [
      {
        name: explicit
        optional: true
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  UnregisterAddonBindings: {
    description: Unregisters addon key bindings using the <bindinggroup /> nodes in ui.xml. If no groupid is specified all groups will be unregistered.
    parameters: [
      {
        name: addonname
        optional: false
        type: any
      }
      {
        name: groupid = ""
        optional: true
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: **UNSUPPORTED.**Â Not designed to be used by mods.
  }
  UnregisterMouseInteractions: {
    description: Unregisters the specified elemnent (and all its children) from mouse/pointer picking interactions.
    parameters: [
      {
        name: element
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  UnsetMapRenderTarget: {
    description: Resets the render target for the radar/map display.
    parameters: []
    returnType: unknown
    deprecated: true
    detailed: ""
    notes: **DEPRECATED** - use FFI function UnsetRadarRendertTarget() instead
  }
  UnsetMouseOverride: {
    description: Removes any specified mouse cursor override from the specified element or its children.
    parameters: [
      {
        name: element
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: true
    detailed: ""
    notes: **DEPRECATED** - use UnsetPointerOverride() instead
  }
  UnsetPointerOverride: {
    description: Removes any specified pointer override from the specified element or its children.
    parameters: [
      {
        name: element
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
  UpgradeObject: {
    description: Upgrade the specified destructible with the given upgrade level.
    parameters: [
      {
        name: destructibleID
        optional: false
        type: any
      }
      {
        name: upgradetype
        optional: false
        type: any
      }
      {
        name: level
        optional: false
        type: any
      }
    ]
    returnType: unknown
    deprecated: false
    detailed: ""
    notes: ""
  }
}