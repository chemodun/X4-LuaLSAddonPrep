{
  functions: {
    AbortActiveTerraformingProject: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: clusterid
        }
      ]
      declaration: void AbortActiveTerraformingProject(UniverseID clusterid);
      file: menu_terraforming.lua
      detailed: ""
      notes: ""
    }
    AbortBoardingOperation: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: defensibletargetid
        }
        {
          type: const char*
          name: boarderfactionid
        }
      ]
      declaration: bool AbortBoardingOperation(UniverseID defensibletargetid, const char* boarderfactionid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    AbortCurrentNotification: {
      returnType: void
      parameters: []
      declaration: void AbortCurrentNotification();
      file: monitors.lua
      detailed: ""
      notes: ""
    }
    AbortMission: {
      returnType: void
      parameters: [
        {
          type: MissionID
          name: missionid
        }
      ]
      declaration: void AbortMission(MissionID missionid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    ActivateDirectInput: {
      returnType: void
      parameters: []
      declaration: void ActivateDirectInput(void);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    ActivateDirectKeyInput: {
      returnType: void
      parameters: []
      declaration: void ActivateDirectKeyInput(void);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    ActivateObject: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: objectid
        }
        {
          type: bool
          name: active
        }
      ]
      declaration: void ActivateObject(UniverseID objectid, bool active);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    ActivateSliderCellInput: {
      returnType: void
      parameters: []
      declaration: void ActivateSliderCellInput(void);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    AddAttackerToBoardingOperation: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: defensibletargetid
        }
        {
          type: UniverseID
          name: defensibleboarderid
        }
        {
          type: const char*
          name: boarderfactionid
        }
        {
          type: const char*
          name: actionid
        }
        {
          type: uint32_t*
          name: marinetieramounts
        }
        {
          type: int32_t*
          name: marinetierskilllevels
        }
        {
          type: uint32_t
          name: nummarinetiers
        }
      ]
      declaration: bool AddAttackerToBoardingOperation(UniverseID defensibletargetid, UniverseID defensibleboarderid, const char* boarderfactionid, const char* actionid, uint32_t* marinetieramounts, int32_t* marinetierskilllevels, uint32_t nummarinetiers);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    AddBuildTask6: {
      returnType: BuildTaskID
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: UILoadout2
          name: uiloadout
        }
        {
          type: int64_t
          name: price
        }
        {
          type: CrewTransferInfo2
          name: crewtransfer
        }
        {
          type: bool
          name: immediate
        }
        {
          type: const char*
          name: customname
        }
        {
          type: AddBuildTask6Container*
          name: additionalinfo
        }
      ]
      declaration: BuildTaskID AddBuildTask6(UniverseID containerid, UniverseID defensibleid, const char* macroname, UILoadout2 uiloadout, int64_t price, CrewTransferInfo2 crewtransfer, bool immediate, const char* customname, AddBuildTask6Container* additionalinfo);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    AddCluster: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: macroname
        }
        {
          type: UIPosRot
          name: offset
        }
      ]
      declaration: void AddCluster(const char* macroname, UIPosRot offset);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    AddColorMapColorDefinition: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: colorid
        }
      ]
      declaration: void AddColorMapColorDefinition(const char* colorid);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    AddCopyToConstructionMap: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: size_t
          name: cp_idx
        }
        {
          type: bool
          name: copysequence
        }
      ]
      declaration: void AddCopyToConstructionMap(UniverseID holomapid, size_t cp_idx, bool copysequence);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    AddFleetUnitSubordinate: {
      returnType: void
      parameters: [
        {
          type: FleetUnitID
          name: fleetunitid
        }
        {
          type: UniverseID
          name: subordinateid
        }
        {
          type: FleetUnitID
          name: subordinatefleetunitid
        }
        {
          type: int32_t
          name: subordinategroupid
        }
      ]
      declaration: void AddFleetUnitSubordinate(FleetUnitID fleetunitid, UniverseID subordinateid, FleetUnitID subordinatefleetunitid, int32_t subordinategroupid);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    AddFloatingSequenceToConstructionPlan: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
      ]
      declaration: void AddFloatingSequenceToConstructionPlan(UniverseID holomapid);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    AddGateConnection: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: gateid
        }
        {
          type: UniverseID
          name: othergateid
        }
      ]
      declaration: void AddGateConnection(UniverseID gateid, UniverseID othergateid);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    AddHoloMap: {
      returnType: UniverseID
      parameters: [
        {
          type: const char*
          name: texturename
        }
        {
          type: float
          name: x0
        }
        {
          type: float
          name: x1
        }
        {
          type: float
          name: y0
        }
        {
          type: float
          name: y1
        }
        {
          type: float
          name: aspectx
        }
        {
          type: float
          name: aspecty
        }
      ]
      declaration: UniverseID AddHoloMap(const char* texturename, float x0, float x1, float y0, float y1, float aspectx, float aspecty);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    AddMacroToConstructionMap: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: bool
          name: startdragging
        }
      ]
      declaration: void AddMacroToConstructionMap(UniverseID holomapid, const char* macroname, bool startdragging);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    AddPlayerAlert2: {
      returnType: void
      parameters: [
        {
          type: PlayerAlertInfo2
          name: alert
        }
      ]
      declaration: void AddPlayerAlert2(PlayerAlertInfo2 alert);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    AddPlayerMoney: {
      returnType: void
      parameters: [
        {
          type: int64_t
          name: money
        }
      ]
      declaration: void AddPlayerMoney(int64_t money);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    AddResearch: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: wareid
        }
      ]
      declaration: void AddResearch(const char* wareid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    AddSector: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: clusterid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: UIPosRot
          name: offset
        }
      ]
      declaration: void AddSector(UniverseID clusterid, const char* macroname, UIPosRot offset);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    AddSimilarMapComponentsToSelection: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: UniverseID
          name: componentid
        }
      ]
      declaration: void AddSimilarMapComponentsToSelection(UniverseID holomapid, UniverseID componentid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    AddTradeWare: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: const char*
          name: wareid
        }
      ]
      declaration: void AddTradeWare(UniverseID containerid, const char* wareid);
      file: menu_station_overview.lua
      detailed: ""
      notes: ""
    }
    AdjustOrder: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: size_t
          name: idx
        }
        {
          type: size_t
          name: newidx
        }
        {
          type: bool
          name: enabled
        }
        {
          type: bool
          name: forcestates
        }
        {
          type: bool
          name: checkonly
        }
      ]
      declaration: bool AdjustOrder(UniverseID controllableid, size_t idx, size_t newidx, bool enabled, bool forcestates, bool checkonly);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    AllowPersonalizedData: {
      returnType: bool
      parameters: []
      declaration: bool AllowPersonalizedData(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    AreAssertsEnabled: {
      returnType: bool
      parameters: []
      declaration: bool AreAssertsEnabled();
      file: debuglog.lua
      detailed: ""
      notes: ""
    }
    AreConstructionPlanLoadoutsCompatible: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: constructionplanid
        }
      ]
      declaration: bool AreConstructionPlanLoadoutsCompatible(const char* constructionplanid);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    AreGfxSettingsTooHigh: {
      returnType: bool
      parameters: []
      declaration: bool AreGfxSettingsTooHigh(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    AreMandatoryAssertsEnabled: {
      returnType: bool
      parameters: []
      declaration: bool AreMandatoryAssertsEnabled();
      file: debuglog.lua
      detailed: ""
      notes: ""
    }
    AreOptionalAssertEnabled: {
      returnType: bool
      parameters: []
      declaration: bool AreOptionalAssertEnabled();
      file: debuglog.lua
      detailed: ""
      notes: ""
    }
    AreVenturesCompatible: {
      returnType: bool
      parameters: []
      declaration: bool AreVenturesCompatible(void);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    AreVenturesEnabled: {
      returnType: bool
      parameters: []
      declaration: bool AreVenturesEnabled(void);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    AreWaresWithinContainerProductionLimits: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: UIWareAmount*
          name: wares
        }
        {
          type: uint32_t
          name: numwares
        }
      ]
      declaration: bool AreWaresWithinContainerProductionLimits(UniverseID containerid, UIWareAmount* wares, uint32_t numwares);
      file: menu_station_overview.lua
      detailed: ""
      notes: ""
    }
    AssignHiredActor: {
      returnType: const char*
      parameters: [
        {
          type: GenericActor
          name: actor
        }
        {
          type: UniverseID
          name: targetcontrollableid
        }
        {
          type: const char*
          name: postid
        }
        {
          type: const char*
          name: roleid
        }
        {
          type: bool
          name: checkonly
        }
      ]
      declaration: const char* AssignHiredActor(GenericActor actor, UniverseID targetcontrollableid, const char* postid, const char* roleid, bool checkonly);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    CanAbortActiveTerraformingProject: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: clusterid
        }
      ]
      declaration: bool CanAbortActiveTerraformingProject(UniverseID clusterid);
      file: menu_terraforming.lua
      detailed: ""
      notes: ""
    }
    CanAcceptSubordinate: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: commanderid
        }
        {
          type: UniverseID
          name: potentialsubordinateid
        }
      ]
      declaration: bool CanAcceptSubordinate(UniverseID commanderid, UniverseID potentialsubordinateid);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    CanActivateSeta: {
      returnType: bool
      parameters: [
        {
          type: bool
          name: checkcontext
        }
      ]
      declaration: bool CanActivateSeta(bool checkcontext);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    CanApplyKnownLoadout: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: macroname
        }
        {
          type: const char*
          name: loadoutid
        }
      ]
      declaration: bool CanApplyKnownLoadout(const char* macroname, const char* loadoutid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    CanBeCollectedBy: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: objectid
        }
        {
          type: UniverseID
          name: containerid
        }
      ]
      declaration: bool CanBeCollectedBy(UniverseID objectid, UniverseID containerid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    CanBeDismantled: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
      ]
      declaration: bool CanBeDismantled(UniverseID componentid);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    CanBeTowed: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
      ]
      declaration: bool CanBeTowed(UniverseID componentid);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    CanBuildLoadout: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: const char*
          name: loadoutid
        }
      ]
      declaration: bool CanBuildLoadout(UniverseID containerid, UniverseID defensibleid, const char* macroname, const char* loadoutid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    CanBuildMissionLoadout: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: MissionID
          name: missionid
        }
        {
          type: const char*
          name: uimacroname
        }
      ]
      declaration: bool CanBuildMissionLoadout(UniverseID containerid, MissionID missionid, const char* uimacroname);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    CanCancelConstruction: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: BuildTaskID
          name: id
        }
      ]
      declaration: bool CanCancelConstruction(UniverseID containerid, BuildTaskID id);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    CancelConstruction: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: BuildTaskID
          name: id
        }
      ]
      declaration: bool CancelConstruction(UniverseID containerid, BuildTaskID id);
      file: menu_userquestion.lua
      detailed: ""
      notes: ""
    }
    CancelPlayerInvolvedTradeDeal: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: TradeID
          name: tradeid
        }
        {
          type: bool
          name: checkonly
        }
      ]
      declaration: bool CancelPlayerInvolvedTradeDeal(UniverseID containerid, TradeID tradeid, bool checkonly);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    CanClaimOwnership: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: destructibleid
        }
      ]
      declaration: bool CanClaimOwnership(UniverseID destructibleid);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    CanContainerBuildShip: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: UniverseID
          name: shipid
        }
      ]
      declaration: bool CanContainerBuildShip(UniverseID containerid, UniverseID shipid);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    CanContainerEquipShip: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: UniverseID
          name: shipid
        }
      ]
      declaration: bool CanContainerEquipShip(UniverseID containerid, UniverseID shipid);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    CanContainerMineTransport: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: const char*
          name: transportname
        }
      ]
      declaration: bool CanContainerMineTransport(UniverseID containerid, const char* transportname);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    CanContainerSupplyShip: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: UniverseID
          name: shipid
        }
      ]
      declaration: bool CanContainerSupplyShip(UniverseID containerid, UniverseID shipid);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    CanContainerTransport: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: const char*
          name: transportname
        }
      ]
      declaration: bool CanContainerTransport(UniverseID containerid, const char* transportname);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    CanControllableHaveAnyTrainees: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
      ]
      declaration: bool CanControllableHaveAnyTrainees(UniverseID controllableid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    CanControllableHaveControlEntity: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: const char*
          name: postid
        }
      ]
      declaration: bool CanControllableHaveControlEntity(UniverseID controllableid, const char* postid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    CanDockAtDockingBay: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: shipid
        }
        {
          type: UniverseID
          name: dockingbayid
        }
      ]
      declaration: bool CanDockAtDockingBay(UniverseID shipid, UniverseID dockingbayid);
      file: menu_platformundock.lua
      detailed: ""
      notes: ""
    }
    CanGenerateValidKnownLoadout: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: macroname
        }
      ]
      declaration: bool CanGenerateValidKnownLoadout(const char* macroname);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    CanGenerateValidLoadout: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: const char*
          name: macroname
        }
      ]
      declaration: bool CanGenerateValidLoadout(UniverseID containerid, const char* macroname);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    CanHaveCountermeasures: {
      returnType: bool
      parameters: []
      declaration: bool CanHaveCountermeasures();
      file: crosshair handling.lua
      detailed: ""
      notes: ""
    }
    CanOpenWebBrowser: {
      returnType: bool
      parameters: []
      declaration: bool CanOpenWebBrowser(void);
      file: menu_help.lua
      detailed: ""
      notes: ""
    }
    CanPerformLongRangeScan: {
      returnType: bool
      parameters: []
      declaration: bool CanPerformLongRangeScan(void);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    CanPlayerCommTarget: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
      ]
      declaration: bool CanPlayerCommTarget(UniverseID componentid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    CanPlayerStandUp: {
      returnType: bool
      parameters: []
      declaration: bool CanPlayerStandUp(void);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    CanPlayerUseRace: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: raceid
        }
        {
          type: const char*
          name: postid
        }
      ]
      declaration: bool CanPlayerUseRace(const char* raceid, const char* postid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    CanPutShipIntoStorage: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: UniverseID
          name: shipid
        }
      ]
      declaration: bool CanPutShipIntoStorage(UniverseID containerid, UniverseID shipid);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    CanRedoConstructionMapChange: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
      ]
      declaration: bool CanRedoConstructionMapChange(UniverseID holomapid);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    CanResearch: {
      returnType: bool
      parameters: []
      declaration: bool CanResearch(void);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    CanSetPlayerCameraCinematicView: {
      returnType: bool
      parameters: []
      declaration: bool CanSetPlayerCameraCinematicView(void);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    CanStartTerraformingProject: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: clusterid
        }
        {
          type: const char*
          name: projectid
        }
      ]
      declaration: bool CanStartTerraformingProject(UniverseID clusterid, const char* projectid);
      file: menu_terraforming.lua
      detailed: ""
      notes: ""
    }
    CanStartTravelMode: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: objectid
        }
      ]
      declaration: bool CanStartTravelMode(UniverseID objectid);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    CanTeleportPlayerTo: {
      returnType: const char*
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: bool
          name: allowcontrolling
        }
        {
          type: bool
          name: force
        }
      ]
      declaration: const char* CanTeleportPlayerTo(UniverseID controllableid, bool allowcontrolling, bool force);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    CanUndoConstructionMapChange: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
      ]
      declaration: bool CanUndoConstructionMapChange(UniverseID holomapid);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    ChangeMapBuildPlot: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: float
          name: x
        }
        {
          type: float
          name: y
        }
        {
          type: float
          name: z
        }
      ]
      declaration: void ChangeMapBuildPlot(UniverseID holomapid, float x, float y, float z);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    CheatDockingTraffic: {
      returnType: void
      parameters: []
      declaration: void CheatDockingTraffic(void);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    CheatLiveStreamViewChannels: {
      returnType: void
      parameters: []
      declaration: void CheatLiveStreamViewChannels(void);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    CheckConstructionPlanForMacros: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: constructionplanid
        }
        {
          type: const char**
          name: macroids
        }
        {
          type: uint32_t
          name: nummacroids
        }
      ]
      declaration: bool CheckConstructionPlanForMacros(const char* constructionplanid, const char** macroids, uint32_t nummacroids);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    CheckGroupedShieldModCompatibility: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: UniverseID
          name: contextid
        }
        {
          type: const char*
          name: group
        }
        {
          type: const char*
          name: wareid
        }
      ]
      declaration: bool CheckGroupedShieldModCompatibility(UniverseID defensibleid, UniverseID contextid, const char* group, const char* wareid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    CheckShipModCompatibility: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: shipid
        }
        {
          type: const char*
          name: wareid
        }
      ]
      declaration: bool CheckShipModCompatibility(UniverseID shipid, const char* wareid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    CheckWeaponModCompatibility: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: weaponid
        }
        {
          type: const char*
          name: wareid
        }
      ]
      declaration: bool CheckWeaponModCompatibility(UniverseID weaponid, const char* wareid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    ClaimShip: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: shipid
        }
        {
          type: UniverseID
          name: shiptobeclaimedid
        }
      ]
      declaration: bool ClaimShip(UniverseID shipid, UniverseID shiptobeclaimedid);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    ClearBuildMapSelection: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
      ]
      declaration: void ClearBuildMapSelection(UniverseID holomapid);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    ClearContainerBuyLimitOverride: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: const char*
          name: wareid
        }
      ]
      declaration: void ClearContainerBuyLimitOverride(UniverseID containerid, const char* wareid);
      file: menu_station_overview.lua
      detailed: ""
      notes: ""
    }
    ClearContainerSellLimitOverride: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: const char*
          name: wareid
        }
      ]
      declaration: void ClearContainerSellLimitOverride(UniverseID containerid, const char* wareid);
      file: menu_station_overview.lua
      detailed: ""
      notes: ""
    }
    ClearErrorLog: {
      returnType: void
      parameters: []
      declaration: void ClearErrorLog();
      file: debuglog.lua
      detailed: ""
      notes: ""
    }
    ClearMapBehaviour: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
      ]
      declaration: void ClearMapBehaviour(UniverseID holomapid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    ClearMapBuildPlot: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
      ]
      declaration: void ClearMapBuildPlot(UniverseID holomapid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    ClearMapObjectFilter: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
      ]
      declaration: void ClearMapObjectFilter(UniverseID holomapid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    ClearMapOrderParamObjectFilter: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
      ]
      declaration: void ClearMapOrderParamObjectFilter(UniverseID holomapid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    ClearMapTradeFilterByMinTotalVolume: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
      ]
      declaration: void ClearMapTradeFilterByMinTotalVolume(UniverseID holomapid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    ClearMapTradeFilterByPlayerOffer: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: bool
          name: buysellswitch
        }
      ]
      declaration: void ClearMapTradeFilterByPlayerOffer(UniverseID holomapid, bool buysellswitch);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    ClearMapTradeFilterByWare: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
      ]
      declaration: void ClearMapTradeFilterByWare(UniverseID holomapid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    ClearMapTradeFilterByWillingToTradeWithPlayer: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
      ]
      declaration: void ClearMapTradeFilterByWillingToTradeWithPlayer(UniverseID holomapid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    ClearProductionItems: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: productionmoduleid
        }
      ]
      declaration: void ClearProductionItems(UniverseID productionmoduleid);
      file: menu_research.lua
      detailed: ""
      notes: ""
    }
    ClearRendertarget: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: rendertarget
        }
      ]
      declaration: void ClearRendertarget(const char* rendertarget);
      file: menu_missionbriefing.lua
      detailed: ""
      notes: ""
    }
    ClearSelectedMapComponents: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
      ]
      declaration: void ClearSelectedMapComponents(UniverseID holomapid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    ClearSelectedMapMacroSlots: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
      ]
      declaration: void ClearSelectedMapMacroSlots(UniverseID holomapid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    ClearStartmenuParam: {
      returnType: void
      parameters: []
      declaration: void ClearStartmenuParam(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    ClearTrackedMenus: {
      returnType: void
      parameters: []
      declaration: void ClearTrackedMenus(void);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    CompareMapConstructionSequenceWithPlanned: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: bool
          name: usestoredplan
        }
      ]
      declaration: bool CompareMapConstructionSequenceWithPlanned(UniverseID holomapid, UniverseID defensibleid, bool usestoredplan);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    CompassMenuButtonPressed: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: uisource
        }
        {
          type: const char*
          name: buttonid
        }
      ]
      declaration: void CompassMenuButtonPressed(const char* uisource, const char* buttonid);
      file: compass.lua
      detailed: ""
      notes: ""
    }
    CompassMenuButtonReleased: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: uisource
        }
        {
          type: const char*
          name: buttonid
        }
      ]
      declaration: void CompassMenuButtonReleased(const char* uisource, const char* buttonid);
      file: compass.lua
      detailed: ""
      notes: ""
    }
    ConnectToMultiplayerGame: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: serverip
        }
      ]
      declaration: void ConnectToMultiplayerGame(const char* serverip);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    ContinueGameStart: {
      returnType: void
      parameters: []
      declaration: void ContinueGameStart(void);
      file: loading.lua
      detailed: ""
      notes: ""
    }
    ConvertInputString: {
      returnType: const char*
      parameters: [
        {
          type: const char*
          name: text
        }
        {
          type: const char*
          name: defaultvalue
        }
      ]
      declaration: const char* ConvertInputString(const char* text, const char* defaultvalue);
      file: chatwindow.lua
      detailed: ""
      notes: ""
    }
    ConvertStringTo64Bit: {
      returnType: uint64_t
      parameters: [
        {
          type: const char*
          name: idstring
        }
      ]
      declaration: uint64_t ConvertStringTo64Bit(const char* idstring);
      file: chatwindow.lua
      detailed: ""
      notes: ""
    }
    CopyToClipboard: {
      returnType: bool
      parameters: [
        {
          type: const char*const
          name: text
        }
      ]
      declaration: bool CopyToClipboard(const char*const text);
      file: debuglog.lua
      detailed: ""
      notes: ""
    }
    CreateBlacklist2: {
      returnType: BlacklistID
      parameters: [
        {
          type: BlacklistInfo2
          name: info
        }
      ]
      declaration: BlacklistID CreateBlacklist2(BlacklistInfo2 info);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    CreateBoardingOperation: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: defensibletargetid
        }
        {
          type: const char*
          name: boarderfactionid
        }
        {
          type: uint32_t
          name: approachthreshold
        }
        {
          type: uint32_t
          name: insertionthreshold
        }
      ]
      declaration: bool CreateBoardingOperation(UniverseID defensibletargetid, const char* boarderfactionid, uint32_t approachthreshold, uint32_t insertionthreshold);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    CreateDeployToStationOrder: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
      ]
      declaration: uint32_t CreateDeployToStationOrder(UniverseID controllableid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    CreateFightRule: {
      returnType: FightRuleID
      parameters: [
        {
          type: FightRuleInfo
          name: info
        }
      ]
      declaration: FightRuleID CreateFightRule(FightRuleInfo info);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    CreateNPCFromPerson: {
      returnType: UniverseID
      parameters: [
        {
          type: NPCSeed
          name: person
        }
        {
          type: UniverseID
          name: controllableid
        }
      ]
      declaration: UniverseID CreateNPCFromPerson(NPCSeed person, UniverseID controllableid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    CreateOrder: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: const char*
          name: orderid
        }
        {
          type: bool
          name: default
        }
      ]
      declaration: uint32_t CreateOrder(UniverseID controllableid, const char* orderid, bool default);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    CreateOrder3: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: const char*
          name: orderid
        }
        {
          type: bool
          name: defaultorder
        }
        {
          type: bool
          name: isoverride
        }
        {
          type: bool
          name: istemp
        }
      ]
      declaration: uint32_t CreateOrder3(UniverseID controllableid, const char* orderid, bool defaultorder, bool isoverride, bool istemp);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    CreateTradeRule: {
      returnType: TradeRuleID
      parameters: [
        {
          type: TradeRuleInfo
          name: info
        }
      ]
      declaration: TradeRuleID CreateTradeRule(TradeRuleInfo info);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    CycleNextDroneMode: {
      returnType: void
      parameters: [
        {
          type: uint32_t
          name: dronetype
        }
      ]
      declaration: void CycleNextDroneMode(uint32_t dronetype);
      file: crosshair handling.lua
      detailed: ""
      notes: ""
    }
    CycleTurretMissile: {
      returnType: void
      parameters: [
        {
          type: size_t
          name: turretnum
        }
      ]
      declaration: void CycleTurretMissile(size_t turretnum);
      file: crosshair handling.lua
      detailed: ""
      notes: ""
    }
    CycleTurretMode: {
      returnType: void
      parameters: [
        {
          type: size_t
          name: turretnum
        }
      ]
      declaration: void CycleTurretMode(size_t turretnum);
      file: crosshair handling.lua
      detailed: ""
      notes: ""
    }
    DeactivateDirectInput: {
      returnType: void
      parameters: []
      declaration: void DeactivateDirectInput(void);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    DeactivateDirectKeyInput: {
      returnType: void
      parameters: []
      declaration: void DeactivateDirectKeyInput(void);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    DeactivateMouseEmulation: {
      returnType: void
      parameters: []
      declaration: void DeactivateMouseEmulation(void);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    DeactivateSliderCellInput: {
      returnType: void
      parameters: []
      declaration: void DeactivateSliderCellInput(void);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    DeleteSavegame: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: filename
        }
      ]
      declaration: bool DeleteSavegame(const char* filename);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    DeselectMacroForConstructionMap: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
      ]
      declaration: void DeselectMacroForConstructionMap(UniverseID holomapid);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    DisableAsserts: {
      returnType: void
      parameters: []
      declaration: void DisableAsserts();
      file: debuglog.lua
      detailed: ""
      notes: ""
    }
    DisableAutoMouseEmulation: {
      returnType: void
      parameters: []
      declaration: void DisableAutoMouseEmulation(void);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    DisableEncryptedDirectInputMode: {
      returnType: void
      parameters: []
      declaration: void DisableEncryptedDirectInputMode(void);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    DisableOptionalAsserts: {
      returnType: void
      parameters: []
      declaration: void DisableOptionalAsserts();
      file: debuglog.lua
      detailed: ""
      notes: ""
    }
    DisableScenarioLoading: {
      returnType: void
      parameters: []
      declaration: void DisableScenarioLoading(void);
      file: loading.lua
      detailed: ""
      notes: ""
    }
    DismantleEngineMod: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: objectid
        }
      ]
      declaration: void DismantleEngineMod(UniverseID objectid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    DismantleGroupedWeaponMod: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: UniverseID
          name: contextid
        }
        {
          type: const char*
          name: group
        }
      ]
      declaration: void DismantleGroupedWeaponMod(UniverseID defensibleid, UniverseID contextid, const char* group);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    DismantleShieldMod: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: UniverseID
          name: contextid
        }
        {
          type: const char*
          name: group
        }
      ]
      declaration: void DismantleShieldMod(UniverseID defensibleid, UniverseID contextid, const char* group);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    DismantleShipMod: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: shipid
        }
      ]
      declaration: void DismantleShipMod(UniverseID shipid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    DismantleWeaponMod: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: weaponid
        }
      ]
      declaration: void DismantleWeaponMod(UniverseID weaponid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    DoesColorMapNeedRestart: {
      returnType: bool
      parameters: []
      declaration: bool DoesColorMapNeedRestart(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    DoesConstructionSequenceRequireBuilder: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
      ]
      declaration: bool DoesConstructionSequenceRequireBuilder(UniverseID containerid);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    DoesSliderCellForceArrows: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: slidercellid
        }
      ]
      declaration: bool DoesSliderCellForceArrows(const int slidercellid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    DoesUserDataExist: {
      returnType: bool
      parameters: []
      declaration: bool DoesUserDataExist(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    DropCargo: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: const char*
          name: wareid
        }
        {
          type: uint32_t
          name: amount
        }
      ]
      declaration: bool DropCargo(UniverseID containerid, const char* wareid, uint32_t amount);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    DropInventory: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: entityid
        }
        {
          type: const char*
          name: lockboxid
        }
        {
          type: UIWareAmount*
          name: wares
        }
        {
          type: uint32_t
          name: numwares
        }
      ]
      declaration: bool DropInventory(UniverseID entityid, const char* lockboxid, UIWareAmount* wares, uint32_t numwares);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    EnableAllCheats: {
      returnType: void
      parameters: []
      declaration: void EnableAllCheats(void);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    EnableAsserts: {
      returnType: void
      parameters: []
      declaration: void EnableAsserts();
      file: debuglog.lua
      detailed: ""
      notes: ""
    }
    EnableAutoMouseEmulation: {
      returnType: void
      parameters: []
      declaration: void EnableAutoMouseEmulation(void);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    EnableEncryptedDirectInputMode: {
      returnType: void
      parameters: []
      declaration: void EnableEncryptedDirectInputMode(void);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    EnableOptionalAsserts: {
      returnType: void
      parameters: []
      declaration: void EnableOptionalAsserts();
      file: debuglog.lua
      detailed: ""
      notes: ""
    }
    EnableOrder: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: size_t
          name: idx
        }
      ]
      declaration: bool EnableOrder(UniverseID controllableid, size_t idx);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    EnablePlannedDefaultOrder: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: bool
          name: checkonly
        }
      ]
      declaration: bool EnablePlannedDefaultOrder(UniverseID controllableid, bool checkonly);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    EnableScenarioLoading: {
      returnType: void
      parameters: [
        {
          type: bool
          name: reverse
        }
        {
          type: const char*
          name: gamestartid
        }
      ]
      declaration: void EnableScenarioLoading(bool reverse, const char* gamestartid);
      file: menu_scenario_debriefing.lua
      detailed: ""
      notes: ""
    }
    EndGuidance: {
      returnType: void
      parameters: []
      declaration: void EndGuidance(void);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    EnterInteractMenu: {
      returnType: void
      parameters: []
      declaration: void EnterInteractMenu();
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    ExportColorMap: {
      returnType: void
      parameters: []
      declaration: void ExportColorMap(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    ExportColorProfile: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: filename
        }
        {
          type: const char*
          name: name
        }
      ]
      declaration: void ExportColorProfile(const char* filename, const char* name);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    ExportCustomGameStart: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: filename
        }
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: name
        }
      ]
      declaration: void ExportCustomGameStart(const char* filename, const char* id, const char* name);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    ExportInputFeedbackConfig: {
      returnType: void
      parameters: []
      declaration: void ExportInputFeedbackConfig(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    ExportMap: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: mapname
        }
        {
          type: const char*
          name: extensionid
        }
        {
          type: bool
          name: personal
        }
      ]
      declaration: void ExportMap(const char* mapname, const char* extensionid, bool personal);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    ExportMapConstructionPlan: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: const char*
          name: filename
        }
        {
          type: const char*
          name: id
        }
        {
          type: bool
          name: overwrite
        }
        {
          type: const char*
          name: name
        }
        {
          type: const char*
          name: desc
        }
      ]
      declaration: void ExportMapConstructionPlan(UniverseID holomapid, const char* filename, const char* id, bool overwrite, const char* name, const char* desc);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    ExtendBuildPlot: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: stationid
        }
        {
          type: Coord3D
          name: poschange
        }
        {
          type: Coord3D
          name: negchange
        }
        {
          type: bool
          name: allowreduction
        }
      ]
      declaration: bool ExtendBuildPlot(UniverseID stationid, Coord3D poschange, Coord3D negchange, bool allowreduction);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    FadeScreen2: {
      returnType: void
      parameters: [
        {
          type: float
          name: fadeouttime
        }
        {
          type: float
          name: fadeintime
        }
        {
          type: float
          name: holdtime
        }
      ]
      declaration: void FadeScreen2(float fadeouttime, float fadeintime, float holdtime);
      file: menu_scenario_debriefing.lua
      detailed: ""
      notes: ""
    }
    FilterComponentByText: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
        {
          type: uint32_t
          name: numtexts
        }
        {
          type: const char**
          name: textarray
        }
        {
          type: bool
          name: includecontainedobjects
        }
      ]
      declaration: bool FilterComponentByText(UniverseID componentid, uint32_t numtexts, const char** textarray, bool includecontainedobjects);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    FilterComponentForDefaultOrderParamObjectMode: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
        {
          type: UniverseID
          name: ordercontrollableid
        }
        {
          type: bool
          name: planned
        }
        {
          type: size_t
          name: paramidx
        }
      ]
      declaration: bool FilterComponentForDefaultOrderParamObjectMode(UniverseID componentid, UniverseID ordercontrollableid, bool planned, size_t paramidx);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    FilterComponentForMapMode: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
        {
          type: const char**
          name: classes
        }
        {
          type: uint32_t
          name: numclasses
        }
        {
          type: int32_t
          name: playerowned
        }
        {
          type: bool
          name: allowentitydeliverymissionobject
        }
      ]
      declaration: bool FilterComponentForMapMode(UniverseID componentid, const char** classes, uint32_t numclasses, int32_t playerowned, bool allowentitydeliverymissionobject);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    FilterComponentForOrderParamObjectMode: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
        {
          type: UniverseID
          name: ordercontrollableid
        }
        {
          type: size_t
          name: orderidx
        }
        {
          type: size_t
          name: paramidx
        }
      ]
      declaration: bool FilterComponentForOrderParamObjectMode(UniverseID componentid, UniverseID ordercontrollableid, size_t orderidx, size_t paramidx);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    FilterFleetUnitByText: {
      returnType: bool
      parameters: [
        {
          type: FleetUnitID
          name: fleetunitid
        }
        {
          type: uint32_t
          name: numtexts
        }
        {
          type: const char**
          name: textarray
        }
      ]
      declaration: bool FilterFleetUnitByText(FleetUnitID fleetunitid, uint32_t numtexts, const char** textarray);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    FindMacro: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: macroname
        }
      ]
      declaration: bool FindMacro(const char* macroname);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    ForceBuildCompletion: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
      ]
      declaration: void ForceBuildCompletion(UniverseID containerid);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    ForceMouseCursorVisible: {
      returnType: void
      parameters: [
        {
          type: bool
          name: forced
        }
      ]
      declaration: void ForceMouseCursorVisible(bool forced);
      file: compass.lua
      detailed: ""
      notes: ""
    }
    FormatDateTimeString: {
      returnType: const char*
      parameters: [
        {
          type: int64_t
          name: time
        }
        {
          type: const char*
          name: uiformat
        }
      ]
      declaration: const char* FormatDateTimeString(int64_t time, const char* uiformat);
      file: chatwindow.lua
      detailed: ""
      notes: ""
    }
    GenerateFactionRelationText: {
      returnType: const char*
      parameters: [
        {
          type: const char*
          name: factionid
        }
      ]
      declaration: const char* GenerateFactionRelationText(const char* factionid);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    GenerateFactionRelationText2: {
      returnType: uint32_t
      parameters: [
        {
          type: TextEntry*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: factionid
        }
      ]
      declaration: uint32_t GenerateFactionRelationText2(TextEntry* result, uint32_t resultlen, const char* factionid);
      file: menu_diplomacy.lua
      detailed: ""
      notes: ""
    }
    GenerateFactionRelationTextFromRelation: {
      returnType: const char*
      parameters: [
        {
          type: int32_t
          name: uirelation
        }
      ]
      declaration: const char* GenerateFactionRelationTextFromRelation(int32_t uirelation);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GenerateModuleLoadout: {
      returnType: void
      parameters: [
        {
          type: UILoadout*
          name: result
        }
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: size_t
          name: cp_idx
        }
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: float
          name: level
        }
      ]
      declaration: void GenerateModuleLoadout(UILoadout* result, UniverseID holomapid, size_t cp_idx, UniverseID defensibleid, float level);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    GenerateModuleLoadoutCounts: {
      returnType: void
      parameters: [
        {
          type: UILoadoutCounts*
          name: result
        }
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: size_t
          name: cp_idx
        }
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: float
          name: level
        }
      ]
      declaration: void GenerateModuleLoadoutCounts(UILoadoutCounts* result, UniverseID holomapid, size_t cp_idx, UniverseID defensibleid, float level);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    GenerateShipKnownLoadout2: {
      returnType: void
      parameters: [
        {
          type: UILoadout2*
          name: result
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: float
          name: level
        }
      ]
      declaration: void GenerateShipKnownLoadout2(UILoadout2* result, const char* macroname, float level);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GenerateShipKnownLoadoutCounts2: {
      returnType: void
      parameters: [
        {
          type: UILoadoutCounts2*
          name: result
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: float
          name: level
        }
      ]
      declaration: void GenerateShipKnownLoadoutCounts2(UILoadoutCounts2* result, const char* macroname, float level);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GenerateShipLoadout2: {
      returnType: void
      parameters: [
        {
          type: UILoadout2*
          name: result
        }
        {
          type: UniverseID
          name: containerid
        }
        {
          type: UniverseID
          name: shipid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: float
          name: level
        }
      ]
      declaration: void GenerateShipLoadout2(UILoadout2* result, UniverseID containerid, UniverseID shipid, const char* macroname, float level);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GenerateShipLoadoutCounts2: {
      returnType: void
      parameters: [
        {
          type: UILoadoutCounts2*
          name: result
        }
        {
          type: UniverseID
          name: containerid
        }
        {
          type: UniverseID
          name: shipid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: float
          name: level
        }
      ]
      declaration: void GenerateShipLoadoutCounts2(UILoadoutCounts2* result, UniverseID containerid, UniverseID shipid, const char* macroname, float level);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetAAOption: {
      returnType: const char*
      parameters: [
        {
          type: bool
          name: useconfig
        }
      ]
      declaration: const char* GetAAOption(bool useconfig);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetAchievement: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: name
        }
      ]
      declaration: bool GetAchievement(const char* name);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetActiveHeadTrackerAngleFactor: {
      returnType: float
      parameters: []
      declaration: float GetActiveHeadTrackerAngleFactor(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetActiveHeadTrackerDeadzoneAngle: {
      returnType: float
      parameters: []
      declaration: float GetActiveHeadTrackerDeadzoneAngle(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetActiveHeadTrackerDeadzonePosition: {
      returnType: float
      parameters: []
      declaration: float GetActiveHeadTrackerDeadzonePosition(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetActiveHeadTrackerGazeAngleFactor: {
      returnType: float
      parameters: []
      declaration: float GetActiveHeadTrackerGazeAngleFactor(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetActiveHeadTrackerGazeDeadzone: {
      returnType: float
      parameters: []
      declaration: float GetActiveHeadTrackerGazeDeadzone(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetActiveHeadTrackerGazeFilterStrength: {
      returnType: size_t
      parameters: []
      declaration: size_t GetActiveHeadTrackerGazeFilterStrength(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetActiveHeadTrackerHeadFilterStrength: {
      returnType: size_t
      parameters: []
      declaration: size_t GetActiveHeadTrackerHeadFilterStrength(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetActiveHeadTrackerHeadPositionFactor: {
      returnType: float
      parameters: []
      declaration: float GetActiveHeadTrackerHeadPositionFactor(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetActiveHeadTrackerMode: {
      returnType: const char*
      parameters: []
      declaration: const char* GetActiveHeadTrackerMode();
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetActiveHeadTrackerName: {
      returnType: const char*
      parameters: []
      declaration: const char* GetActiveHeadTrackerName();
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetActiveMissionID: {
      returnType: uint64_t
      parameters: []
      declaration: uint64_t GetActiveMissionID();
      file: menu_help.lua
      detailed: ""
      notes: ""
    }
    GetActiveObjectiveType: {
      returnType: const char*
      parameters: []
      declaration: const char* GetActiveObjectiveType(void);
      file: menu_transporter.lua
      detailed: ""
      notes: ""
    }
    GetActivePrimaryWeaponGroup: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetActivePrimaryWeaponGroup();
      file: crosshair handling.lua
      detailed: ""
      notes: ""
    }
    GetActiveSecondaryWeaponGroup: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetActiveSecondaryWeaponGroup();
      file: crosshair handling.lua
      detailed: ""
      notes: ""
    }
    GetAdaptiveSamplingOption: {
      returnType: float
      parameters: []
      declaration: float GetAdaptiveSamplingOption(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetAimAssistState: {
      returnType: int32_t
      parameters: []
      declaration: int32_t GetAimAssistState(void);
      file: crosshair handling.lua
      detailed: ""
      notes: ""
    }
    GetAllBlacklists: {
      returnType: uint32_t
      parameters: [
        {
          type: BlacklistID*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetAllBlacklists(BlacklistID* result, uint32_t resultlen);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    GetAllBoardingBehaviours: {
      returnType: uint32_t
      parameters: [
        {
          type: BoardingBehaviour*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetAllBoardingBehaviours(BoardingBehaviour* result, uint32_t resultlen);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetAllBoardingPhases: {
      returnType: uint32_t
      parameters: [
        {
          type: BoardingPhase*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetAllBoardingPhases(BoardingPhase* result, uint32_t resultlen);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetAllColorMapColors: {
      returnType: uint32_t
      parameters: [
        {
          type: EditableColorMapEntry*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetAllColorMapColors(EditableColorMapEntry* result, uint32_t resultlen);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetAllColorMapEntries: {
      returnType: uint32_t
      parameters: [
        {
          type: ColorMapEntry*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetAllColorMapEntries(ColorMapEntry* result, uint32_t resultlen);
      file: compass.lua
      detailed: ""
      notes: ""
    }
    GetAllColorMapMappings: {
      returnType: uint32_t
      parameters: [
        {
          type: EditableColorMapEntry*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetAllColorMapMappings(EditableColorMapEntry* result, uint32_t resultlen);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetAllCommanders: {
      returnType: uint32_t
      parameters: [
        {
          type: CommanderInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: FleetUnitID
          name: fleetunitid
        }
      ]
      declaration: uint32_t GetAllCommanders(CommanderInfo* result, uint32_t resultlen, UniverseID controllableid, FleetUnitID fleetunitid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetAllControlPosts: {
      returnType: uint32_t
      parameters: [
        {
          type: ControlPostInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetAllControlPosts(ControlPostInfo* result, uint32_t resultlen);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetAllCountermeasures: {
      returnType: uint32_t
      parameters: [
        {
          type: AmmoData*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: defensibleid
        }
      ]
      declaration: uint32_t GetAllCountermeasures(AmmoData* result, uint32_t resultlen, UniverseID defensibleid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetAllEquipment: {
      returnType: uint32_t
      parameters: [
        {
          type: EquipmentWareInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: bool
          name: playerblueprint
        }
      ]
      declaration: uint32_t GetAllEquipment(EquipmentWareInfo* result, uint32_t resultlen, bool playerblueprint);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetAllEquipmentModProperties: {
      returnType: uint32_t
      parameters: [
        {
          type: EquipmentModPropertyInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: equipmentmodclass
        }
      ]
      declaration: uint32_t GetAllEquipmentModProperties(EquipmentModPropertyInfo* result, uint32_t resultlen, const char* equipmentmodclass);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    GetAllFactions: {
      returnType: uint32_t
      parameters: [
        {
          type: const char**
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: bool
          name: includehidden
        }
      ]
      declaration: uint32_t GetAllFactions(const char** result, uint32_t resultlen, bool includehidden);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    GetAllFactionShips: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: factionid
        }
      ]
      declaration: uint32_t GetAllFactionShips(UniverseID* result, uint32_t resultlen, const char* factionid);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    GetAllFactionStations: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: factionid
        }
      ]
      declaration: uint32_t GetAllFactionStations(UniverseID* result, uint32_t resultlen, const char* factionid);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    GetAllFightRules: {
      returnType: uint32_t
      parameters: [
        {
          type: FightRuleID*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetAllFightRules(FightRuleID* result, uint32_t resultlen);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    GetAllFleetUnits: {
      returnType: uint32_t
      parameters: [
        {
          type: FleetUnitID*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: controllableid
        }
      ]
      declaration: uint32_t GetAllFleetUnits(FleetUnitID* result, uint32_t resultlen, UniverseID controllableid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetAllFleetUnitSubordinates: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: FleetUnitID
          name: fleetunitid
        }
      ]
      declaration: uint32_t GetAllFleetUnitSubordinates(UniverseID* result, uint32_t resultlen, FleetUnitID fleetunitid);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    GetAllInputFeedback: {
      returnType: uint32_t
      parameters: [
        {
          type: InputFeedbackConfig*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetAllInputFeedback(InputFeedbackConfig* result, uint32_t resultlen);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetAllInventoryBombs: {
      returnType: uint32_t
      parameters: [
        {
          type: AmmoData*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: entityid
        }
      ]
      declaration: uint32_t GetAllInventoryBombs(AmmoData* result, uint32_t resultlen, UniverseID entityid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetAllLaserTowers: {
      returnType: uint32_t
      parameters: [
        {
          type: AmmoData*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: defensibleid
        }
      ]
      declaration: uint32_t GetAllLaserTowers(AmmoData* result, uint32_t resultlen, UniverseID defensibleid);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetAllMines: {
      returnType: uint32_t
      parameters: [
        {
          type: AmmoData*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: defensibleid
        }
      ]
      declaration: uint32_t GetAllMines(AmmoData* result, uint32_t resultlen, UniverseID defensibleid);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetAllMissiles: {
      returnType: uint32_t
      parameters: [
        {
          type: AmmoData*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: defensibleid
        }
      ]
      declaration: uint32_t GetAllMissiles(AmmoData* result, uint32_t resultlen, UniverseID defensibleid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetAllModuleSets: {
      returnType: uint32_t
      parameters: [
        {
          type: UIModuleSet*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetAllModuleSets(UIModuleSet* result, uint32_t resultlen);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetAllNavBeacons: {
      returnType: uint32_t
      parameters: [
        {
          type: AmmoData*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: defensibleid
        }
      ]
      declaration: uint32_t GetAllNavBeacons(AmmoData* result, uint32_t resultlen, UniverseID defensibleid);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetAllowedWeaponSystems: {
      returnType: uint32_t
      parameters: [
        {
          type: WeaponSystemInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: size_t
          name: orderidx
        }
        {
          type: bool
          name: usedefault
        }
      ]
      declaration: uint32_t GetAllowedWeaponSystems(WeaponSystemInfo* result, uint32_t resultlen, UniverseID defensibleid, size_t orderidx, bool usedefault);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetAllRaces: {
      returnType: uint32_t
      parameters: [
        {
          type: RaceInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetAllRaces(RaceInfo* result, uint32_t resultlen);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetAllResourceProbes: {
      returnType: uint32_t
      parameters: [
        {
          type: AmmoData*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: defensibleid
        }
      ]
      declaration: uint32_t GetAllResourceProbes(AmmoData* result, uint32_t resultlen, UniverseID defensibleid);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetAllResponsesToSignal: {
      returnType: uint32_t
      parameters: [
        {
          type: ResponseInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: signalid
        }
      ]
      declaration: uint32_t GetAllResponsesToSignal(ResponseInfo* result, uint32_t resultlen, const char* signalid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetAllRoles: {
      returnType: uint32_t
      parameters: [
        {
          type: PeopleInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetAllRoles(PeopleInfo* result, uint32_t resultlen);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetAllSatellites: {
      returnType: uint32_t
      parameters: [
        {
          type: AmmoData*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: defensibleid
        }
      ]
      declaration: uint32_t GetAllSatellites(AmmoData* result, uint32_t resultlen, UniverseID defensibleid);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetAllShipMacros2: {
      returnType: uint32_t
      parameters: [
        {
          type: const char**
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: bool
          name: playerblueprint
        }
        {
          type: bool
          name: customgamestart
        }
      ]
      declaration: uint32_t GetAllShipMacros2(const char** result, uint32_t resultlen, bool playerblueprint, bool customgamestart);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetAllSignals: {
      returnType: uint32_t
      parameters: [
        {
          type: SignalInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetAllSignals(SignalInfo* result, uint32_t resultlen);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetAllTradeRules: {
      returnType: uint32_t
      parameters: [
        {
          type: TradeRuleID*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetAllTradeRules(TradeRuleID* result, uint32_t resultlen);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    GetAllUnits: {
      returnType: uint32_t
      parameters: [
        {
          type: UnitData*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: bool
          name: onlydrones
        }
      ]
      declaration: uint32_t GetAllUnits(UnitData* result, uint32_t resultlen, UniverseID defensibleid, bool onlydrones);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetAllWareGroups: {
      returnType: uint32_t
      parameters: [
        {
          type: WareGroupInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetAllWareGroups(WareGroupInfo* result, uint32_t resultlen);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetAmmoStorage: {
      returnType: uint32_t
      parameters: [
        {
          type: AmmoData*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: const char*
          name: ammotype
        }
      ]
      declaration: uint32_t GetAmmoStorage(AmmoData* result, uint32_t resultlen, UniverseID defensibleid, const char* ammotype);
      file: menu_station_overview.lua
      detailed: ""
      notes: ""
    }
    GetAmountOfWareAvailable: {
      returnType: uint32_t
      parameters: [
        {
          type: const char*
          name: wareid
        }
        {
          type: UniverseID
          name: productionmoduleid
        }
      ]
      declaration: uint32_t GetAmountOfWareAvailable(const char* wareid, UniverseID productionmoduleid);
      file: menu_research.lua
      detailed: ""
      notes: ""
    }
    GetAskToSignalForControllable: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: signalid
        }
        {
          type: UniverseID
          name: controllableid
        }
      ]
      declaration: bool GetAskToSignalForControllable(const char* signalid, UniverseID controllableid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetAskToSignalForFaction: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: signalid
        }
        {
          type: const char*
          name: factionid
        }
      ]
      declaration: bool GetAskToSignalForFaction(const char* signalid, const char* factionid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetAssignedConstructionVessels: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: containerid
        }
      ]
      declaration: uint32_t GetAssignedConstructionVessels(UniverseID* result, uint32_t resultlen, UniverseID containerid);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    GetAttackersOfBoardingOperation: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: defensibletargetid
        }
        {
          type: const char*
          name: boarderfactionid
        }
      ]
      declaration: uint32_t GetAttackersOfBoardingOperation(UniverseID* result, uint32_t resultlen, UniverseID defensibletargetid, const char* boarderfactionid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetAutoRollState: {
      returnType: int32_t
      parameters: []
      declaration: int32_t GetAutoRollState(void);
      file: crosshair handling.lua
      detailed: ""
      notes: ""
    }
    GetAutosaveIntervalOption: {
      returnType: AutosaveIntervalInfo
      parameters: []
      declaration: AutosaveIntervalInfo GetAutosaveIntervalOption(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetAutoZoomResetOption: {
      returnType: bool
      parameters: []
      declaration: bool GetAutoZoomResetOption(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetAvailableClothingThemes: {
      returnType: uint32_t
      parameters: [
        {
          type: UIClothingTheme*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetAvailableClothingThemes(UIClothingTheme* result, uint32_t resultlen);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    GetAvailableCustomGameStarts: {
      returnType: uint32_t
      parameters: [
        {
          type: CustomGameStartInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: id
        }
      ]
      declaration: uint32_t GetAvailableCustomGameStarts(CustomGameStartInfo* result, uint32_t resultlen, const char* id);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetAvailableEquipment: {
      returnType: uint32_t
      parameters: [
        {
          type: EquipmentWareInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: containerid
        }
        {
          type: const char*
          name: classid
        }
      ]
      declaration: uint32_t GetAvailableEquipment(EquipmentWareInfo* result, uint32_t resultlen, UniverseID containerid, const char* classid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetAvailableEquipmentMods: {
      returnType: uint32_t
      parameters: [
        {
          type: UIEquipmentMod*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetAvailableEquipmentMods(UIEquipmentMod* result, uint32_t resultlen);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    GetAvailableLockboxes: {
      returnType: uint32_t
      parameters: [
        {
          type: const char**
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: entityid
        }
      ]
      declaration: uint32_t GetAvailableLockboxes(const char** result, uint32_t resultlen, UniverseID entityid);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    GetAvailablePaintThemes: {
      returnType: uint32_t
      parameters: [
        {
          type: UIPaintTheme*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetAvailablePaintThemes(UIPaintTheme* result, uint32_t resultlen);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    GetAveragePlayerNPCSkill: {
      returnType: float
      parameters: []
      declaration: float GetAveragePlayerNPCSkill(void);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    GetBlacklistInfo2: {
      returnType: bool
      parameters: [
        {
          type: BlacklistInfo2*
          name: info
        }
        {
          type: BlacklistID
          name: id
        }
      ]
      declaration: bool GetBlacklistInfo2(BlacklistInfo2* info, BlacklistID id);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    GetBlacklistInfoCounts: {
      returnType: BlacklistCounts
      parameters: [
        {
          type: BlacklistID
          name: id
        }
      ]
      declaration: BlacklistCounts GetBlacklistInfoCounts(BlacklistID id);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    GetBlueprints: {
      returnType: uint32_t
      parameters: [
        {
          type: UIBlueprint*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: set
        }
        {
          type: const char*
          name: category
        }
        {
          type: const char*
          name: macroname
        }
      ]
      declaration: uint32_t GetBlueprints(UIBlueprint* result, uint32_t resultlen, const char* set, const char* category, const char* macroname);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    GetBoardingActionOfAttacker: {
      returnType: const char*
      parameters: [
        {
          type: UniverseID
          name: defensibletargetid
        }
        {
          type: UniverseID
          name: defensibleboarderid
        }
        {
          type: const char*
          name: boarderfactionid
        }
      ]
      declaration: const char* GetBoardingActionOfAttacker(UniverseID defensibletargetid, UniverseID defensibleboarderid, const char* boarderfactionid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetBoardingCasualtiesOfTier: {
      returnType: uint32_t
      parameters: [
        {
          type: int32_t
          name: marinetierskilllevel
        }
        {
          type: UniverseID
          name: defensibletargetid
        }
        {
          type: const char*
          name: boarderfactionid
        }
      ]
      declaration: uint32_t GetBoardingCasualtiesOfTier(int32_t marinetierskilllevel, UniverseID defensibletargetid, const char* boarderfactionid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetBoardingMarineTierAmountsFromAttacker: {
      returnType: bool
      parameters: [
        {
          type: uint32_t*
          name: resultmarinetieramounts
        }
        {
          type: int32_t*
          name: inputmarinetierskilllevels
        }
        {
          type: uint32_t
          name: inputnummarinetiers
        }
        {
          type: UniverseID
          name: defensibletargetid
        }
        {
          type: UniverseID
          name: defensibleboarderid
        }
        {
          type: const char*
          name: boarderfactionid
        }
      ]
      declaration: bool GetBoardingMarineTierAmountsFromAttacker(uint32_t* resultmarinetieramounts, int32_t* inputmarinetierskilllevels, uint32_t inputnummarinetiers, UniverseID defensibletargetid, UniverseID defensibleboarderid, const char* boarderfactionid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetBoardingRiskThresholds: {
      returnType: BoardingRiskThresholds
      parameters: [
        {
          type: UniverseID
          name: defensibletargetid
        }
        {
          type: const char*
          name: boarderfactionid
        }
      ]
      declaration: BoardingRiskThresholds GetBoardingRiskThresholds(UniverseID defensibletargetid, const char* boarderfactionid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetBoardingStrengthFromOperation: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: defensibletargetid
        }
        {
          type: const char*
          name: boarderfactionid
        }
      ]
      declaration: uint32_t GetBoardingStrengthFromOperation(UniverseID defensibletargetid, const char* boarderfactionid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetBoardingStrengthOfControllableTierAmounts: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: uint32_t*
          name: marinetieramounts
        }
        {
          type: int32_t*
          name: marinetierskilllevels
        }
        {
          type: uint32_t
          name: nummarinetiers
        }
      ]
      declaration: uint32_t GetBoardingStrengthOfControllableTierAmounts(UniverseID controllableid, uint32_t* marinetieramounts, int32_t* marinetierskilllevels, uint32_t nummarinetiers);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetBoostEnergyPercentage: {
      returnType: float
      parameters: []
      declaration: float GetBoostEnergyPercentage(void);
      file: crosshair handling.lua
      detailed: ""
      notes: ""
    }
    GetBoxTextBoxColor: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: boxtextid
        }
        {
          type: Color*
          name: color
        }
      ]
      declaration: bool GetBoxTextBoxColor(const int boxtextid, Color* color);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetBoxTextInfo: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: boxtextid
        }
        {
          type: TextInfo*
          name: textinfo
        }
      ]
      declaration: bool GetBoxTextInfo(const int boxtextid, TextInfo* textinfo);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetBuildDuration: {
      returnType: double
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: UIBuildOrderList
          name: order
        }
      ]
      declaration: double GetBuildDuration(UniverseID containerid, UIBuildOrderList order);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetBuilderHiringFee: {
      returnType: int64_t
      parameters: []
      declaration: int64_t GetBuilderHiringFee(void);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetBuildMapConstructionPlan: {
      returnType: size_t
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: bool
          name: usestoredplan
        }
        {
          type: UIConstructionPlanEntry*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: size_t GetBuildMapConstructionPlan(UniverseID holomapid, UniverseID defensibleid, bool usestoredplan, UIConstructionPlanEntry* result, uint32_t resultlen);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    GetBuildMapStationLocation2: {
      returnType: UniverseID
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: UIPosRot*
          name: location
        }
      ]
      declaration: UniverseID GetBuildMapStationLocation2(UniverseID holomapid, UIPosRot* location);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetBuildModules: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: containerid
        }
      ]
      declaration: uint32_t GetBuildModules(UniverseID* result, uint32_t resultlen, UniverseID containerid);
      file: menu_station_overview.lua
      detailed: ""
      notes: ""
    }
    GetBuildPlotCenterOffset: {
      returnType: Coord3D
      parameters: [
        {
          type: UniverseID
          name: stationid
        }
      ]
      declaration: Coord3D GetBuildPlotCenterOffset(UniverseID stationid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetBuildPlotPayment: {
      returnType: int64_t
      parameters: [
        {
          type: UniverseID
          name: stationid
        }
        {
          type: bool*
          name: positionchanged
        }
      ]
      declaration: int64_t GetBuildPlotPayment(UniverseID stationid, bool* positionchanged);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetBuildPlotPrice: {
      returnType: int64_t
      parameters: [
        {
          type: UniverseID
          name: sectorid
        }
        {
          type: UIPosRot
          name: location
        }
        {
          type: float
          name: x
        }
        {
          type: float
          name: y
        }
        {
          type: float
          name: z
        }
        {
          type: const char*
          name: factionid
        }
      ]
      declaration: int64_t GetBuildPlotPrice(UniverseID sectorid, UIPosRot location, float x, float y, float z, const char* factionid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetBuildPlotSize: {
      returnType: Coord3D
      parameters: [
        {
          type: UniverseID
          name: stationid
        }
      ]
      declaration: Coord3D GetBuildPlotSize(UniverseID stationid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetBuildProcessorEstimatedTimeLeft: {
      returnType: double
      parameters: [
        {
          type: UniverseID
          name: buildprocessorid
        }
      ]
      declaration: double GetBuildProcessorEstimatedTimeLeft(UniverseID buildprocessorid);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetBuildResources: {
      returnType: uint32_t
      parameters: [
        {
          type: UIWareInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: containerid
        }
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: const char*
          name: wareid
        }
      ]
      declaration: uint32_t GetBuildResources(UIWareInfo* result, uint32_t resultlen, UniverseID containerid, UniverseID defensibleid, const char* macroname, const char* wareid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetBuildSequenceResources: {
      returnType: uint32_t
      parameters: [
        {
          type: UIWareInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetBuildSequenceResources(UIWareInfo* result, uint32_t resultlen);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    GetBuildTaskCrewTransferInfo2: {
      returnType: void
      parameters: [
        {
          type: CrewTransferInfo2*
          name: result
        }
        {
          type: UniverseID
          name: containerid
        }
        {
          type: BuildTaskID
          name: id
        }
      ]
      declaration: void GetBuildTaskCrewTransferInfo2(CrewTransferInfo2* result, UniverseID containerid, BuildTaskID id);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetBuildTaskDuration: {
      returnType: double
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: BuildTaskID
          name: id
        }
      ]
      declaration: double GetBuildTaskDuration(UniverseID containerid, BuildTaskID id);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetBuildTaskInfo: {
      returnType: BuildTaskInfo
      parameters: [
        {
          type: BuildTaskID
          name: id
        }
      ]
      declaration: BuildTaskInfo GetBuildTaskInfo(BuildTaskID id);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetBuildTasks: {
      returnType: uint32_t
      parameters: [
        {
          type: BuildTaskInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: containerid
        }
        {
          type: UniverseID
          name: buildmoduleid
        }
        {
          type: bool
          name: isinprogress
        }
        {
          type: bool
          name: includeupgrade
        }
      ]
      declaration: uint32_t GetBuildTasks(BuildTaskInfo* result, uint32_t resultlen, UniverseID containerid, UniverseID buildmoduleid, bool isinprogress, bool includeupgrade);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetBuildVersionSuffix: {
      returnType: const char*
      parameters: []
      declaration: const char* GetBuildVersionSuffix(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetBuildWarePrice: {
      returnType: int64_t
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: const char*
          name: warename
        }
      ]
      declaration: int64_t GetBuildWarePrice(UniverseID containerid, const char* warename);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetButtonColorGlowFactor: {
      returnType: float
      parameters: [
        {
          type: const int
          name: buttonid
        }
      ]
      declaration: float GetButtonColorGlowFactor(const int buttonid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetButtonHighlightColor: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: buttonid
        }
        {
          type: Color*
          name: color
        }
      ]
      declaration: bool GetButtonHighlightColor(const int buttonid, Color* color);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetButtonHighlightColorGlowFactor: {
      returnType: float
      parameters: [
        {
          type: const int
          name: buttonid
        }
      ]
      declaration: float GetButtonHighlightColorGlowFactor(const int buttonid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetButtonIcon2GlowFactor: {
      returnType: float
      parameters: [
        {
          type: const int
          name: buttonid
        }
      ]
      declaration: float GetButtonIcon2GlowFactor(const int buttonid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetButtonIconGlowFactor: {
      returnType: float
      parameters: [
        {
          type: const int
          name: buttonid
        }
      ]
      declaration: float GetButtonIconGlowFactor(const int buttonid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetButtonText2Details: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: buttonid
        }
        {
          type: TextInfo*
          name: textinfo
        }
      ]
      declaration: bool GetButtonText2Details(const int buttonid, TextInfo* textinfo);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetButtonTextGlowFactor: {
      returnType: float
      parameters: [
        {
          type: const int
          name: buttonid
        }
      ]
      declaration: float GetButtonTextGlowFactor(const int buttonid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetCameraRotation: {
      returnType: Rotation
      parameters: []
      declaration: Rotation GetCameraRotation();
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    GetCargo: {
      returnType: uint32_t
      parameters: [
        {
          type: UIWareInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: containerid
        }
        {
          type: const char*
          name: tags
        }
      ]
      declaration: uint32_t GetCargo(UIWareInfo* result, uint32_t resultlen, UniverseID containerid, const char* tags);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    GetCargoStatistics: {
      returnType: uint32_t
      parameters: [
        {
          type: UICargoStat*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: size_t
          name: numdatapoints
        }
      ]
      declaration: uint32_t GetCargoStatistics(UICargoStat* result, uint32_t resultlen, size_t numdatapoints);
      file: menu_station_overview.lua
      detailed: ""
      notes: ""
    }
    GetCargoTransportTypes: {
      returnType: uint32_t
      parameters: [
        {
          type: StorageInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: containerid
        }
        {
          type: bool
          name: merge
        }
        {
          type: bool
          name: aftertradeorders
        }
      ]
      declaration: uint32_t GetCargoTransportTypes(StorageInfo* result, uint32_t resultlen, UniverseID containerid, bool merge, bool aftertradeorders);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetCatalogMacros: {
      returnType: uint32_t
      parameters: [
        {
          type: const char**
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: classid
        }
      ]
      declaration: uint32_t GetCatalogMacros(const char** result, uint32_t resultlen, const char* classid);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetCatalogTemplates: {
      returnType: uint32_t
      parameters: [
        {
          type: const char**
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: classid
        }
      ]
      declaration: uint32_t GetCatalogTemplates(const char** result, uint32_t resultlen, const char* classid);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    GetCenteredMousePos: {
      returnType: Coord2D
      parameters: []
      declaration: Coord2D GetCenteredMousePos(void);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetChatAuthorColor2: {
      returnType: const char*
      parameters: [
        {
          type: const char*
          name: authorname
        }
      ]
      declaration: const char* GetChatAuthorColor2(const char* authorname);
      file: chatwindow.lua
      detailed: ""
      notes: ""
    }
    GetCheckBoxColor: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: checkboxid
        }
        {
          type: Color*
          name: color
        }
      ]
      declaration: bool GetCheckBoxColor(const int checkboxid, Color* color);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetCheckBoxGlowFactor: {
      returnType: float
      parameters: [
        {
          type: const int
          name: checkboxid
        }
      ]
      declaration: float GetCheckBoxGlowFactor(const int checkboxid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetCheckBoxSymbol: {
      returnType: const char*
      parameters: [
        {
          type: const int
          name: checkboxid
        }
      ]
      declaration: const char* GetCheckBoxSymbol(const int checkboxid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetCheckBoxSymbolGlowFactor: {
      returnType: float
      parameters: [
        {
          type: const int
          name: checkboxid
        }
      ]
      declaration: float GetCheckBoxSymbolGlowFactor(const int checkboxid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetCheckpointSequence: {
      returnType: int32_t
      parameters: [
        {
          type: UniverseID
          name: checkpointid
        }
      ]
      declaration: int32_t GetCheckpointSequence(UniverseID checkpointid);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    GetChromaticAberrationOption: {
      returnType: bool
      parameters: []
      declaration: bool GetChromaticAberrationOption(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetCloseOnUnhandledClickFrames: {
      returnType: uint32_t
      parameters: [
        {
          type: int*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetCloseOnUnhandledClickFrames(int* result, uint32_t resultlen);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetClusterBackground: {
      returnType: const char*
      parameters: [
        {
          type: UniverseID
          name: clusterid
        }
      ]
      declaration: const char* GetClusterBackground(UniverseID clusterid);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    GetCockpitCameraScaleOption: {
      returnType: float
      parameters: []
      declaration: float GetCockpitCameraScaleOption(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetCollisionAvoidanceState: {
      returnType: int32_t
      parameters: []
      declaration: int32_t GetCollisionAvoidanceState(void);
      file: crosshair handling.lua
      detailed: ""
      notes: ""
    }
    GetColorBlindOption: {
      returnType: const char*
      parameters: []
      declaration: const char* GetColorBlindOption(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetColorBlindOptionStrength: {
      returnType: float
      parameters: []
      declaration: float GetColorBlindOptionStrength(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetColorMapEntry: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: ColorMapEntry*
          name: result
        }
      ]
      declaration: bool GetColorMapEntry(const char* id, ColorMapEntry* result);
      file: debugline.lua
      detailed: ""
      notes: ""
    }
    GetColorProfiles: {
      returnType: uint32_t
      parameters: [
        {
          type: UIColorProfileInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetColorProfiles(UIColorProfileInfo* result, uint32_t resultlen);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetCommander: {
      returnType: CommanderInfo
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: FleetUnitID
          name: fleetunitid
        }
      ]
      declaration: CommanderInfo GetCommander(UniverseID controllableid, FleetUnitID fleetunitid);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    GetCommonContext: {
      returnType: UniverseID
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
        {
          type: UniverseID
          name: othercomponentid
        }
        {
          type: bool
          name: includeself
        }
        {
          type: bool
          name: includeother
        }
        {
          type: UniverseID
          name: limitid
        }
        {
          type: bool
          name: includelimit
        }
      ]
      declaration: UniverseID GetCommonContext(UniverseID componentid, UniverseID othercomponentid, bool includeself, bool includeother, UniverseID limitid, bool includelimit);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetCompassMenuMappings: {
      returnType: uint32_t
      parameters: [
        {
          type: CompassMenuEntry*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: uisource
        }
      ]
      declaration: uint32_t GetCompassMenuMappings(CompassMenuEntry* result, uint32_t resultlen, const char* uisource);
      file: compass.lua
      detailed: ""
      notes: ""
    }
    GetComponentClass: {
      returnType: const char*
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
      ]
      declaration: const char* GetComponentClass(UniverseID componentid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetComponentDetails: {
      returnType: ComponentDetails
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
        {
          type: const char*const
          name: connectionname
        }
      ]
      declaration: ComponentDetails GetComponentDetails(const UniverseID componentid, const char*const connectionname);
      file: targetmonitor.lua
      detailed: ""
      notes: ""
    }
    GetComponentHUDIcon: {
      returnType: const char*
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
      ]
      declaration: const char* GetComponentHUDIcon(const UniverseID componentid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    GetComponentIcon: {
      returnType: const char*
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
      ]
      declaration: const char* GetComponentIcon(const UniverseID componentid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    GetComponentName: {
      returnType: const char*
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
      ]
      declaration: const char* GetComponentName(UniverseID componentid);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetComponentOffset: {
      returnType: PosRot
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
      ]
      declaration: PosRot GetComponentOffset(const UniverseID componentid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    GetComponentScreenPosition: {
      returnType: ScreenPos
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
        {
          type: const uint32_t
          name: iconsizeonscreen
        }
        {
          type: const uint32_t
          name: iconsizeoffscreen
        }
      ]
      declaration: ScreenPos GetComponentScreenPosition(const UniverseID componentid, const uint32_t iconsizeonscreen, const uint32_t iconsizeoffscreen);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    GetCompSlotControlPosition: {
      returnType: const char*
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
        {
          type: const char*
          name: connectionname
        }
      ]
      declaration: const char* GetCompSlotControlPosition(UniverseID componentid, const char* connectionname);
      file: targetmonitor.lua
      detailed: ""
      notes: ""
    }
    GetCompSlotPlayerActions: {
      returnType: uint32_t
      parameters: [
        {
          type: UIAction*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UIComponentSlot
          name: compslot
        }
      ]
      declaration: uint32_t GetCompSlotPlayerActions(UIAction* result, uint32_t resultlen, UIComponentSlot compslot);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    GetCompSlotPlayerActionTriggeredConnection: {
      returnType: const char*
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
        {
          type: const char*
          name: connectionname
        }
      ]
      declaration: const char* GetCompSlotPlayerActionTriggeredConnection(UniverseID componentid, const char* connectionname);
      file: targetmonitor.lua
      detailed: ""
      notes: ""
    }
    GetCompSlotScreenPos: {
      returnType: Coord2D
      parameters: [
        {
          type: UIComponentSlot
          name: compslot
        }
      ]
      declaration: Coord2D GetCompSlotScreenPos(UIComponentSlot compslot);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    GetConfigSetting: {
      returnType: int
      parameters: [
        {
          type: const char*const
          name: setting
        }
      ]
      declaration: int GetConfigSetting(const char*const setting);
      file: debuglog.lua
      detailed: ""
      notes: ""
    }
    GetConfiguredModifierKeys: {
      returnType: uint32_t
      parameters: [
        {
          type: InputData*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: uimodifier
        }
      ]
      declaration: uint32_t GetConfiguredModifierKeys(InputData* result, uint32_t resultlen, const char* uimodifier);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetConstructionMapItemLoadout2: {
      returnType: void
      parameters: [
        {
          type: UILoadout*
          name: result
        }
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: size_t
          name: itemidx
        }
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: UniverseID
          name: moduleid
        }
      ]
      declaration: void GetConstructionMapItemLoadout2(UILoadout* result, UniverseID holomapid, size_t itemidx, UniverseID defensibleid, UniverseID moduleid);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    GetConstructionMapItemLoadoutCounts2: {
      returnType: void
      parameters: [
        {
          type: UILoadoutCounts*
          name: result
        }
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: size_t
          name: itemidx
        }
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: UniverseID
          name: moduleid
        }
      ]
      declaration: void GetConstructionMapItemLoadoutCounts2(UILoadoutCounts* result, UniverseID holomapid, size_t itemidx, UniverseID defensibleid, UniverseID moduleid);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    GetConstructionMapVenturePlatform: {
      returnType: size_t
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: size_t
          name: venturedockidx
        }
      ]
      declaration: size_t GetConstructionMapVenturePlatform(UniverseID holomapid, size_t venturedockidx);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    GetConstructionPlanInfo: {
      returnType: size_t
      parameters: [
        {
          type: UIConstructionPlanEntry*
          name: result
        }
        {
          type: size_t
          name: resultlen
        }
        {
          type: const char*
          name: constructionplanid
        }
      ]
      declaration: size_t GetConstructionPlanInfo(UIConstructionPlanEntry* result, size_t resultlen, const char* constructionplanid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetConstructionPlanInvalidPatches: {
      returnType: uint32_t
      parameters: [
        {
          type: InvalidPatchInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: constructionplanid
        }
      ]
      declaration: uint32_t GetConstructionPlanInvalidPatches(InvalidPatchInfo* result, uint32_t resultlen, const char* constructionplanid);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    GetConstructionPlans: {
      returnType: uint32_t
      parameters: [
        {
          type: UIConstructionPlan*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetConstructionPlans(UIConstructionPlan* result, uint32_t resultlen);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    GetContainerBuilderMacros: {
      returnType: uint32_t
      parameters: [
        {
          type: const char**
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: containerid
        }
      ]
      declaration: uint32_t GetContainerBuilderMacros(const char** result, uint32_t resultlen, UniverseID containerid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetContainerBuildMethod: {
      returnType: const char*
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
      ]
      declaration: const char* GetContainerBuildMethod(UniverseID containerid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetContainerBuildPriceFactor: {
      returnType: float
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
      ]
      declaration: float GetContainerBuildPriceFactor(UniverseID containerid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetContainerBuildResources: {
      returnType: uint32_t
      parameters: [
        {
          type: const char**
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: containerid
        }
      ]
      declaration: uint32_t GetContainerBuildResources(const char** result, uint32_t resultlen, UniverseID containerid);
      file: menu_station_overview.lua
      detailed: ""
      notes: ""
    }
    GetContainerBuyLimit: {
      returnType: int32_t
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: const char*
          name: wareid
        }
      ]
      declaration: int32_t GetContainerBuyLimit(UniverseID containerid, const char* wareid);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    GetContainerCriticalWares: {
      returnType: uint32_t
      parameters: [
        {
          type: const char**
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: containerid
        }
      ]
      declaration: uint32_t GetContainerCriticalWares(const char** result, uint32_t resultlen, UniverseID containerid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetContainerGlobalPriceFactor: {
      returnType: float
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
      ]
      declaration: float GetContainerGlobalPriceFactor(UniverseID containerid);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    GetContainerSellLimit: {
      returnType: int32_t
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: const char*
          name: wareid
        }
      ]
      declaration: int32_t GetContainerSellLimit(UniverseID containerid, const char* wareid);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    GetContainerStockLimitOverrides: {
      returnType: uint32_t
      parameters: [
        {
          type: UIWareInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: containerid
        }
      ]
      declaration: uint32_t GetContainerStockLimitOverrides(UIWareInfo* result, uint32_t resultlen, UniverseID containerid);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    GetContainerTradeRuleID: {
      returnType: TradeRuleID
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: const char*
          name: ruletype
        }
        {
          type: const char*
          name: wareid
        }
      ]
      declaration: TradeRuleID GetContainerTradeRuleID(UniverseID containerid, const char* ruletype, const char* wareid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetContainerWareConsumption: {
      returnType: double
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: const char*
          name: wareid
        }
        {
          type: bool
          name: ignorestate
        }
      ]
      declaration: double GetContainerWareConsumption(UniverseID containerid, const char* wareid, bool ignorestate);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    GetContainerWareConsumptionPerProduct: {
      returnType: double
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: const char*
          name: wareid
        }
        {
          type: const char*
          name: productid
        }
        {
          type: bool
          name: ignorestate
        }
      ]
      declaration: double GetContainerWareConsumptionPerProduct(UniverseID containerid, const char* wareid, const char* productid, bool ignorestate);
      file: menu_station_overview.lua
      detailed: ""
      notes: ""
    }
    GetContainerWareIsBuyable: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: const char*
          name: wareid
        }
      ]
      declaration: bool GetContainerWareIsBuyable(UniverseID containerid, const char* wareid);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    GetContainerWareIsSellable: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: const char*
          name: wareid
        }
      ]
      declaration: bool GetContainerWareIsSellable(UniverseID containerid, const char* wareid);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    GetContainerWareMaxProductionStorageForTime: {
      returnType: int32_t
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: const char*
          name: wareid
        }
        {
          type: double
          name: duration
        }
        {
          type: bool
          name: ignoreoverrides
        }
      ]
      declaration: int32_t GetContainerWareMaxProductionStorageForTime(UniverseID containerid, const char* wareid, double duration, bool ignoreoverrides);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    GetContainerWareProduction: {
      returnType: double
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: const char*
          name: wareid
        }
        {
          type: bool
          name: ignorestate
        }
      ]
      declaration: double GetContainerWareProduction(UniverseID containerid, const char* wareid, bool ignorestate);
      file: menu_station_overview.lua
      detailed: ""
      notes: ""
    }
    GetContainerWareReservations2: {
      returnType: uint32_t
      parameters: [
        {
          type: WareReservationInfo2*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: containerid
        }
        {
          type: bool
          name: includevirtual
        }
        {
          type: bool
          name: includemission
        }
        {
          type: bool
          name: includesupply
        }
      ]
      declaration: uint32_t GetContainerWareReservations2(WareReservationInfo2* result, uint32_t resultlen, UniverseID containerid, bool includevirtual, bool includemission, bool includesupply);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetContainerWorkforceInfluence: {
      returnType: void
      parameters: [
        {
          type: WorkforceInfluenceInfo*
          name: result
        }
        {
          type: UniverseID
          name: containerid
        }
        {
          type: const char*
          name: raceid
        }
      ]
      declaration: void GetContainerWorkforceInfluence(WorkforceInfluenceInfo* result, UniverseID containerid, const char* raceid);
      file: menu_station_overview.lua
      detailed: ""
      notes: ""
    }
    GetContextByClass: {
      returnType: UniverseID
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
        {
          type: const char*
          name: classname
        }
        {
          type: bool
          name: includeself
        }
      ]
      declaration: UniverseID GetContextByClass(UniverseID componentid, const char* classname, bool includeself);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetContextByRealClass: {
      returnType: UniverseID
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
        {
          type: const char*
          name: classname
        }
        {
          type: bool
          name: includeself
        }
      ]
      declaration: UniverseID GetContextByRealClass(UniverseID componentid, const char* classname, bool includeself);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetContextForTransporterCheck: {
      returnType: UniverseID
      parameters: [
        {
          type: UniverseID
          name: positionalid
        }
      ]
      declaration: UniverseID GetContextForTransporterCheck(UniverseID positionalid);
      file: menu_transporter.lua
      detailed: ""
      notes: ""
    }
    GetControllableBlacklistID: {
      returnType: BlacklistID
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: const char*
          name: listtype
        }
        {
          type: const char*
          name: defaultgroup
        }
      ]
      declaration: BlacklistID GetControllableBlacklistID(UniverseID controllableid, const char* listtype, const char* defaultgroup);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetControllableFightRuleID: {
      returnType: FightRuleID
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: const char*
          name: listtype
        }
      ]
      declaration: FightRuleID GetControllableFightRuleID(UniverseID controllableid, const char* listtype);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetControllableSubordinateFleetUnits: {
      returnType: uint32_t
      parameters: [
        {
          type: FleetUnitID*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: int
          name: subordinategroupid
        }
      ]
      declaration: uint32_t GetControllableSubordinateFleetUnits(FleetUnitID* result, uint32_t resultlen, UniverseID controllableid, int subordinategroupid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetControlPanelInfo: {
      returnType: ControlPanelInfo
      parameters: [
        {
          type: UIComponentSlot
          name: controlpanel
        }
      ]
      declaration: ControlPanelInfo GetControlPanelInfo(UIComponentSlot controlpanel);
      file: targetmonitor.lua
      detailed: ""
      notes: ""
    }
    GetControlPanelName: {
      returnType: const char*
      parameters: [
        {
          type: UIComponentSlot
          name: controlpanel
        }
      ]
      declaration: const char* GetControlPanelName(UIComponentSlot controlpanel);
      file: menu_userquestion.lua
      detailed: ""
      notes: ""
    }
    GetControlPanelRequiredWares: {
      returnType: uint32_t
      parameters: [
        {
          type: UIWareInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UIComponentSlot
          name: controlpanel
        }
      ]
      declaration: uint32_t GetControlPanelRequiredWares(UIWareInfo* result, uint32_t resultlen, UIComponentSlot controlpanel);
      file: targetmonitor.lua
      detailed: ""
      notes: ""
    }
    GetCreditsDueFromPlayerBuilds: {
      returnType: int64_t
      parameters: []
      declaration: int64_t GetCreditsDueFromPlayerBuilds(void);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    GetCreditsDueFromPlayerTrades: {
      returnType: int64_t
      parameters: []
      declaration: int64_t GetCreditsDueFromPlayerTrades(void);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    GetCrosshairArrowDetails: {
      returnType: ArrowDetails
      parameters: [
        {
          type: int
          name: posid
        }
        {
          type: float
          name: radius
        }
      ]
      declaration: ArrowDetails GetCrosshairArrowDetails(int posid, float radius);
      file: crosshair handling.lua
      detailed: ""
      notes: ""
    }
    GetCrosshairPlatformGuidanceDetails: {
      returnType: ArrowDetails
      parameters: [
        {
          type: const float
          name: radius
        }
      ]
      declaration: ArrowDetails GetCrosshairPlatformGuidanceDetails(const float radius);
      file: firstperson_crosshair.lua
      detailed: ""
      notes: ""
    }
    GetCurrentAmmoOfWeapon: {
      returnType: const char*
      parameters: [
        {
          type: UniverseID
          name: weaponid
        }
      ]
      declaration: const char* GetCurrentAmmoOfWeapon(UniverseID weaponid);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetCurrentBoardingPhase: {
      returnType: const char*
      parameters: [
        {
          type: UniverseID
          name: defensibletargetid
        }
        {
          type: const char*
          name: boarderfactionid
        }
      ]
      declaration: const char* GetCurrentBoardingPhase(UniverseID defensibletargetid, const char* boarderfactionid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetCurrentBuildProgress: {
      returnType: float
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
      ]
      declaration: float GetCurrentBuildProgress(UniverseID containerid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetCurrentCrosshairMessage: {
      returnType: CrosshairMessage
      parameters: []
      declaration: CrosshairMessage GetCurrentCrosshairMessage();
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    GetCurrentCursorInfo: {
      returnType: CursorInfo
      parameters: []
      declaration: CursorInfo GetCurrentCursorInfo();
      file: dialogmenu.lua
      detailed: ""
      notes: ""
    }
    GetCurrentDroneMode: {
      returnType: const char*
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: const char*
          name: dronetype
        }
      ]
      declaration: const char* GetCurrentDroneMode(UniverseID defensibleid, const char* dronetype);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetCurrentFleetLogo: {
      returnType: UILogo
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
      ]
      declaration: UILogo GetCurrentFleetLogo(UniverseID controllableid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetCurrentGameTime: {
      returnType: double
      parameters: []
      declaration: double GetCurrentGameTime(void);
      file: menu_crafting.lua
      detailed: ""
      notes: ""
    }
    GetCurrentLanguage: {
      returnType: int32_t
      parameters: []
      declaration: int32_t GetCurrentLanguage(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetCurrentLoadout: {
      returnType: void
      parameters: [
        {
          type: UILoadout*
          name: result
        }
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: UniverseID
          name: moduleid
        }
      ]
      declaration: void GetCurrentLoadout(UILoadout* result, UniverseID defensibleid, UniverseID moduleid);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    GetCurrentLoadoutCounts: {
      returnType: void
      parameters: [
        {
          type: UILoadoutCounts*
          name: result
        }
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: UniverseID
          name: moduleid
        }
      ]
      declaration: void GetCurrentLoadoutCounts(UILoadoutCounts* result, UniverseID defensibleid, UniverseID moduleid);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    GetCurrentLoadoutStatistics5: {
      returnType: UILoadoutStatistics5
      parameters: [
        {
          type: UniverseID
          name: shipid
        }
      ]
      declaration: UILoadoutStatistics5 GetCurrentLoadoutStatistics5(UniverseID shipid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetCurrentMissionOffers: {
      returnType: uint32_t
      parameters: [
        {
          type: uint64_t*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: bool
          name: showninbbs
        }
      ]
      declaration: uint32_t GetCurrentMissionOffers(uint64_t* result, uint32_t resultlen, bool showninbbs);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetCurrentPlayerLogo: {
      returnType: UILogo
      parameters: []
      declaration: UILogo GetCurrentPlayerLogo(void);
      file: menu_diplomacy.lua
      detailed: ""
      notes: ""
    }
    GetCurrentSoundDevice: {
      returnType: const char*
      parameters: []
      declaration: const char* GetCurrentSoundDevice(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetCurrentTargetMouseButtonMapping: {
      returnType: const char*
      parameters: [
        {
          type: int32_t
          name: mousebuttonid
        }
        {
          type: const char*
          name: modifiers
        }
        {
          type: bool
          name: onclick
        }
      ]
      declaration: const char* GetCurrentTargetMouseButtonMapping(int32_t mousebuttonid, const char* modifiers, bool onclick);
      file: monitors.lua
      detailed: ""
      notes: ""
    }
    GetCurrentUTCDataTime: {
      returnType: int64_t
      parameters: []
      declaration: int64_t GetCurrentUTCDataTime(void);
      file: chatwindow.lua
      detailed: ""
      notes: ""
    }
    GetCurrentVentureInfo: {
      returnType: UIVentureInfo
      parameters: [
        {
          type: UniverseID
          name: ventureplatformid
        }
      ]
      declaration: UIVentureInfo GetCurrentVentureInfo(UniverseID ventureplatformid);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    GetCurrentVentureShips: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: ventureplatformid
        }
      ]
      declaration: uint32_t GetCurrentVentureShips(UniverseID* result, uint32_t resultlen, UniverseID ventureplatformid);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartBlueprintDefaultProperty: {
      returnType: uint32_t
      parameters: [
        {
          type: CustomGameStartBlueprint*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
      ]
      declaration: uint32_t GetCustomGameStartBlueprintDefaultProperty(CustomGameStartBlueprint* result, uint32_t resultlen, const char* id, const char* propertyid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartBlueprintProperty: {
      returnType: uint32_t
      parameters: [
        {
          type: CustomGameStartBlueprint*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
      ]
      declaration: uint32_t GetCustomGameStartBlueprintProperty(CustomGameStartBlueprint* result, uint32_t resultlen, const char* id, const char* propertyid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartBlueprintPropertyState: {
      returnType: CustomGameStartBlueprintPropertyState
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
      ]
      declaration: CustomGameStartBlueprintPropertyState GetCustomGameStartBlueprintPropertyState(const char* id, const char* propertyid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartBoolProperty: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
        {
          type: CustomGameStartBoolPropertyState*
          name: state
        }
      ]
      declaration: bool GetCustomGameStartBoolProperty(const char* id, const char* propertyid, CustomGameStartBoolPropertyState* state);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartBudget: {
      returnType: CustomGameStartBudgetInfo
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: budgetid
        }
      ]
      declaration: CustomGameStartBudgetInfo GetCustomGameStartBudget(const char* id, const char* budgetid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartBudgetDetails: {
      returnType: uint32_t
      parameters: [
        {
          type: CustomGameStartBudgetDetail*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: budgetid
        }
      ]
      declaration: uint32_t GetCustomGameStartBudgetDetails(CustomGameStartBudgetDetail* result, uint32_t resultlen, const char* id, const char* budgetid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartBudgetGroupInfo: {
      returnType: CustomGameStartBudgetGroupInfo
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: budgetgroupid
        }
      ]
      declaration: CustomGameStartBudgetGroupInfo GetCustomGameStartBudgetGroupInfo(const char* id, const char* budgetgroupid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartBudgetGroups: {
      returnType: uint32_t
      parameters: [
        {
          type: const char**
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: id
        }
      ]
      declaration: uint32_t GetCustomGameStartBudgetGroups(const char** result, uint32_t resultlen, const char* id);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartContent2: {
      returnType: void
      parameters: [
        {
          type: CustomGameStartContentData2*
          name: result
        }
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: filename
        }
        {
          type: const char*
          name: gamestartid
        }
      ]
      declaration: void GetCustomGameStartContent2(CustomGameStartContentData2* result, const char* id, const char* filename, const char* gamestartid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartContentCounts2: {
      returnType: CustomGameStartContentCounts
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: filename
        }
        {
          type: const char*
          name: gamestartid
        }
      ]
      declaration: CustomGameStartContentCounts GetCustomGameStartContentCounts2(const char* id, const char* filename, const char* gamestartid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartEncyclopediaProperty: {
      returnType: uint32_t
      parameters: [
        {
          type: CustomGameStartEncyclopediaEntry*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
      ]
      declaration: uint32_t GetCustomGameStartEncyclopediaProperty(CustomGameStartEncyclopediaEntry* result, uint32_t resultlen, const char* id, const char* propertyid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartEncyclopediaPropertyCounts: {
      returnType: uint32_t
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
      ]
      declaration: uint32_t GetCustomGameStartEncyclopediaPropertyCounts(const char* id, const char* propertyid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartEncyclopediaPropertyState: {
      returnType: CustomGameStartEncyclopediaPropertyState
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
      ]
      declaration: CustomGameStartEncyclopediaPropertyState GetCustomGameStartEncyclopediaPropertyState(const char* id, const char* propertyid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartFloatProperty: {
      returnType: float
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
        {
          type: CustomGameStartFloatPropertyState*
          name: state
        }
      ]
      declaration: float GetCustomGameStartFloatProperty(const char* id, const char* propertyid, CustomGameStartFloatPropertyState* state);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartInventoryDefaultProperty: {
      returnType: uint32_t
      parameters: [
        {
          type: CustomGameStartInventory*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
      ]
      declaration: uint32_t GetCustomGameStartInventoryDefaultProperty(CustomGameStartInventory* result, uint32_t resultlen, const char* id, const char* propertyid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartInventoryProperty: {
      returnType: uint32_t
      parameters: [
        {
          type: CustomGameStartInventory*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
      ]
      declaration: uint32_t GetCustomGameStartInventoryProperty(CustomGameStartInventory* result, uint32_t resultlen, const char* id, const char* propertyid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartInventoryPropertyState: {
      returnType: CustomGameStartInventoryPropertyState
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
      ]
      declaration: CustomGameStartInventoryPropertyState GetCustomGameStartInventoryPropertyState(const char* id, const char* propertyid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartKnownDefaultProperty2: {
      returnType: uint32_t
      parameters: [
        {
          type: CustomGameStartKnownEntry2*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
      ]
      declaration: uint32_t GetCustomGameStartKnownDefaultProperty2(CustomGameStartKnownEntry2* result, uint32_t resultlen, const char* id, const char* propertyid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartKnownProperty2: {
      returnType: uint32_t
      parameters: [
        {
          type: CustomGameStartKnownEntry2*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
      ]
      declaration: uint32_t GetCustomGameStartKnownProperty2(CustomGameStartKnownEntry2* result, uint32_t resultlen, const char* id, const char* propertyid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartKnownPropertyBudgetValue2: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
        {
          type: CustomGameStartKnownEntry2*
          name: uivalue
        }
      ]
      declaration: bool GetCustomGameStartKnownPropertyBudgetValue2(const char* id, const char* propertyid, CustomGameStartKnownEntry2* uivalue);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartKnownPropertyNumStateDependencies: {
      returnType: uint32_t
      parameters: [
        {
          type: uint32_t*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
        {
          type: CustomGameStartKnownEntry2
          name: uivalue
        }
      ]
      declaration: uint32_t GetCustomGameStartKnownPropertyNumStateDependencies(uint32_t* result, uint32_t resultlen, const char* id, const char* propertyid, CustomGameStartKnownEntry2 uivalue);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartKnownPropertyNumStateDependencyLists: {
      returnType: uint32_t
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
        {
          type: CustomGameStartKnownEntry2
          name: uivalue
        }
      ]
      declaration: uint32_t GetCustomGameStartKnownPropertyNumStateDependencyLists(const char* id, const char* propertyid, CustomGameStartKnownEntry2 uivalue);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartKnownPropertyState: {
      returnType: CustomGameStartKnownPropertyState
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
      ]
      declaration: CustomGameStartKnownPropertyState GetCustomGameStartKnownPropertyState(const char* id, const char* propertyid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartKnownPropertyStateDependencies: {
      returnType: uint32_t
      parameters: [
        {
          type: const char**
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
        {
          type: CustomGameStartKnownEntry2
          name: uivalue
        }
      ]
      declaration: uint32_t GetCustomGameStartKnownPropertyStateDependencies(const char** result, uint32_t resultlen, const char* id, const char* propertyid, CustomGameStartKnownEntry2 uivalue);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartLoadoutProperty2: {
      returnType: void
      parameters: [
        {
          type: UILoadout2*
          name: result
        }
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
      ]
      declaration: void GetCustomGameStartLoadoutProperty2(UILoadout2* result, const char* id, const char* propertyid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartLoadoutPropertyCounts2: {
      returnType: void
      parameters: [
        {
          type: UILoadoutCounts2*
          name: result
        }
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
      ]
      declaration: void GetCustomGameStartLoadoutPropertyCounts2(UILoadoutCounts2* result, const char* id, const char* propertyid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartLoadoutPropertyState: {
      returnType: CustomGameStartLoadoutPropertyState
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
      ]
      declaration: CustomGameStartLoadoutPropertyState GetCustomGameStartLoadoutPropertyState(const char* id, const char* propertyid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartMoneyProperty: {
      returnType: int64_t
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
        {
          type: CustomGameStartMoneyPropertyState*
          name: state
        }
      ]
      declaration: int64_t GetCustomGameStartMoneyProperty(const char* id, const char* propertyid, CustomGameStartMoneyPropertyState* state);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartPaintThemes: {
      returnType: uint32_t
      parameters: [
        {
          type: UIPaintTheme*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: id
        }
      ]
      declaration: uint32_t GetCustomGameStartPaintThemes(UIPaintTheme* result, uint32_t resultlen, const char* id);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartPlayerPropertyCounts: {
      returnType: uint32_t
      parameters: [
        {
          type: CustomGameStartPlayerPropertyCounts*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
      ]
      declaration: uint32_t GetCustomGameStartPlayerPropertyCounts(CustomGameStartPlayerPropertyCounts* result, uint32_t resultlen, const char* id, const char* propertyid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartPlayerPropertyLoadout: {
      returnType: void
      parameters: [
        {
          type: UILoadout2*
          name: result
        }
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
        {
          type: const char*
          name: entryid
        }
      ]
      declaration: void GetCustomGameStartPlayerPropertyLoadout(UILoadout2* result, const char* id, const char* propertyid, const char* entryid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartPlayerPropertyLoadoutCounts: {
      returnType: void
      parameters: [
        {
          type: UILoadoutCounts2*
          name: result
        }
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
        {
          type: const char*
          name: entryid
        }
      ]
      declaration: void GetCustomGameStartPlayerPropertyLoadoutCounts(UILoadoutCounts2* result, const char* id, const char* propertyid, const char* entryid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartPlayerPropertyPeopleValue: {
      returnType: int64_t
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
        {
          type: const char*
          name: entryid
        }
      ]
      declaration: int64_t GetCustomGameStartPlayerPropertyPeopleValue(const char* id, const char* propertyid, const char* entryid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartPlayerPropertyPerson: {
      returnType: bool
      parameters: [
        {
          type: CustomGameStartPersonEntry*
          name: result
        }
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
        {
          type: const char*
          name: entryid
        }
      ]
      declaration: bool GetCustomGameStartPlayerPropertyPerson(CustomGameStartPersonEntry* result, const char* id, const char* propertyid, const char* entryid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartPlayerPropertyProperty3: {
      returnType: uint32_t
      parameters: [
        {
          type: CustomGameStartPlayerProperty3*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
      ]
      declaration: uint32_t GetCustomGameStartPlayerPropertyProperty3(CustomGameStartPlayerProperty3* result, uint32_t resultlen, const char* id, const char* propertyid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartPlayerPropertyPropertyState: {
      returnType: CustomGameStartPlayerPropertyPropertyState
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
      ]
      declaration: CustomGameStartPlayerPropertyPropertyState GetCustomGameStartPlayerPropertyPropertyState(const char* id, const char* propertyid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartPlayerPropertySector: {
      returnType: const char*
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
        {
          type: const char*
          name: entryid
        }
      ]
      declaration: const char* GetCustomGameStartPlayerPropertySector(const char* id, const char* propertyid, const char* entryid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartPlayerPropertyValue: {
      returnType: int64_t
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
        {
          type: const char*
          name: entryid
        }
      ]
      declaration: int64_t GetCustomGameStartPlayerPropertyValue(const char* id, const char* propertyid, const char* entryid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartPosRotProperty: {
      returnType: UIPosRot
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
        {
          type: CustomGameStartPosRotPropertyState*
          name: state
        }
      ]
      declaration: UIPosRot GetCustomGameStartPosRotProperty(const char* id, const char* propertyid, CustomGameStartPosRotPropertyState* state);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartRelationsProperty: {
      returnType: uint32_t
      parameters: [
        {
          type: CustomGameStartRelationInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
      ]
      declaration: uint32_t GetCustomGameStartRelationsProperty(CustomGameStartRelationInfo* result, uint32_t resultlen, const char* id, const char* propertyid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartRelationsPropertyBudgetValue: {
      returnType: int64_t
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
        {
          type: CustomGameStartRelationInfo
          name: uivalue
        }
      ]
      declaration: int64_t GetCustomGameStartRelationsPropertyBudgetValue(const char* id, const char* propertyid, CustomGameStartRelationInfo uivalue);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartRelationsPropertyCounts: {
      returnType: uint32_t
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
      ]
      declaration: uint32_t GetCustomGameStartRelationsPropertyCounts(const char* id, const char* propertyid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartRelationsPropertyState: {
      returnType: CustomGameStartRelationsPropertyState
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
      ]
      declaration: CustomGameStartRelationsPropertyState GetCustomGameStartRelationsPropertyState(const char* id, const char* propertyid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartResearchProperty: {
      returnType: uint32_t
      parameters: [
        {
          type: const char**
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
      ]
      declaration: uint32_t GetCustomGameStartResearchProperty(const char** result, uint32_t resultlen, const char* id, const char* propertyid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartResearchPropertyCounts: {
      returnType: uint32_t
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
      ]
      declaration: uint32_t GetCustomGameStartResearchPropertyCounts(const char* id, const char* propertyid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartResearchPropertyState: {
      returnType: CustomGameStartResearchPropertyState
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
      ]
      declaration: CustomGameStartResearchPropertyState GetCustomGameStartResearchPropertyState(const char* id, const char* propertyid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartShipPeopleValue2: {
      returnType: int64_t
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: const char*
          name: peopledefid
        }
        {
          type: float
          name: peoplefillpercentage
        }
      ]
      declaration: int64_t GetCustomGameStartShipPeopleValue2(const char* id, const char* macroname, const char* peopledefid, float peoplefillpercentage);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartShipPersonValue: {
      returnType: int64_t
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: CustomGameStartPersonEntry
          name: uivalue
        }
      ]
      declaration: int64_t GetCustomGameStartShipPersonValue(const char* id, CustomGameStartPersonEntry uivalue);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartShipPilot: {
      returnType: bool
      parameters: [
        {
          type: CustomGameStartPersonEntry*
          name: result
        }
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
      ]
      declaration: bool GetCustomGameStartShipPilot(CustomGameStartPersonEntry* result, const char* id, const char* propertyid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartStoryBudgetDependencies: {
      returnType: uint32_t
      parameters: [
        {
          type: const char**
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: storyid
        }
      ]
      declaration: uint32_t GetCustomGameStartStoryBudgetDependencies(const char** result, uint32_t resultlen, const char* id, const char* storyid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartStoryBudgets: {
      returnType: uint32_t
      parameters: [
        {
          type: CustomGameStartStoryInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: id
        }
      ]
      declaration: uint32_t GetCustomGameStartStoryBudgets(CustomGameStartStoryInfo* result, uint32_t resultlen, const char* id);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartStoryDefaultProperty: {
      returnType: uint32_t
      parameters: [
        {
          type: const char**
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
      ]
      declaration: uint32_t GetCustomGameStartStoryDefaultProperty(const char** result, uint32_t resultlen, const char* id, const char* propertyid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartStoryProperty: {
      returnType: uint32_t
      parameters: [
        {
          type: const char**
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
      ]
      declaration: uint32_t GetCustomGameStartStoryProperty(const char** result, uint32_t resultlen, const char* id, const char* propertyid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartStoryPropertyState: {
      returnType: CustomGameStartStoryState
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
      ]
      declaration: CustomGameStartStoryState GetCustomGameStartStoryPropertyState(const char* id, const char* propertyid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetCustomGameStartStringProperty: {
      returnType: const char*
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
        {
          type: CustomGameStartStringPropertyState*
          name: state
        }
      ]
      declaration: const char* GetCustomGameStartStringProperty(const char* id, const char* propertyid, CustomGameStartStringPropertyState* state);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetDamagedSubComponents: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: objectid
        }
      ]
      declaration: uint32_t GetDamagedSubComponents(UniverseID* result, uint32_t resultlen, UniverseID objectid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetDefaultCountermeasureStorageCapacity: {
      returnType: uint32_t
      parameters: [
        {
          type: const char*
          name: macroname
        }
      ]
      declaration: uint32_t GetDefaultCountermeasureStorageCapacity(const char* macroname);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetDefaultLoadoutMacros: {
      returnType: uint32_t
      parameters: [
        {
          type: const char**
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: macroname
        }
      ]
      declaration: uint32_t GetDefaultLoadoutMacros(const char** result, uint32_t resultlen, const char* macroname);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetDefaultMissileStorageCapacity: {
      returnType: uint32_t
      parameters: [
        {
          type: const char*
          name: macroname
        }
      ]
      declaration: uint32_t GetDefaultMissileStorageCapacity(const char* macroname);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    GetDefaultOrder: {
      returnType: bool
      parameters: [
        {
          type: Order*
          name: result
        }
        {
          type: UniverseID
          name: controllableid
        }
      ]
      declaration: bool GetDefaultOrder(Order* result, UniverseID controllableid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetDefaultOrderFailure: {
      returnType: bool
      parameters: [
        {
          type: OrderFailure*
          name: result
        }
        {
          type: UniverseID
          name: controllableid
        }
      ]
      declaration: bool GetDefaultOrderFailure(OrderFailure* result, UniverseID controllableid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetDefaultPlayerBuildMethod: {
      returnType: const char*
      parameters: []
      declaration: const char* GetDefaultPlayerBuildMethod(void);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    GetDefaultResponseToSignalForControllable: {
      returnType: const char*
      parameters: [
        {
          type: const char*
          name: signalid
        }
        {
          type: UniverseID
          name: controllableid
        }
      ]
      declaration: const char* GetDefaultResponseToSignalForControllable(const char* signalid, UniverseID controllableid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetDefaultResponseToSignalForFaction2: {
      returnType: const char*
      parameters: [
        {
          type: const char*
          name: signalid
        }
        {
          type: const char*
          name: factionid
        }
        {
          type: const char*
          name: purposeid
        }
      ]
      declaration: const char* GetDefaultResponseToSignalForFaction2(const char* signalid, const char* factionid, const char* purposeid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetDefensibleActiveWeaponGroup: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: bool
          name: primary
        }
      ]
      declaration: uint32_t GetDefensibleActiveWeaponGroup(UniverseID defensibleid, bool primary);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetDefensibleDeployableCapacity: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
      ]
      declaration: uint32_t GetDefensibleDeployableCapacity(UniverseID defensibleid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetDefensibleDPS: {
      returnType: uint32_t
      parameters: [
        {
          type: DPSData*
          name: result
        }
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: bool
          name: primary
        }
        {
          type: bool
          name: secondary
        }
        {
          type: bool
          name: lasers
        }
        {
          type: bool
          name: missiles
        }
        {
          type: bool
          name: turrets
        }
        {
          type: bool
          name: includeheat
        }
        {
          type: bool
          name: includeinactive
        }
      ]
      declaration: uint32_t GetDefensibleDPS(DPSData* result, UniverseID defensibleid, bool primary, bool secondary, bool lasers, bool missiles, bool turrets, bool includeheat, bool includeinactive);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetDefensibleLoadoutLevel: {
      returnType: float
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
      ]
      declaration: float GetDefensibleLoadoutLevel(UniverseID defensibleid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetDefensibleWeaponFireRange: {
      returnType: float
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: bool
          name: primary
        }
        {
          type: bool
          name: secondary
        }
        {
          type: bool
          name: lasers
        }
        {
          type: bool
          name: missiles
        }
        {
          type: bool
          name: turrets
        }
        {
          type: bool
          name: includeinactive
        }
      ]
      declaration: float GetDefensibleWeaponFireRange(UniverseID defensibleid, bool primary, bool secondary, bool lasers, bool missiles, bool turrets, bool includeinactive);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetDetailmonitorCutsceneKey: {
      returnType: const char*
      parameters: [
        {
          type: uint32_t
          name: cutsceneid
        }
      ]
      declaration: const char* GetDetailmonitorCutsceneKey(uint32_t cutsceneid);
      file: movie.lua
      detailed: ""
      notes: ""
    }
    GetDiplomacyActions: {
      returnType: uint32_t
      parameters: [
        {
          type: DiplomacyActionInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetDiplomacyActions(DiplomacyActionInfo* result, uint32_t resultlen);
      file: menu_diplomacy.lua
      detailed: ""
      notes: ""
    }
    GetDiscoveredSectorResources: {
      returnType: uint32_t
      parameters: [
        {
          type: WareYield*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: sectorid
        }
      ]
      declaration: uint32_t GetDiscoveredSectorResources(WareYield* result, uint32_t resultlen, UniverseID sectorid);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    GetDisplayedModifierKey: {
      returnType: const char*
      parameters: [
        {
          type: const char*
          name: uimodifier
        }
      ]
      declaration: const char* GetDisplayedModifierKey(const char* uimodifier);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetDistanceBetween: {
      returnType: float
      parameters: [
        {
          type: UniverseID
          name: component1id
        }
        {
          type: UniverseID
          name: component2id
        }
      ]
      declaration: float GetDistanceBetween(UniverseID component1id, UniverseID component2id);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    GetDLSSAutoMode: {
      returnType: const char*
      parameters: []
      declaration: const char* GetDLSSAutoMode(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetDLSSModeOption: {
      returnType: const char*
      parameters: [
        {
          type: bool
          name: useconfig
        }
      ]
      declaration: const char* GetDLSSModeOption(bool useconfig);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetDLSSOption: {
      returnType: bool
      parameters: [
        {
          type: bool
          name: useconfig
        }
      ]
      declaration: bool GetDLSSOption(bool useconfig);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetDockedShips: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: dockingbayorcontainerid
        }
        {
          type: const char*
          name: factionid
        }
      ]
      declaration: uint32_t GetDockedShips(UniverseID* result, uint32_t resultlen, UniverseID dockingbayorcontainerid, const char* factionid);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetDroneDetails: {
      returnType: DroneState
      parameters: [
        {
          type: const uint32_t
          name: dronetype
        }
      ]
      declaration: DroneState GetDroneDetails(const uint32_t dronetype);
      file: crosshair handling.lua
      detailed: ""
      notes: ""
    }
    GetDroneModes: {
      returnType: uint32_t
      parameters: [
        {
          type: DroneModeInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: const char*
          name: dronetype
        }
      ]
      declaration: uint32_t GetDroneModes(DroneModeInfo* result, uint32_t resultlen, UniverseID defensibleid, const char* dronetype);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetDropDownColor: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: dropdownid
        }
        {
          type: Color*
          name: color
        }
      ]
      declaration: bool GetDropDownColor(const int dropdownid, Color* color);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetDropDownGlowFactor: {
      returnType: float
      parameters: [
        {
          type: const int
          name: dropdownid
        }
      ]
      declaration: float GetDropDownGlowFactor(const int dropdownid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetDropDownHighlightColor: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: dropdownid
        }
        {
          type: Color*
          name: color
        }
      ]
      declaration: bool GetDropDownHighlightColor(const int dropdownid, Color* color);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetDropDownHighlightGlowFactor: {
      returnType: float
      parameters: [
        {
          type: const int
          name: dropdownid
        }
      ]
      declaration: float GetDropDownHighlightGlowFactor(const int dropdownid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetDropDownHotkeyDetails: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: dropdownid
        }
        {
          type: HotkeyInfo*
          name: hotkeyinfo
        }
      ]
      declaration: bool GetDropDownHotkeyDetails(const int dropdownid, HotkeyInfo* hotkeyinfo);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetDropDownIconDetails: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: dropdownid
        }
        {
          type: DropDownIconInfo*
          name: iconinfo
        }
      ]
      declaration: bool GetDropDownIconDetails(const int dropdownid, DropDownIconInfo* iconinfo);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetDropDownOptionColor: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: dropdownid
        }
        {
          type: Color*
          name: color
        }
      ]
      declaration: bool GetDropDownOptionColor(const int dropdownid, Color* color);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetDropDownOptionGlowFactor: {
      returnType: float
      parameters: [
        {
          type: const int
          name: dropdownid
        }
      ]
      declaration: float GetDropDownOptionGlowFactor(const int dropdownid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetDropDownOptionHeight: {
      returnType: uint32_t
      parameters: [
        {
          type: const int
          name: dropdownid
        }
      ]
      declaration: uint32_t GetDropDownOptionHeight(const int dropdownid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetDropDownOptionOverlayInfo: {
      returnType: uint32_t
      parameters: [
        {
          type: UIOverlayInfo2*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const int
          name: dropdownid
        }
      ]
      declaration: uint32_t GetDropDownOptionOverlayInfo(UIOverlayInfo2* result, uint32_t resultlen, const int dropdownid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetDropDownOptions2: {
      returnType: uint32_t
      parameters: [
        {
          type: DropDownOption2*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const int
          name: dropdownid
        }
      ]
      declaration: uint32_t GetDropDownOptions2(DropDownOption2* result, uint32_t resultlen, const int dropdownid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetDropDownOptionWidth: {
      returnType: uint32_t
      parameters: [
        {
          type: const int
          name: dropdownid
        }
      ]
      declaration: uint32_t GetDropDownOptionWidth(const int dropdownid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetDropDownStartOption: {
      returnType: const char*
      parameters: [
        {
          type: const int
          name: dropdownid
        }
      ]
      declaration: const char* GetDropDownStartOption(const int dropdownid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetDropDownText2Details: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: dropdownid
        }
        {
          type: DropDownTextInfo*
          name: textinfo
        }
      ]
      declaration: bool GetDropDownText2Details(const int dropdownid, DropDownTextInfo* textinfo);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetDropDownTextDetails: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: dropdownid
        }
        {
          type: DropDownTextInfo*
          name: textinfo
        }
      ]
      declaration: bool GetDropDownTextDetails(const int dropdownid, DropDownTextInfo* textinfo);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetEditBoxDefaultText: {
      returnType: const char*
      parameters: [
        {
          type: const int
          name: editboxid
        }
      ]
      declaration: const char* GetEditBoxDefaultText(const int editboxid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetEditBoxDescription: {
      returnType: const char*
      parameters: [
        {
          type: const int
          name: editboxid
        }
      ]
      declaration: const char* GetEditBoxDescription(const int editboxid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetEditBoxGlowFactor: {
      returnType: float
      parameters: [
        {
          type: const int
          name: editboxid
        }
      ]
      declaration: float GetEditBoxGlowFactor(const int editboxid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetEditBoxMaxChars: {
      returnType: uint32_t
      parameters: [
        {
          type: const int
          name: editboxid
        }
      ]
      declaration: uint32_t GetEditBoxMaxChars(const int editboxid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetEditBoxTextGlowFactor: {
      returnType: float
      parameters: [
        {
          type: const int
          name: editboxid
        }
      ]
      declaration: float GetEditBoxTextGlowFactor(const int editboxid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetEditBoxTextOffsetX: {
      returnType: uint32_t
      parameters: [
        {
          type: const int
          name: editboxid
        }
      ]
      declaration: uint32_t GetEditBoxTextOffsetX(const int editboxid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetEditBoxTextOffsetY: {
      returnType: int32_t
      parameters: [
        {
          type: const int
          name: editboxid
        }
      ]
      declaration: int32_t GetEditBoxTextOffsetY(const int editboxid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetEmergencyEjectOption: {
      returnType: bool
      parameters: []
      declaration: bool GetEmergencyEjectOption(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetEnemyWarningAttackSound: {
      returnType: const char*
      parameters: []
      declaration: const char* GetEnemyWarningAttackSound(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetEnemyWarningNearbySound: {
      returnType: const char*
      parameters: []
      declaration: const char* GetEnemyWarningNearbySound(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetEntityActiveIcon: {
      returnType: const char*
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
      ]
      declaration: const char* GetEntityActiveIcon(const UniverseID componentid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    GetEntityCombinedSkill: {
      returnType: int32_t
      parameters: [
        {
          type: UniverseID
          name: entityid
        }
        {
          type: const char*
          name: role
        }
        {
          type: const char*
          name: postid
        }
      ]
      declaration: int32_t GetEntityCombinedSkill(UniverseID entityid, const char* role, const char* postid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetEntityInactiveIcon: {
      returnType: const char*
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
      ]
      declaration: const char* GetEntityInactiveIcon(const UniverseID componentid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    GetEntitySelectedIcon: {
      returnType: const char*
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
      ]
      declaration: const char* GetEntitySelectedIcon(const UniverseID componentid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    GetEntitySkillsForAssignment: {
      returnType: uint32_t
      parameters: [
        {
          type: Skill2*
          name: result
        }
        {
          type: UniverseID
          name: entityid
        }
        {
          type: const char*
          name: role
        }
        {
          type: const char*
          name: postid
        }
      ]
      declaration: uint32_t GetEntitySkillsForAssignment(Skill2* result, UniverseID entityid, const char* role, const char* postid);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    GetEnvironmentObject: {
      returnType: UniverseID
      parameters: []
      declaration: UniverseID GetEnvironmentObject();
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetEnvMapProbeInsideGlassFadeOption: {
      returnType: float
      parameters: []
      declaration: float GetEnvMapProbeInsideGlassFadeOption(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetEnvMapProbeOption: {
      returnType: const char*
      parameters: []
      declaration: const char* GetEnvMapProbeOption(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetEquipmentModInfo: {
      returnType: EquipmentModInfo
      parameters: [
        {
          type: const char*
          name: wareid
        }
      ]
      declaration: EquipmentModInfo GetEquipmentModInfo(const char* wareid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetEquipmentModPropertyName: {
      returnType: const char*
      parameters: [
        {
          type: const char*
          name: wareid
        }
      ]
      declaration: const char* GetEquipmentModPropertyName(const char* wareid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetEstimatedBuildPrice: {
      returnType: int64_t
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: const char*
          name: macroname
        }
      ]
      declaration: int64_t GetEstimatedBuildPrice(UniverseID containerid, const char* macroname);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    GetExtensionName: {
      returnType: const char*
      parameters: [
        {
          type: uint32_t
          name: extensionidx
        }
      ]
      declaration: const char* GetExtensionName(uint32_t extensionidx);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetExtensionVersion: {
      returnType: const char*
      parameters: [
        {
          type: const char*
          name: extensionid
        }
        {
          type: bool
          name: personal
        }
      ]
      declaration: const char* GetExtensionVersion(const char* extensionid, bool personal);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetExternalTargetViewComponent: {
      returnType: UniverseID
      parameters: []
      declaration: UniverseID GetExternalTargetViewComponent();
      file: monitors.lua
      detailed: ""
      notes: ""
    }
    GetExternalViewRefObject: {
      returnType: UniverseID
      parameters: []
      declaration: UniverseID GetExternalViewRefObject(void);
      file: menu_followcamera.lua
      detailed: ""
      notes: ""
    }
    GetFactionDefaultWeaponMode: {
      returnType: const char*
      parameters: [
        {
          type: const char*
          name: factionid
        }
      ]
      declaration: const char* GetFactionDefaultWeaponMode(const char* factionid);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    GetFactionDetails: {
      returnType: FactionDetails
      parameters: [
        {
          type: const char*
          name: factionid
        }
      ]
      declaration: FactionDetails GetFactionDetails(const char* factionid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetFactionNameForTargetMonitorHack: {
      returnType: const char*
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
      ]
      declaration: const char* GetFactionNameForTargetMonitorHack(UniverseID componentid);
      file: monitors.lua
      detailed: ""
      notes: ""
    }
    GetFactionRelationStatus2: {
      returnType: RelationDetails
      parameters: [
        {
          type: const char*
          name: factionid
        }
      ]
      declaration: RelationDetails GetFactionRelationStatus2(const char* factionid);
      file: monitors.lua
      detailed: ""
      notes: ""
    }
    GetFactionRepresentative: {
      returnType: UniverseID
      parameters: [
        {
          type: const char*
          name: factionid
        }
      ]
      declaration: UniverseID GetFactionRepresentative(const char* factionid);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    GetFightRuleInfo: {
      returnType: bool
      parameters: [
        {
          type: FightRuleInfo*
          name: info
        }
        {
          type: FightRuleID
          name: id
        }
      ]
      declaration: bool GetFightRuleInfo(FightRuleInfo* info, FightRuleID id);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    GetFightRuleInfoCounts: {
      returnType: FightRuleCounts
      parameters: [
        {
          type: FightRuleID
          name: id
        }
      ]
      declaration: FightRuleCounts GetFightRuleInfoCounts(FightRuleID id);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    GetFixedStations: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: spaceid
        }
      ]
      declaration: uint32_t GetFixedStations(UniverseID* result, uint32_t resultlen, UniverseID spaceid);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    GetFleetLead: {
      returnType: UniverseID
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: FleetUnitID
          name: fleetunitid
        }
      ]
      declaration: UniverseID GetFleetLead(UniverseID controllableid, FleetUnitID fleetunitid);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    GetFleetName: {
      returnType: const char*
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
      ]
      declaration: const char* GetFleetName(UniverseID controllableid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetFleetUnit: {
      returnType: FleetUnitID
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
      ]
      declaration: FleetUnitID GetFleetUnit(UniverseID controllableid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetFleetUnitBuildIssues: {
      returnType: const char*
      parameters: [
        {
          type: FleetUnitID
          name: fleetunitid
        }
      ]
      declaration: const char* GetFleetUnitBuildIssues(FleetUnitID fleetunitid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetFleetUnitFirstCommanderComponent: {
      returnType: UniverseID
      parameters: [
        {
          type: FleetUnitID
          name: fleetunitid
        }
      ]
      declaration: UniverseID GetFleetUnitFirstCommanderComponent(FleetUnitID fleetunitid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetFleetUnitFleetName: {
      returnType: const char*
      parameters: [
        {
          type: FleetUnitID
          name: fleetunitid
        }
      ]
      declaration: const char* GetFleetUnitFleetName(FleetUnitID fleetunitid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetFleetUnitInfo: {
      returnType: FleetUnitInfo
      parameters: [
        {
          type: FleetUnitID
          name: fleetunitid
        }
      ]
      declaration: FleetUnitInfo GetFleetUnitInfo(FleetUnitID fleetunitid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetFleetUnitProblematicEquipmentWares: {
      returnType: uint32_t
      parameters: [
        {
          type: const char**
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: FleetUnitID
          name: fleetunitid
        }
      ]
      declaration: uint32_t GetFleetUnitProblematicEquipmentWares(const char** result, uint32_t resultlen, FleetUnitID fleetunitid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetFleetUnitSubordinateFleetUnits: {
      returnType: uint32_t
      parameters: [
        {
          type: FleetUnitID*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: FleetUnitID
          name: fleetunitid
        }
        {
          type: int
          name: subordinategroupid
        }
      ]
      declaration: uint32_t GetFleetUnitSubordinateFleetUnits(FleetUnitID* result, uint32_t resultlen, FleetUnitID fleetunitid, int subordinategroupid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetFleetUnitSubordinateGroup: {
      returnType: int32_t
      parameters: [
        {
          type: FleetUnitID
          name: fleetunitid
        }
      ]
      declaration: int32_t GetFleetUnitSubordinateGroup(FleetUnitID fleetunitid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetFleetUnitSubordinateGroupAssignment: {
      returnType: const char*
      parameters: [
        {
          type: FleetUnitID
          name: fleetunitid
        }
        {
          type: int32_t
          name: group
        }
      ]
      declaration: const char* GetFleetUnitSubordinateGroupAssignment(FleetUnitID fleetunitid, int32_t group);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetFleetUnitSubordinates: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: FleetUnitID
          name: fleetunitid
        }
        {
          type: int32_t
          name: subordinategroupid
        }
      ]
      declaration: uint32_t GetFleetUnitSubordinates(UniverseID* result, uint32_t resultlen, FleetUnitID fleetunitid, int32_t subordinategroupid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetFollowCameraBasePos: {
      returnType: Coord3D
      parameters: []
      declaration: Coord3D GetFollowCameraBasePos(void);
      file: menu_followcamera.lua
      detailed: ""
      notes: ""
    }
    GetFontStringGlowFactor: {
      returnType: float
      parameters: [
        {
          type: const int
          name: fontstringid
        }
      ]
      declaration: float GetFontStringGlowFactor(const int fontstringid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetFontStringTitleColor: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: fontstringid
        }
        {
          type: Color*
          name: color
        }
      ]
      declaration: bool GetFontStringTitleColor(const int fontstringid, Color* color);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetFontStringTitleGlowFactor: {
      returnType: float
      parameters: [
        {
          type: const int
          name: fontstringid
        }
      ]
      declaration: float GetFontStringTitleGlowFactor(const int fontstringid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetForceShootingAtCursorOption: {
      returnType: bool
      parameters: []
      declaration: bool GetForceShootingAtCursorOption(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetFormationShapes: {
      returnType: uint32_t
      parameters: [
        {
          type: UIFormationInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetFormationShapes(UIFormationInfo* result, uint32_t resultlen);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetFPS: {
      returnType: FPSDetails
      parameters: []
      declaration: FPSDetails GetFPS();
      file: debuglog.lua
      detailed: ""
      notes: ""
    }
    GetFrameBackground2Info: {
      returnType: UIFrameTextureInfo
      parameters: [
        {
          type: const int
          name: frameid
        }
      ]
      declaration: UIFrameTextureInfo GetFrameBackground2Info(const int frameid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetFrameBackgroundInfo: {
      returnType: UIFrameTextureInfo
      parameters: [
        {
          type: const int
          name: frameid
        }
      ]
      declaration: UIFrameTextureInfo GetFrameBackgroundInfo(const int frameid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetFrameOverlayInfo: {
      returnType: UIFrameTextureInfo
      parameters: [
        {
          type: const int
          name: frameid
        }
      ]
      declaration: UIFrameTextureInfo GetFrameOverlayInfo(const int frameid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetFreeCountermeasureStorageAfterTradeOrders: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
      ]
      declaration: uint32_t GetFreeCountermeasureStorageAfterTradeOrders(UniverseID defensibleid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetFreeDeployableStorageAfterTradeOrders: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
      ]
      declaration: uint32_t GetFreeDeployableStorageAfterTradeOrders(UniverseID defensibleid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetFreeMissileStorageAfterTradeOrders: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
      ]
      declaration: uint32_t GetFreeMissileStorageAfterTradeOrders(UniverseID defensibleid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetFreePeopleCapacity: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
      ]
      declaration: uint32_t GetFreePeopleCapacity(UniverseID controllableid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetGameResolution: {
      returnType: ResolutionInfo
      parameters: []
      declaration: ResolutionInfo GetGameResolution(void);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetGameStartDate: {
      returnType: GameStartDateInfo
      parameters: []
      declaration: GameStartDateInfo GetGameStartDate();
      file: helper.lua
      detailed: ""
      notes: ""
    }
    GetGameStartGroups: {
      returnType: uint32_t
      parameters: [
        {
          type: GameStartGroupInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetGameStartGroups(GameStartGroupInfo* result, uint32_t resultlen);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetGameStartName: {
      returnType: const char*
      parameters: []
      declaration: const char* GetGameStartName();
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetGameStartUIName: {
      returnType: const char*
      parameters: []
      declaration: const char* GetGameStartUIName();
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetGameVersion: {
      returnType: GameVersion
      parameters: []
      declaration: GameVersion GetGameVersion();
      file: debuglog.lua
      detailed: ""
      notes: ""
    }
    GetGlobalLightScale: {
      returnType: float
      parameters: []
      declaration: float GetGlobalLightScale(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetGPUNiceName: {
      returnType: const char*
      parameters: [
        {
          type: uint32_t
          name: idx
        }
      ]
      declaration: const char* GetGPUNiceName(uint32_t idx);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetGraphBackgroundColor: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: graphid
        }
        {
          type: Color*
          name: color
        }
      ]
      declaration: bool GetGraphBackgroundColor(const int graphid, Color* color);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetGraphData2: {
      returnType: uint32_t
      parameters: [
        {
          type: GraphDataPoint2*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const int
          name: graphid
        }
        {
          type: const size_t
          name: datarecordidx
        }
      ]
      declaration: uint32_t GetGraphData2(GraphDataPoint2* result, uint32_t resultlen, const int graphid, const size_t datarecordidx);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetGraphDataRecords: {
      returnType: uint32_t
      parameters: [
        {
          type: GraphDataRecord*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: int
          name: graphid
        }
      ]
      declaration: uint32_t GetGraphDataRecords(GraphDataRecord* result, uint32_t resultlen, int graphid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetGraphIcons: {
      returnType: uint32_t
      parameters: [
        {
          type: GraphIcon*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: int
          name: graphid
        }
      ]
      declaration: uint32_t GetGraphIcons(GraphIcon* result, uint32_t resultlen, int graphid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetGraphTitle: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: graphid
        }
        {
          type: GraphTextInfo*
          name: title
        }
      ]
      declaration: bool GetGraphTitle(const int graphid, GraphTextInfo* title);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetGraphType: {
      returnType: uint32_t
      parameters: [
        {
          type: const int
          name: graphid
        }
      ]
      declaration: uint32_t GetGraphType(const int graphid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetGraphXAxis: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: graphid
        }
        {
          type: GraphAxisInfo*
          name: axis
        }
      ]
      declaration: bool GetGraphXAxis(const int graphid, GraphAxisInfo* axis);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetGraphYAxis: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: graphid
        }
        {
          type: GraphAxisInfo*
          name: axis
        }
      ]
      declaration: bool GetGraphYAxis(const int graphid, GraphAxisInfo* axis);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetGroupOfFleetUnitSubordinate: {
      returnType: int32_t
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: FleetUnitID
          name: fleetunitid
        }
      ]
      declaration: int32_t GetGroupOfFleetUnitSubordinate(UniverseID controllableid, FleetUnitID fleetunitid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetHelpOverlayInfo2: {
      returnType: UIOverlayInfo2
      parameters: [
        {
          type: const int
          name: widgetid
        }
      ]
      declaration: UIOverlayInfo2 GetHelpOverlayInfo2(const int widgetid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetHighestEquipmentModQuality: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
      ]
      declaration: uint32_t GetHighestEquipmentModQuality(UniverseID defensibleid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetHighwaySplinePoints: {
      returnType: uint32_t
      parameters: [
        {
          type: SplineData*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: highwayid
        }
      ]
      declaration: uint32_t GetHighwaySplinePoints(SplineData* result, uint32_t resultlen, UniverseID highwayid);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    GetHQs: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: factionid
        }
      ]
      declaration: uint32_t GetHQs(UniverseID* result, uint32_t resultlen, const char* factionid);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    GetHUDScaleOption: {
      returnType: const char*
      parameters: []
      declaration: const char* GetHUDScaleOption(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetHUDSeparateRadar: {
      returnType: bool
      parameters: []
      declaration: bool GetHUDSeparateRadar(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetHUDUIScale: {
      returnType: float
      parameters: [
        {
          type: const bool
          name: scalewithresolution
        }
      ]
      declaration: float GetHUDUIScale(const bool scalewithresolution);
      file: targetmonitor.lua
      detailed: ""
      notes: ""
    }
    GetIconGlowFactor: {
      returnType: float
      parameters: [
        {
          type: const int
          name: iconid
        }
      ]
      declaration: float GetIconGlowFactor(const int iconid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetIcons: {
      returnType: uint32_t
      parameters: [
        {
          type: const char**
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: tags
        }
      ]
      declaration: uint32_t GetIcons(const char** result, uint32_t resultlen, const char* tags);
      file: loading.lua
      detailed: ""
      notes: ""
    }
    GetIconText2Details: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: iconid
        }
        {
          type: TextInfo*
          name: textinfo
        }
      ]
      declaration: bool GetIconText2Details(const int iconid, TextInfo* textinfo);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetIconTextDetails: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: iconid
        }
        {
          type: TextInfo*
          name: textinfo
        }
      ]
      declaration: bool GetIconTextDetails(const int iconid, TextInfo* textinfo);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetIllegalToFactions: {
      returnType: uint32_t
      parameters: [
        {
          type: const char**
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: wareid
        }
      ]
      declaration: uint32_t GetIllegalToFactions(const char** result, uint32_t resultlen, const char* wareid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetImportableConstructionPlans: {
      returnType: uint32_t
      parameters: [
        {
          type: UIConstructionPlanInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetImportableConstructionPlans(UIConstructionPlanInfo* result, uint32_t resultlen);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    GetInputAxisDirectionSuffix: {
      returnType: const char*
      parameters: [
        {
          type: uint32_t
          name: sourceid
        }
        {
          type: uint32_t
          name: codeid
        }
        {
          type: int32_t
          name: sgn
        }
      ]
      declaration: const char* GetInputAxisDirectionSuffix(uint32_t sourceid, uint32_t codeid, int32_t sgn);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetInputFeedbackOption: {
      returnType: const char*
      parameters: []
      declaration: const char* GetInputFeedbackOption(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetInstalledEngineMod2: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: objectid
        }
        {
          type: UIEngineMod2*
          name: enginemod
        }
      ]
      declaration: bool GetInstalledEngineMod2(UniverseID objectid, UIEngineMod2* enginemod);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetInstalledGroupedWeaponMod: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: UniverseID
          name: contextid
        }
        {
          type: const char*
          name: group
        }
        {
          type: UIWeaponMod*
          name: weaponmod
        }
      ]
      declaration: bool GetInstalledGroupedWeaponMod(UniverseID defensibleid, UniverseID contextid, const char* group, UIWeaponMod* weaponmod);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    GetInstalledPaintMod: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: objectid
        }
        {
          type: UIPaintMod*
          name: paintmod
        }
      ]
      declaration: bool GetInstalledPaintMod(UniverseID objectid, UIPaintMod* paintmod);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetInstalledShieldMod: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: UniverseID
          name: contextid
        }
        {
          type: const char*
          name: group
        }
        {
          type: UIShieldMod*
          name: shieldmod
        }
      ]
      declaration: bool GetInstalledShieldMod(UniverseID defensibleid, UniverseID contextid, const char* group, UIShieldMod* shieldmod);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetInstalledShipMod2: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: shipid
        }
        {
          type: UIShipMod2*
          name: shipmod
        }
      ]
      declaration: bool GetInstalledShipMod2(UniverseID shipid, UIShipMod2* shipmod);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    GetInstalledWeaponMod: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: weaponid
        }
        {
          type: UIWeaponMod*
          name: weaponmod
        }
      ]
      declaration: bool GetInstalledWeaponMod(UniverseID weaponid, UIWeaponMod* weaponmod);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetInstantiatedPerson: {
      returnType: UniverseID
      parameters: [
        {
          type: NPCSeed
          name: person
        }
        {
          type: UniverseID
          name: controllableid
        }
      ]
      declaration: UniverseID GetInstantiatedPerson(NPCSeed person, UniverseID controllableid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetInventoryPaintMods: {
      returnType: uint32_t
      parameters: [
        {
          type: UIPaintMod*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetInventoryPaintMods(UIPaintMod* result, uint32_t resultlen);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetLanguages: {
      returnType: uint32_t
      parameters: [
        {
          type: LanguageInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetLanguages(LanguageInfo* result, uint32_t resultlen);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetLastAttackInfo: {
      returnType: LastAttackerInfo
      parameters: [
        {
          type: UniverseID
          name: destructibleid
        }
      ]
      declaration: LastAttackerInfo GetLastAttackInfo(UniverseID destructibleid);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    GetLastPlayerControlledShipID: {
      returnType: UniverseID
      parameters: []
      declaration: UniverseID GetLastPlayerControlledShipID(void);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    GetLastSaveInfo: {
      returnType: UISaveInfo
      parameters: []
      declaration: UISaveInfo GetLastSaveInfo(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetLibraryEntryAliases: {
      returnType: uint32_t
      parameters: [
        {
          type: const char**
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: librarytypeid
        }
        {
          type: const char*
          name: id
        }
      ]
      declaration: uint32_t GetLibraryEntryAliases(const char** result, uint32_t resultlen, const char* librarytypeid, const char* id);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    GetLicenceInfo: {
      returnType: bool
      parameters: [
        {
          type: LicenceInfo*
          name: result
        }
        {
          type: const char*
          name: factionid
        }
        {
          type: const char*
          name: licenceid
        }
      ]
      declaration: bool GetLicenceInfo(LicenceInfo* result, const char* factionid, const char* licenceid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetLoadingHint: {
      returnType: LoadingHint
      parameters: [
        {
          type: const uint32_t
          name: excludeid
        }
      ]
      declaration: LoadingHint GetLoadingHint(const uint32_t excludeid);
      file: loading.lua
      detailed: ""
      notes: ""
    }
    GetLoadout: {
      returnType: void
      parameters: [
        {
          type: UILoadout*
          name: result
        }
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: const char*
          name: loadoutid
        }
      ]
      declaration: void GetLoadout(UILoadout* result, UniverseID defensibleid, const char* macroname, const char* loadoutid);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    GetLoadout2: {
      returnType: void
      parameters: [
        {
          type: UILoadout2*
          name: result
        }
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: const char*
          name: loadoutid
        }
      ]
      declaration: void GetLoadout2(UILoadout2* result, UniverseID defensibleid, const char* macroname, const char* loadoutid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetLoadoutCounts: {
      returnType: uint32_t
      parameters: [
        {
          type: UILoadoutCounts*
          name: result
        }
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: const char*
          name: loadoutid
        }
      ]
      declaration: uint32_t GetLoadoutCounts(UILoadoutCounts* result, UniverseID defensibleid, const char* macroname, const char* loadoutid);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    GetLoadoutCounts2: {
      returnType: uint32_t
      parameters: [
        {
          type: UILoadoutCounts2*
          name: result
        }
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: const char*
          name: loadoutid
        }
      ]
      declaration: uint32_t GetLoadoutCounts2(UILoadoutCounts2* result, UniverseID defensibleid, const char* macroname, const char* loadoutid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetLoadoutInvalidPatches: {
      returnType: uint32_t
      parameters: [
        {
          type: InvalidPatchInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: const char*
          name: loadoutid
        }
      ]
      declaration: uint32_t GetLoadoutInvalidPatches(InvalidPatchInfo* result, uint32_t resultlen, UniverseID defensibleid, const char* macroname, const char* loadoutid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetLoadoutsInfo: {
      returnType: uint32_t
      parameters: [
        {
          type: UILoadoutInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: componentid
        }
        {
          type: const char*
          name: macroname
        }
      ]
      declaration: uint32_t GetLoadoutsInfo(UILoadoutInfo* result, uint32_t resultlen, UniverseID componentid, const char* macroname);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetLoadoutStatistics5: {
      returnType: UILoadoutStatistics5
      parameters: [
        {
          type: UniverseID
          name: shipid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: UILoadout
          name: uiloadout
        }
      ]
      declaration: UILoadoutStatistics5 GetLoadoutStatistics5(UniverseID shipid, const char* macroname, UILoadout uiloadout);
      file: menu_ship_comparison.lua
      detailed: ""
      notes: ""
    }
    GetLocalizedInputName: {
      returnType: const char*
      parameters: [
        {
          type: uint32_t
          name: sourceid
        }
        {
          type: uint32_t
          name: codeid
        }
      ]
      declaration: const char* GetLocalizedInputName(uint32_t sourceid, uint32_t codeid);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetLocalizedInteractiveNotificationKey: {
      returnType: const char*
      parameters: []
      declaration: const char* GetLocalizedInteractiveNotificationKey();
      file: monitors.lua
      detailed: ""
      notes: ""
    }
    GetLocalizedRawMouseAxisName: {
      returnType: const char*
      parameters: [
        {
          type: uint32_t
          name: codeid
        }
      ]
      declaration: const char* GetLocalizedRawMouseAxisName(uint32_t codeid);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetLocalizedRawMouseButtonName: {
      returnType: const char*
      parameters: [
        {
          type: uint32_t
          name: codeid
        }
      ]
      declaration: const char* GetLocalizedRawMouseButtonName(uint32_t codeid);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetLocalizedText: {
      returnType: const char*
      parameters: [
        {
          type: const uint32_t
          name: pageid
        }
        {
          type: uint32_t
          name: textid
        }
        {
          type: const char*const
          name: defaultvalue
        }
      ]
      declaration: const char* GetLocalizedText(const uint32_t pageid, uint32_t textid, const char*const defaultvalue);
      file: compass.lua
      detailed: ""
      notes: ""
    }
    GetLongRangeScanIndicatorOption: {
      returnType: bool
      parameters: []
      declaration: bool GetLongRangeScanIndicatorOption(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetLUTMode: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetLUTMode(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetMacroClass: {
      returnType: const char*
      parameters: [
        {
          type: const char*
          name: macroname
        }
      ]
      declaration: const char* GetMacroClass(const char* macroname);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    GetMacroDeployableCapacity: {
      returnType: uint32_t
      parameters: [
        {
          type: const char*
          name: macroname
        }
      ]
      declaration: uint32_t GetMacroDeployableCapacity(const char* macroname);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetMacroMapPositionOnEcliptic: {
      returnType: const char*
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: UIPosRot*
          name: position
        }
      ]
      declaration: const char* GetMacroMapPositionOnEcliptic(UniverseID holomapid, UIPosRot* position);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetMacroMissileCapacity: {
      returnType: uint32_t
      parameters: [
        {
          type: const char*
          name: macroname
        }
      ]
      declaration: uint32_t GetMacroMissileCapacity(const char* macroname);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetMacrosStartingWith: {
      returnType: uint32_t
      parameters: [
        {
          type: const char**
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: partialmacroname
        }
      ]
      declaration: uint32_t GetMacrosStartingWith(const char** result, uint32_t resultlen, const char* partialmacroname);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    GetMapComponentMissions: {
      returnType: uint32_t
      parameters: [
        {
          type: MissionID*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: UniverseID
          name: componentid
        }
      ]
      declaration: uint32_t GetMapComponentMissions(MissionID* result, uint32_t resultlen, UniverseID holomapid, UniverseID componentid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetMapEditorMacros: {
      returnType: uint32_t
      parameters: [
        {
          type: const char**
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetMapEditorMacros(const char** result, uint32_t resultlen);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetMapEditorObjectList: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetMapEditorObjectList(UniverseID* result, uint32_t resultlen);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    GetMapFocusComponent: {
      returnType: UniverseID
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
      ]
      declaration: UniverseID GetMapFocusComponent(UniverseID holomapid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetMappedInputName: {
      returnType: const char*
      parameters: [
        {
          type: const char*
          name: functionkey
        }
      ]
      declaration: const char* GetMappedInputName(const char* functionkey);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    GetMapPositionOnEcliptic2: {
      returnType: UniverseID
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: UIPosRot*
          name: position
        }
        {
          type: bool
          name: adaptiveecliptic
        }
        {
          type: UniverseID
          name: eclipticsectorid
        }
        {
          type: UIPosRot
          name: eclipticoffset
        }
      ]
      declaration: UniverseID GetMapPositionOnEcliptic2(UniverseID holomapid, UIPosRot* position, bool adaptiveecliptic, UniverseID eclipticsectorid, UIPosRot eclipticoffset);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetMapRenderedComponents: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: holomapid
        }
      ]
      declaration: uint32_t GetMapRenderedComponents(UniverseID* result, uint32_t resultlen, UniverseID holomapid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetMapSelectedComponents: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: holomapid
        }
      ]
      declaration: uint32_t GetMapSelectedComponents(UniverseID* result, uint32_t resultlen, UniverseID holomapid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetMapState: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: HoloMapState*
          name: state
        }
      ]
      declaration: void GetMapState(UniverseID holomapid, HoloMapState* state);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetMapTradeVolumeParameter: {
      returnType: UIMapTradeVolumeParameter
      parameters: []
      declaration: UIMapTradeVolumeParameter GetMapTradeVolumeParameter(void);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetMaxLoadoutStatistics5: {
      returnType: UILoadoutStatistics5
      parameters: [
        {
          type: UniverseID
          name: shipid
        }
        {
          type: const char*
          name: macroname
        }
      ]
      declaration: UILoadoutStatistics5 GetMaxLoadoutStatistics5(UniverseID shipid, const char* macroname);
      file: menu_ship_comparison.lua
      detailed: ""
      notes: ""
    }
    GetMaxProductionStorage: {
      returnType: uint32_t
      parameters: [
        {
          type: UIWareAmount*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: containerid
        }
      ]
      declaration: uint32_t GetMaxProductionStorage(UIWareAmount* result, uint32_t resultlen, UniverseID containerid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetMenuWidthScale: {
      returnType: float
      parameters: []
      declaration: float GetMenuWidthScale(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetMessageDetails3: {
      returnType: MessageDetails3
      parameters: [
        {
          type: const uint32_t
          name: messageid
        }
      ]
      declaration: MessageDetails3 GetMessageDetails3(const uint32_t messageid);
      file: targetmonitor.lua
      detailed: ""
      notes: ""
    }
    GetMessageInteractPosition: {
      returnType: UIPosRot
      parameters: [
        {
          type: MessageID
          name: messageid
        }
      ]
      declaration: UIPosRot GetMessageInteractPosition(MessageID messageid);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    GetMessages: {
      returnType: uint32_t
      parameters: [
        {
          type: MessageInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: size_t
          name: start
        }
        {
          type: size_t
          name: count
        }
        {
          type: const char*
          name: categoryname
        }
      ]
      declaration: uint32_t GetMessages(MessageInfo* result, uint32_t resultlen, size_t start, size_t count, const char* categoryname);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    GetMineablesAtSectorPos: {
      returnType: uint32_t
      parameters: [
        {
          type: YieldInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: sectorid
        }
        {
          type: Coord3D
          name: position
        }
      ]
      declaration: uint32_t GetMineablesAtSectorPos(YieldInfo* result, uint32_t resultlen, UniverseID sectorid, Coord3D position);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetMinimumBuildPlotCenterOffset: {
      returnType: Coord3D
      parameters: [
        {
          type: UniverseID
          name: stationid
        }
      ]
      declaration: Coord3D GetMinimumBuildPlotCenterOffset(UniverseID stationid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetMinimumBuildPlotSize: {
      returnType: Coord3D
      parameters: [
        {
          type: UniverseID
          name: stationid
        }
      ]
      declaration: Coord3D GetMinimumBuildPlotSize(UniverseID stationid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetMissileCargo: {
      returnType: uint32_t
      parameters: [
        {
          type: UIWareInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: containerid
        }
      ]
      declaration: uint32_t GetMissileCargo(UIWareInfo* result, uint32_t resultlen, UniverseID containerid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetMissingBuildProcessorResources: {
      returnType: uint32_t
      parameters: [
        {
          type: UIWareInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetMissingBuildProcessorResources(UIWareInfo* result, uint32_t resultlen);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetMissingBuildResources: {
      returnType: uint32_t
      parameters: [
        {
          type: UIWareInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetMissingBuildResources(UIWareInfo* result, uint32_t resultlen);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetMissingConstructionPlanBlueprints3: {
      returnType: const char*
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: const char*
          name: constructionplanid
        }
        {
          type: bool
          name: useplanned
        }
      ]
      declaration: const char* GetMissingConstructionPlanBlueprints3(UniverseID containerid, UniverseID holomapid, const char* constructionplanid, bool useplanned);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    GetMissingLoadoutBlueprints: {
      returnType: const char*
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: const char*
          name: loadoutid
        }
      ]
      declaration: const char* GetMissingLoadoutBlueprints(UniverseID containerid, UniverseID defensibleid, const char* macroname, const char* loadoutid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetMissingLoadoutResources: {
      returnType: uint32_t
      parameters: [
        {
          type: UIWareInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetMissingLoadoutResources(UIWareInfo* result, uint32_t resultlen);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetMissingMissionLoadoutBlueprints: {
      returnType: const char*
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: MissionID
          name: missionid
        }
        {
          type: const char*
          name: uimacroname
        }
      ]
      declaration: const char* GetMissingMissionLoadoutBlueprints(UniverseID containerid, MissionID missionid, const char* uimacroname);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetMissionBriefingButton: {
      returnType: const char*
      parameters: [
        {
          type: MissionID
          name: missionid
        }
      ]
      declaration: const char* GetMissionBriefingButton(MissionID missionid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetMissionBriefingIcon: {
      returnType: MissionBriefingIconInfo
      parameters: [
        {
          type: MissionID
          name: missionid
        }
      ]
      declaration: MissionBriefingIconInfo GetMissionBriefingIcon(MissionID missionid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetMissionDeliveryWares: {
      returnType: void
      parameters: [
        {
          type: MissionWareDeliveryInfo*
          name: result
        }
        {
          type: MissionID
          name: missionid
        }
      ]
      declaration: void GetMissionDeliveryWares(MissionWareDeliveryInfo* result, MissionID missionid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetMissionGroupDetails: {
      returnType: MissionGroupDetails
      parameters: [
        {
          type: MissionID
          name: missionid
        }
      ]
      declaration: MissionGroupDetails GetMissionGroupDetails(MissionID missionid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetMissionHelpOverlayID: {
      returnType: const char*
      parameters: [
        {
          type: MissionID
          name: missionid
        }
      ]
      declaration: const char* GetMissionHelpOverlayID(MissionID missionid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetMissionIDDetails: {
      returnType: MissionDetails
      parameters: [
        {
          type: uint64_t
          name: missionid
        }
      ]
      declaration: MissionDetails GetMissionIDDetails(uint64_t missionid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetMissionIDObjective2: {
      returnType: MissionObjective2
      parameters: [
        {
          type: uint64_t
          name: missionid
        }
      ]
      declaration: MissionObjective2 GetMissionIDObjective2(uint64_t missionid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetMissionIDObjectiveTarget: {
      returnType: UniverseID
      parameters: [
        {
          type: uint64_t
          name: missionid
        }
        {
          type: size_t
          name: targetIndex
        }
      ]
      declaration: UniverseID GetMissionIDObjectiveTarget(uint64_t missionid, size_t targetIndex);
      file: menu_missionbriefing.lua
      detailed: ""
      notes: ""
    }
    GetMissionInfo2: {
      returnType: MissionInfo2
      parameters: []
      declaration: MissionInfo2 GetMissionInfo2();
      file: monitors.lua
      detailed: ""
      notes: ""
    }
    GetMissionLoadout: {
      returnType: void
      parameters: [
        {
          type: UILoadout2*
          name: result
        }
        {
          type: MissionID
          name: missionid
        }
        {
          type: const char*
          name: uimacroname
        }
      ]
      declaration: void GetMissionLoadout(UILoadout2* result, MissionID missionid, const char* uimacroname);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetMissionLoadoutCounts: {
      returnType: void
      parameters: [
        {
          type: UILoadoutCounts2*
          name: result
        }
        {
          type: MissionID
          name: missionid
        }
        {
          type: const char*
          name: uimacroname
        }
      ]
      declaration: void GetMissionLoadoutCounts(UILoadoutCounts2* result, MissionID missionid, const char* uimacroname);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetMissionObjectiveStep3: {
      returnType: MissionObjectiveStep3
      parameters: [
        {
          type: uint64_t
          name: missionid
        }
        {
          type: size_t
          name: objectiveIndex
        }
      ]
      declaration: MissionObjectiveStep3 GetMissionObjectiveStep3(uint64_t missionid, size_t objectiveIndex);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetMissionOfferIcons: {
      returnType: IconSet
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
      ]
      declaration: IconSet GetMissionOfferIcons(const UniverseID componentid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    GetMissionOnlineInfo: {
      returnType: OnlineMissionInfo
      parameters: [
        {
          type: MissionID
          name: missionid
        }
      ]
      declaration: OnlineMissionInfo GetMissionOnlineInfo(MissionID missionid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetMissionThreadSubMissions: {
      returnType: uint32_t
      parameters: [
        {
          type: MissionID*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: MissionID
          name: missionid
        }
      ]
      declaration: uint32_t GetMissionThreadSubMissions(MissionID* result, uint32_t resultlen, MissionID missionid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetModeLightIntensity: {
      returnType: float
      parameters: []
      declaration: float GetModeLightIntensity(void);
      file: crosshair handling.lua
      detailed: ""
      notes: ""
    }
    GetModifiedBasegameUIFilesExtensions: {
      returnType: const char*
      parameters: []
      declaration: const char* GetModifiedBasegameUIFilesExtensions(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetModuleNeededResources: {
      returnType: uint32_t
      parameters: [
        {
          type: UIWareInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: size_t
          name: cp_idx
        }
      ]
      declaration: uint32_t GetModuleNeededResources(UIWareInfo* result, uint32_t resultlen, UniverseID holomapid, size_t cp_idx);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    GetModuleRecycledResources: {
      returnType: uint32_t
      parameters: [
        {
          type: UIWareInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: moduleid
        }
      ]
      declaration: uint32_t GetModuleRecycledResources(UIWareInfo* result, uint32_t resultlen, UniverseID moduleid);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    GetMoneyLog: {
      returnType: uint32_t
      parameters: [
        {
          type: MoneyLogEntry*
          name: result
        }
        {
          type: size_t
          name: resultlen
        }
        {
          type: UniverseID
          name: componentid
        }
        {
          type: double
          name: starttime
        }
        {
          type: double
          name: endtime
        }
      ]
      declaration: uint32_t GetMoneyLog(MoneyLogEntry* result, size_t resultlen, UniverseID componentid, double starttime, double endtime);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    GetMonitorExtents: {
      returnType: MonitorExtents
      parameters: [
        {
          type: const char*
          name: monitorid
        }
      ]
      declaration: MonitorExtents GetMonitorExtents(const char* monitorid);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    GetMoonInfo2: {
      returnType: uint32_t
      parameters: [
        {
          type: UICelestialBodyInfo2*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: clusterid
        }
        {
          type: uint32_t
          name: planetidx
        }
      ]
      declaration: uint32_t GetMoonInfo2(UICelestialBodyInfo2* result, uint32_t resultlen, UniverseID clusterid, uint32_t planetidx);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    GetMouseOverText: {
      returnType: const char*
      parameters: [
        {
          type: const int
          name: widgetid
        }
      ]
      declaration: const char* GetMouseOverText(const int widgetid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetMouseOverTextAdditional: {
      returnType: const char*
      parameters: [
        {
          type: const int
          name: widgetid
        }
      ]
      declaration: const char* GetMouseOverTextAdditional(const int widgetid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetMouseOverTextOption: {
      returnType: bool
      parameters: []
      declaration: bool GetMouseOverTextOption(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetMouseSteeringInvertedOption: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: paramname
        }
      ]
      declaration: bool GetMouseSteeringInvertedOption(const char* paramname);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetNextNewsItem: {
      returnType: NewsInfo
      parameters: []
      declaration: NewsInfo GetNextNewsItem(void);
      file: promo.lua
      detailed: ""
      notes: ""
    }
    GetNotificationID: {
      returnType: int
      parameters: [
        {
          type: const size_t
          name: num
        }
      ]
      declaration: int GetNotificationID(const size_t num);
      file: monitors.lua
      detailed: ""
      notes: ""
    }
    GetNotificationTypes2: {
      returnType: uint32_t
      parameters: [
        {
          type: UINotificationType2*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetNotificationTypes2(UINotificationType2* result, uint32_t resultlen);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    GetNPCAccountStatistics: {
      returnType: uint32_t
      parameters: [
        {
          type: UIAccountStatData*
          name: result
        }
        {
          type: size_t
          name: resultlen
        }
        {
          type: UniverseID
          name: entityid
        }
        {
          type: double
          name: starttime
        }
        {
          type: double
          name: endtime
        }
      ]
      declaration: uint32_t GetNPCAccountStatistics(UIAccountStatData* result, size_t resultlen, UniverseID entityid, double starttime, double endtime);
      file: menu_station_overview.lua
      detailed: ""
      notes: ""
    }
    GetNumAcceptedMissions: {
      returnType: size_t
      parameters: []
      declaration: size_t GetNumAcceptedMissions();
      file: monitors.lua
      detailed: ""
      notes: ""
    }
    GetNumAllBlacklists: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumAllBlacklists(void);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    GetNumAllBoardingBehaviours: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumAllBoardingBehaviours(void);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumAllBoardingPhases: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumAllBoardingPhases(void);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumAllColorMapColors: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumAllColorMapColors(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetNumAllColorMapEntries: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumAllColorMapEntries(void);
      file: compass.lua
      detailed: ""
      notes: ""
    }
    GetNumAllColorMapMappings: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumAllColorMapMappings(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetNumAllCommanders: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: FleetUnitID
          name: fleetunitid
        }
      ]
      declaration: uint32_t GetNumAllCommanders(UniverseID controllableid, FleetUnitID fleetunitid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumAllControlPosts: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumAllControlPosts(void);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumAllCountermeasures: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
      ]
      declaration: uint32_t GetNumAllCountermeasures(UniverseID defensibleid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumAllEquipment: {
      returnType: uint32_t
      parameters: [
        {
          type: bool
          name: playerblueprint
        }
      ]
      declaration: uint32_t GetNumAllEquipment(bool playerblueprint);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetNumAllEquipmentModProperties: {
      returnType: uint32_t
      parameters: [
        {
          type: const char*
          name: equipmentmodclass
        }
      ]
      declaration: uint32_t GetNumAllEquipmentModProperties(const char* equipmentmodclass);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    GetNumAllFactions: {
      returnType: uint32_t
      parameters: [
        {
          type: bool
          name: includehidden
        }
      ]
      declaration: uint32_t GetNumAllFactions(bool includehidden);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    GetNumAllFactionShips: {
      returnType: uint32_t
      parameters: [
        {
          type: const char*
          name: factionid
        }
      ]
      declaration: uint32_t GetNumAllFactionShips(const char* factionid);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    GetNumAllFactionStations: {
      returnType: uint32_t
      parameters: [
        {
          type: const char*
          name: factionid
        }
      ]
      declaration: uint32_t GetNumAllFactionStations(const char* factionid);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    GetNumAllFightRules: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumAllFightRules(void);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    GetNumAllFleetUnits: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
      ]
      declaration: uint32_t GetNumAllFleetUnits(UniverseID controllableid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumAllFleetUnitSubordinates: {
      returnType: uint32_t
      parameters: [
        {
          type: FleetUnitID
          name: fleetunitid
        }
      ]
      declaration: uint32_t GetNumAllFleetUnitSubordinates(FleetUnitID fleetunitid);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    GetNumAllInputFeedback: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumAllInputFeedback(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetNumAllInventoryBombs: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: entityid
        }
      ]
      declaration: uint32_t GetNumAllInventoryBombs(UniverseID entityid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumAllLaserTowers: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
      ]
      declaration: uint32_t GetNumAllLaserTowers(UniverseID defensibleid);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetNumAllMines: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
      ]
      declaration: uint32_t GetNumAllMines(UniverseID defensibleid);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetNumAllMissiles: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
      ]
      declaration: uint32_t GetNumAllMissiles(UniverseID defensibleid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumAllModuleSets: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumAllModuleSets();
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumAllNavBeacons: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
      ]
      declaration: uint32_t GetNumAllNavBeacons(UniverseID defensibleid);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetNumAllowedWeaponSystems: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumAllowedWeaponSystems(void);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumAllRaces: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumAllRaces(void);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumAllResourceProbes: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
      ]
      declaration: uint32_t GetNumAllResourceProbes(UniverseID defensibleid);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetNumAllResponsesToSignal: {
      returnType: uint32_t
      parameters: [
        {
          type: const char*
          name: signalid
        }
      ]
      declaration: uint32_t GetNumAllResponsesToSignal(const char* signalid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumAllRoles: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumAllRoles(void);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumAllSatellites: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
      ]
      declaration: uint32_t GetNumAllSatellites(UniverseID defensibleid);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetNumAllShipMacros2: {
      returnType: uint32_t
      parameters: [
        {
          type: bool
          name: playerblueprint
        }
        {
          type: bool
          name: customgamestart
        }
      ]
      declaration: uint32_t GetNumAllShipMacros2(bool playerblueprint, bool customgamestart);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetNumAllSignals: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumAllSignals(void);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumAllTradeRules: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumAllTradeRules(void);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    GetNumAllUnits: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: bool
          name: onlydrones
        }
      ]
      declaration: uint32_t GetNumAllUnits(UniverseID defensibleid, bool onlydrones);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetNumAllWareGroups: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumAllWareGroups(void);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumAmmoStorage: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: const char*
          name: ammotype
        }
      ]
      declaration: uint32_t GetNumAmmoStorage(UniverseID defensibleid, const char* ammotype);
      file: menu_station_overview.lua
      detailed: ""
      notes: ""
    }
    GetNumAssignedConstructionVessels: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
      ]
      declaration: uint32_t GetNumAssignedConstructionVessels(UniverseID containerid);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    GetNumAttackersOfBoardingOperation: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: defensibletargetid
        }
        {
          type: const char*
          name: boarderfactionid
        }
      ]
      declaration: uint32_t GetNumAttackersOfBoardingOperation(UniverseID defensibletargetid, const char* boarderfactionid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumAvailableClothingThemes: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumAvailableClothingThemes();
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    GetNumAvailableCustomGameStarts: {
      returnType: uint32_t
      parameters: [
        {
          type: const char*
          name: id
        }
      ]
      declaration: uint32_t GetNumAvailableCustomGameStarts(const char* id);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetNumAvailableEquipment: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: const char*
          name: classid
        }
      ]
      declaration: uint32_t GetNumAvailableEquipment(UniverseID containerid, const char* classid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetNumAvailableEquipmentMods: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumAvailableEquipmentMods();
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    GetNumAvailableLockboxes: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: entityid
        }
      ]
      declaration: uint32_t GetNumAvailableLockboxes(UniverseID entityid);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    GetNumAvailablePaintThemes: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumAvailablePaintThemes();
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    GetNumBlacklistTypes: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumBlacklistTypes(void);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetNumBlueprints: {
      returnType: uint32_t
      parameters: [
        {
          type: const char*
          name: set
        }
        {
          type: const char*
          name: category
        }
        {
          type: const char*
          name: macroname
        }
      ]
      declaration: uint32_t GetNumBlueprints(const char* set, const char* category, const char* macroname);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    GetNumBoardingMarinesFromOperation: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: defensibletargetid
        }
        {
          type: const char*
          name: boarderfactionid
        }
      ]
      declaration: uint32_t GetNumBoardingMarinesFromOperation(UniverseID defensibletargetid, const char* boarderfactionid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumBuildMapConstructionPlan: {
      returnType: size_t
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: bool
          name: usestoredplan
        }
      ]
      declaration: size_t GetNumBuildMapConstructionPlan(UniverseID holomapid, bool usestoredplan);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    GetNumBuildModules: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
      ]
      declaration: uint32_t GetNumBuildModules(UniverseID containerid);
      file: menu_station_overview.lua
      detailed: ""
      notes: ""
    }
    GetNumBuildResources: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: const char*
          name: wareid
        }
      ]
      declaration: uint32_t GetNumBuildResources(UniverseID containerid, UniverseID defensibleid, const char* macroname, const char* wareid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetNumBuildTaskCrewTransferInfo: {
      returnType: CrewTransferInfoCounts
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: BuildTaskID
          name: id
        }
      ]
      declaration: CrewTransferInfoCounts GetNumBuildTaskCrewTransferInfo(UniverseID containerid, BuildTaskID id);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetNumBuildTasks: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: UniverseID
          name: buildmoduleid
        }
        {
          type: bool
          name: isinprogress
        }
        {
          type: bool
          name: includeupgrade
        }
      ]
      declaration: uint32_t GetNumBuildTasks(UniverseID containerid, UniverseID buildmoduleid, bool isinprogress, bool includeupgrade);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetNumCargo: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: const char*
          name: tags
        }
      ]
      declaration: uint32_t GetNumCargo(UniverseID containerid, const char* tags);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    GetNumCargoStatistics: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: containerorspaceid
        }
        {
          type: double
          name: starttime
        }
        {
          type: double
          name: endtime
        }
        {
          type: size_t
          name: numdatapoints
        }
      ]
      declaration: uint32_t GetNumCargoStatistics(UniverseID containerorspaceid, double starttime, double endtime, size_t numdatapoints);
      file: menu_station_overview.lua
      detailed: ""
      notes: ""
    }
    GetNumCargoTransportTypes: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: bool
          name: merge
        }
      ]
      declaration: uint32_t GetNumCargoTransportTypes(UniverseID containerid, bool merge);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumCatalogMacros: {
      returnType: uint32_t
      parameters: [
        {
          type: const char*
          name: classid
        }
      ]
      declaration: uint32_t GetNumCatalogMacros(const char* classid);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetNumCatalogTemplates: {
      returnType: uint32_t
      parameters: [
        {
          type: const char*
          name: classid
        }
      ]
      declaration: uint32_t GetNumCatalogTemplates(const char* classid);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    GetNumCloseOnUnhandledClickFrames: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumCloseOnUnhandledClickFrames();
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetNumColorProfiles: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumColorProfiles();
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetNumCompSlotPlayerActions: {
      returnType: uint32_t
      parameters: [
        {
          type: UIComponentSlot
          name: compslot
        }
      ]
      declaration: uint32_t GetNumCompSlotPlayerActions(UIComponentSlot compslot);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    GetNumConfiguredModifierKeys: {
      returnType: uint32_t
      parameters: [
        {
          type: const char*
          name: modifier
        }
      ]
      declaration: uint32_t GetNumConfiguredModifierKeys(const char* modifier);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetNumConstructionMapVenturePlatformDocks: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: size_t
          name: ventureplatformidx
        }
      ]
      declaration: uint32_t GetNumConstructionMapVenturePlatformDocks(UniverseID holomapid, size_t ventureplatformidx);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    GetNumConstructionPlanInfo: {
      returnType: size_t
      parameters: [
        {
          type: const char*
          name: constructionplanid
        }
      ]
      declaration: size_t GetNumConstructionPlanInfo(const char* constructionplanid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetNumConstructionPlans: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumConstructionPlans(void);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    GetNumContainedKnownSpaces: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: spaceid
        }
      ]
      declaration: uint32_t GetNumContainedKnownSpaces(UniverseID spaceid);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    GetNumContainedKnownUnreadSpaces: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: spaceid
        }
      ]
      declaration: uint32_t GetNumContainedKnownUnreadSpaces(UniverseID spaceid);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    GetNumContainerBuilderMacros: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
      ]
      declaration: uint32_t GetNumContainerBuilderMacros(UniverseID containerid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetNumContainerBuildResources: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
      ]
      declaration: uint32_t GetNumContainerBuildResources(UniverseID containerid);
      file: menu_station_overview.lua
      detailed: ""
      notes: ""
    }
    GetNumContainerCriticalWares: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
      ]
      declaration: uint32_t GetNumContainerCriticalWares(UniverseID containerid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumContainerStockLimitOverrides: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
      ]
      declaration: uint32_t GetNumContainerStockLimitOverrides(UniverseID containerid);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    GetNumContainerWareReservations2: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: bool
          name: includevirtual
        }
        {
          type: bool
          name: includemission
        }
        {
          type: bool
          name: includesupply
        }
      ]
      declaration: uint32_t GetNumContainerWareReservations2(UniverseID containerid, bool includevirtual, bool includemission, bool includesupply);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumContainerWorkforceInfluence: {
      returnType: WorkforceInfluenceCounts
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: const char*
          name: raceid
        }
        {
          type: bool
          name: force
        }
      ]
      declaration: WorkforceInfluenceCounts GetNumContainerWorkforceInfluence(UniverseID containerid, const char* raceid, bool force);
      file: menu_station_overview.lua
      detailed: ""
      notes: ""
    }
    GetNumControllableSubordinateFleetUnits: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: int
          name: subordinategroupid
        }
      ]
      declaration: uint32_t GetNumControllableSubordinateFleetUnits(UniverseID controllableid, int subordinategroupid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumCountermeasures: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumCountermeasures();
      file: crosshair handling.lua
      detailed: ""
      notes: ""
    }
    GetNumCurrentMissionOffers: {
      returnType: uint32_t
      parameters: [
        {
          type: bool
          name: showninbbs
        }
      ]
      declaration: uint32_t GetNumCurrentMissionOffers(bool showninbbs);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumCustomGameStartBudgetGroups: {
      returnType: uint32_t
      parameters: [
        {
          type: const char*
          name: id
        }
      ]
      declaration: uint32_t GetNumCustomGameStartBudgetGroups(const char* id);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetNumCustomGameStartPaintThemes: {
      returnType: uint32_t
      parameters: [
        {
          type: const char*
          name: id
        }
      ]
      declaration: uint32_t GetNumCustomGameStartPaintThemes(const char* id);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetNumCustomGameStartStoryBudgetDependencyLists: {
      returnType: uint32_t
      parameters: [
        {
          type: uint32_t*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: storyid
        }
      ]
      declaration: uint32_t GetNumCustomGameStartStoryBudgetDependencyLists(uint32_t* result, uint32_t resultlen, const char* id, const char* storyid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetNumCustomGameStartStoryBudgets: {
      returnType: uint32_t
      parameters: [
        {
          type: const char*
          name: id
        }
      ]
      declaration: uint32_t GetNumCustomGameStartStoryBudgets(const char* id);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetNumDefaultLoadoutMacros: {
      returnType: uint32_t
      parameters: [
        {
          type: const char*
          name: macroname
        }
      ]
      declaration: uint32_t GetNumDefaultLoadoutMacros(const char* macroname);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetNumDiplomacyActions: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumDiplomacyActions();
      file: menu_diplomacy.lua
      detailed: ""
      notes: ""
    }
    GetNumDiscoveredSectorResources: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: sectorid
        }
      ]
      declaration: uint32_t GetNumDiscoveredSectorResources(UniverseID sectorid);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    GetNumDockedShips: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: dockingbayorcontainerid
        }
        {
          type: const char*
          name: factionid
        }
      ]
      declaration: uint32_t GetNumDockedShips(UniverseID dockingbayorcontainerid, const char* factionid);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetNumDroneModes: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: const char*
          name: dronetype
        }
      ]
      declaration: uint32_t GetNumDroneModes(UniverseID defensibleid, const char* dronetype);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetNumDropDownOptions: {
      returnType: uint32_t
      parameters: [
        {
          type: const int
          name: dropdownid
        }
      ]
      declaration: uint32_t GetNumDropDownOptions(const int dropdownid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetNumFactionRelationText2: {
      returnType: uint32_t
      parameters: [
        {
          type: const char*
          name: factionid
        }
      ]
      declaration: uint32_t GetNumFactionRelationText2(const char* factionid);
      file: menu_diplomacy.lua
      detailed: ""
      notes: ""
    }
    GetNumFightRuleTypes: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumFightRuleTypes(void);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetNumFixedStations: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: spaceid
        }
      ]
      declaration: uint32_t GetNumFixedStations(UniverseID spaceid);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    GetNumFleetUnitProblematicEquipmentWares: {
      returnType: uint32_t
      parameters: [
        {
          type: FleetUnitID
          name: fleetunitid
        }
      ]
      declaration: uint32_t GetNumFleetUnitProblematicEquipmentWares(FleetUnitID fleetunitid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumFleetUnitSubordinateFleetUnits: {
      returnType: uint32_t
      parameters: [
        {
          type: FleetUnitID
          name: fleetunitid
        }
        {
          type: int
          name: subordinategroupid
        }
      ]
      declaration: uint32_t GetNumFleetUnitSubordinateFleetUnits(FleetUnitID fleetunitid, int subordinategroupid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumFleetUnitSubordinates: {
      returnType: uint32_t
      parameters: [
        {
          type: FleetUnitID
          name: fleetunitid
        }
        {
          type: int32_t
          name: subordinategroupid
        }
      ]
      declaration: uint32_t GetNumFleetUnitSubordinates(FleetUnitID fleetunitid, int32_t subordinategroupid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumFormationShapes: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumFormationShapes(void);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumGameStartGroups: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumGameStartGroups(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetNumGPUs: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumGPUs(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetNumGraphDataRecords: {
      returnType: uint32_t
      parameters: [
        {
          type: int
          name: graphid
        }
      ]
      declaration: uint32_t GetNumGraphDataRecords(int graphid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetNumGraphIcons: {
      returnType: uint32_t
      parameters: [
        {
          type: int
          name: graphid
        }
      ]
      declaration: uint32_t GetNumGraphIcons(int graphid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetNumHighwaySplinePoints: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: highwayid
        }
      ]
      declaration: uint32_t GetNumHighwaySplinePoints(UniverseID highwayid);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    GetNumHQs: {
      returnType: uint32_t
      parameters: [
        {
          type: const char*
          name: factionid
        }
      ]
      declaration: uint32_t GetNumHQs(const char* factionid);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    GetNumIcons: {
      returnType: uint32_t
      parameters: [
        {
          type: const char*
          name: tags
        }
      ]
      declaration: uint32_t GetNumIcons(const char* tags);
      file: loading.lua
      detailed: ""
      notes: ""
    }
    GetNumIllegalToFactions: {
      returnType: uint32_t
      parameters: [
        {
          type: const char*
          name: wareid
        }
      ]
      declaration: uint32_t GetNumIllegalToFactions(const char* wareid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumImportableConstructionPlans: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumImportableConstructionPlans();
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    GetNumInventoryPaintMods: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumInventoryPaintMods(void);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetNumLanguages: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumLanguages(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetNumLibraryEntryAliases: {
      returnType: uint32_t
      parameters: [
        {
          type: const char*
          name: librarytypeid
        }
        {
          type: const char*
          name: id
        }
      ]
      declaration: uint32_t GetNumLibraryEntryAliases(const char* librarytypeid, const char* id);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    GetNumLoadoutsInfo: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
        {
          type: const char*
          name: macroname
        }
      ]
      declaration: uint32_t GetNumLoadoutsInfo(UniverseID componentid, const char* macroname);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetNumMacrosStartingWith: {
      returnType: uint32_t
      parameters: [
        {
          type: const char*
          name: partialmacroname
        }
      ]
      declaration: uint32_t GetNumMacrosStartingWith(const char* partialmacroname);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    GetNumMapComponentMissions: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: UniverseID
          name: componentid
        }
      ]
      declaration: uint32_t GetNumMapComponentMissions(UniverseID holomapid, UniverseID componentid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumMapEditorMacros: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumMapEditorMacros(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetNumMapEditorObjectList: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumMapEditorObjectList(void);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    GetNumMapRenderedComponents: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
      ]
      declaration: uint32_t GetNumMapRenderedComponents(UniverseID holomapid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumMapSelectedComponents: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
      ]
      declaration: uint32_t GetNumMapSelectedComponents(UniverseID holomapid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumMaxProductionStorage: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
      ]
      declaration: uint32_t GetNumMaxProductionStorage(UniverseID containerid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumMessages: {
      returnType: uint32_t
      parameters: [
        {
          type: const char*
          name: categoryname
        }
        {
          type: bool
          name: bool
        }
      ]
      declaration: uint32_t GetNumMessages(const char* categoryname, bool );
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    GetNumMineablesAtSectorPos: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: sectorid
        }
        {
          type: Coord3D
          name: position
        }
      ]
      declaration: uint32_t GetNumMineablesAtSectorPos(UniverseID sectorid, Coord3D position);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumMissileCargo: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
      ]
      declaration: uint32_t GetNumMissileCargo(UniverseID containerid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetNumMissingBuildProcessorResources: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: UniverseID
          name: buildprocessorid
        }
      ]
      declaration: uint32_t GetNumMissingBuildProcessorResources(UniverseID containerid, UniverseID buildprocessorid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumMissingBuildResources2: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: UIBuildOrderList*
          name: orders
        }
        {
          type: uint32_t
          name: numorders
        }
        {
          type: bool
          name: playercase
        }
      ]
      declaration: uint32_t GetNumMissingBuildResources2(UniverseID containerid, UIBuildOrderList* orders, uint32_t numorders, bool playercase);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumMissingLoadoutResources2: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: UIBuildOrderList*
          name: orders
        }
        {
          type: uint32_t
          name: numorders
        }
        {
          type: bool
          name: playercase
        }
      ]
      declaration: uint32_t GetNumMissingLoadoutResources2(UniverseID containerid, UIBuildOrderList* orders, uint32_t numorders, bool playercase);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetNumMissionDeliveryWares: {
      returnType: uint32_t
      parameters: [
        {
          type: MissionID
          name: missionid
        }
      ]
      declaration: uint32_t GetNumMissionDeliveryWares(MissionID missionid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumMissionThreadSubMissions: {
      returnType: uint32_t
      parameters: [
        {
          type: MissionID
          name: missionid
        }
      ]
      declaration: uint32_t GetNumMissionThreadSubMissions(MissionID missionid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumModuleNeededResources: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: size_t
          name: cp_idx
        }
      ]
      declaration: uint32_t GetNumModuleNeededResources(UniverseID holomapid, size_t cp_idx);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    GetNumModuleRecycledResources: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: moduleid
        }
      ]
      declaration: uint32_t GetNumModuleRecycledResources(UniverseID moduleid);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    GetNumNotifications: {
      returnType: size_t
      parameters: []
      declaration: size_t GetNumNotifications();
      file: monitors.lua
      detailed: ""
      notes: ""
    }
    GetNumNotificationTypes: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumNotificationTypes(void);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    GetNumObjectsWithSyncPoint: {
      returnType: uint32_t
      parameters: [
        {
          type: uint32_t
          name: syncid
        }
        {
          type: bool
          name: onlyreached
        }
      ]
      declaration: uint32_t GetNumObjectsWithSyncPoint(uint32_t syncid, bool onlyreached);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumObjectsWithSyncPointFromOrder: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: size_t
          name: idx
        }
        {
          type: bool
          name: onlyreached
        }
      ]
      declaration: uint32_t GetNumObjectsWithSyncPointFromOrder(UniverseID controllableid, size_t idx, bool onlyreached);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    GetNumOrderDefinitions: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumOrderDefinitions(void);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumOrderFailures: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: bool
          name: includelooporders
        }
      ]
      declaration: uint32_t GetNumOrderFailures(UniverseID controllableid, bool includelooporders);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumOrderLocationData: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: size_t
          name: orderidx
        }
        {
          type: bool
          name: usedefault
        }
      ]
      declaration: uint32_t GetNumOrderLocationData(UniverseID controllableid, size_t orderidx, bool usedefault);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumOrders: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
      ]
      declaration: uint32_t GetNumOrders(UniverseID controllableid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumOverlayCols: {
      returnType: OverlayRowInfo
      parameters: [
        {
          type: uint32_t
          name: rowidx
        }
      ]
      declaration: OverlayRowInfo GetNumOverlayCols(uint32_t rowidx);
      file: overlay.lua
      detailed: ""
      notes: ""
    }
    GetNumPeopleAfterOrders: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: int32_t
          name: numorders
        }
      ]
      declaration: uint32_t GetNumPeopleAfterOrders(UniverseID controllableid, int32_t numorders);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumPersonSuitableControlPosts: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: UniverseID
          name: personcontrollableid
        }
        {
          type: NPCSeed
          name: person
        }
        {
          type: bool
          name: free
        }
      ]
      declaration: uint32_t GetNumPersonSuitableControlPosts(UniverseID controllableid, UniverseID personcontrollableid, NPCSeed person, bool free);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumPlannedLimitedModules: {
      returnType: uint32_t
      parameters: [
        {
          type: const char*
          name: constructionplanid
        }
      ]
      declaration: uint32_t GetNumPlannedLimitedModules(const char* constructionplanid);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    GetNumPlannedStationModules: {
      returnType: size_t
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: bool
          name: includeall
        }
      ]
      declaration: size_t GetNumPlannedStationModules(UniverseID defensibleid, bool includeall);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumPlayerAlerts: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumPlayerAlerts(void);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    GetNumPlayerAlertSounds2: {
      returnType: uint32_t
      parameters: [
        {
          type: const char*
          name: tags
        }
      ]
      declaration: uint32_t GetNumPlayerAlertSounds2(const char* tags);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    GetNumPlayerBuildMethods: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumPlayerBuildMethods(void);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumPlayerLogos: {
      returnType: uint32_t
      parameters: [
        {
          type: bool
          name: includestandard
        }
        {
          type: bool
          name: includecustom
        }
      ]
      declaration: uint32_t GetNumPlayerLogos(bool includestandard, bool includecustom);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumPlayerPeopleDefinitions: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumPlayerPeopleDefinitions(void);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetNumPlayerShipBuildTasks: {
      returnType: uint32_t
      parameters: [
        {
          type: bool
          name: isinprogress
        }
        {
          type: bool
          name: includeupgrade
        }
      ]
      declaration: uint32_t GetNumPlayerShipBuildTasks(bool isinprogress, bool includeupgrade);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumPrimaryWeapons: {
      returnType: size_t
      parameters: []
      declaration: size_t GetNumPrimaryWeapons();
      file: crosshair handling.lua
      detailed: ""
      notes: ""
    }
    GetNumProductionMethodResources: {
      returnType: uint32_t
      parameters: [
        {
          type: const char*
          name: wareid
        }
        {
          type: const char*
          name: productionmethod
        }
      ]
      declaration: uint32_t GetNumProductionMethodResources(const char* wareid, const char* productionmethod);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    GetNumRadarModes: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumRadarModes();
      file: monitors.lua
      detailed: ""
      notes: ""
    }
    GetNumRegionDefinitions: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumRegionDefinitions(void);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    GetNumRemovedConstructionPlanModules2: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: uint32_t*
          name: newIndex
        }
        {
          type: bool
          name: usestoredplan
        }
        {
          type: uint32_t*
          name: numChangedIndices
        }
        {
          type: bool
          name: checkupgrades
        }
      ]
      declaration: uint32_t GetNumRemovedConstructionPlanModules2(UniverseID holomapid, UniverseID defensibleid, uint32_t* newIndex, bool usestoredplan, uint32_t* numChangedIndices, bool checkupgrades);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    GetNumRemovedStationModules2: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: uint32_t*
          name: newIndex
        }
        {
          type: uint32_t*
          name: numChangedIndices
        }
        {
          type: bool
          name: checkupgrades
        }
      ]
      declaration: uint32_t GetNumRemovedStationModules2(UniverseID defensibleid, uint32_t* newIndex, uint32_t* numChangedIndices, bool checkupgrades);
      file: menu_station_overview.lua
      detailed: ""
      notes: ""
    }
    GetNumRepairResources2: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: UniverseID
          name: componenttorepairid
        }
      ]
      declaration: uint32_t GetNumRepairResources2(UniverseID containerid, UniverseID defensibleid, UniverseID componenttorepairid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetNumRequestedMissionNPCs: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
      ]
      declaration: uint32_t GetNumRequestedMissionNPCs(UniverseID containerid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumRequestedMissionShips: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumRequestedMissionShips(void);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetNumRequestedMissionWares: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
      ]
      declaration: uint32_t GetNumRequestedMissionWares(UniverseID containerid);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    GetNumResearchModules: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
      ]
      declaration: uint32_t GetNumResearchModules(UniverseID containerid);
      file: menu_research.lua
      detailed: ""
      notes: ""
    }
    GetNumScenarioStats: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumScenarioStats(void);
      file: menu_scenario_debriefing.lua
      detailed: ""
      notes: ""
    }
    GetNumSecondaryWeapons: {
      returnType: size_t
      parameters: []
      declaration: size_t GetNumSecondaryWeapons();
      file: crosshair handling.lua
      detailed: ""
      notes: ""
    }
    GetNumSectors: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: clusterid
        }
      ]
      declaration: uint32_t GetNumSectors(UniverseID clusterid);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    GetNumSectorsByOwner: {
      returnType: uint32_t
      parameters: [
        {
          type: const char*
          name: factionid
        }
      ]
      declaration: uint32_t GetNumSectorsByOwner(const char* factionid);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    GetNumShieldGroups: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
      ]
      declaration: uint32_t GetNumShieldGroups(UniverseID defensibleid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumSkills: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumSkills(void);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumSlotCompatibilities: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: UniverseID
          name: moduleid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: bool
          name: ismodule
        }
        {
          type: const char*
          name: upgradetypename
        }
        {
          type: size_t
          name: slot
        }
      ]
      declaration: uint32_t GetNumSlotCompatibilities(UniverseID defensibleid, UniverseID moduleid, const char* macroname, bool ismodule, const char* upgradetypename, size_t slot);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetNumSoftwarePredecessors: {
      returnType: uint32_t
      parameters: [
        {
          type: const char*
          name: softwarename
        }
      ]
      declaration: uint32_t GetNumSoftwarePredecessors(const char* softwarename);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetNumSoftwareSlots: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: const char*
          name: macroname
        }
      ]
      declaration: uint32_t GetNumSoftwareSlots(UniverseID controllableid, const char* macroname);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumSoundDevices: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumSoundDevices(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetNumStartmenuBackgrounds: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumStartmenuBackgrounds(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetNumStationModules: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: stationid
        }
        {
          type: bool
          name: includeconstructions
        }
        {
          type: bool
          name: includewrecks
        }
      ]
      declaration: uint32_t GetNumStationModules(UniverseID stationid, bool includeconstructions, bool includewrecks);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumStationOverviewGraphWares: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: stationid
        }
        {
          type: bool*
          name: initialized
        }
      ]
      declaration: uint32_t GetNumStationOverviewGraphWares(UniverseID stationid, bool* initialized);
      file: menu_station_overview.lua
      detailed: ""
      notes: ""
    }
    GetNumStoredUnits: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: const char*
          name: cat
        }
        {
          type: bool
          name: virtualammo
        }
      ]
      declaration: uint32_t GetNumStoredUnits(UniverseID defensibleid, const char* cat, bool virtualammo);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetNumSubComponents: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
      ]
      declaration: uint32_t GetNumSubComponents(UniverseID containerid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetNumSubordinatesOfGroup: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: commanderid
        }
        {
          type: int
          name: group
        }
      ]
      declaration: uint32_t GetNumSubordinatesOfGroup(UniverseID commanderid, int group);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumSuitableBuildProcessors: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: UniverseID
          name: objectid
        }
        {
          type: const char*
          name: macroname
        }
      ]
      declaration: uint32_t GetNumSuitableBuildProcessors(UniverseID containerid, UniverseID objectid, const char* macroname);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetNumSuitableControlPosts: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: UniverseID
          name: entityid
        }
        {
          type: bool
          name: free
        }
      ]
      declaration: uint32_t GetNumSuitableControlPosts(UniverseID controllableid, UniverseID entityid, bool free);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumSupplyOrderResources: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
      ]
      declaration: uint32_t GetNumSupplyOrderResources(UniverseID containerid);
      file: menu_station_overview.lua
      detailed: ""
      notes: ""
    }
    GetNumSupplyOrders: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: bool
          name: defaultorders
        }
      ]
      declaration: uint32_t GetNumSupplyOrders(UniverseID containerid, bool defaultorders);
      file: menu_station_overview.lua
      detailed: ""
      notes: ""
    }
    GetNumTableInitialMultiselectedRows: {
      returnType: uint32_t
      parameters: [
        {
          type: const int
          name: tableid
        }
      ]
      declaration: uint32_t GetNumTableInitialMultiselectedRows(const int tableid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetNumTerraformingCurrentStats: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: clusterid
        }
      ]
      declaration: uint32_t GetNumTerraformingCurrentStats(UniverseID clusterid);
      file: menu_terraforming.lua
      detailed: ""
      notes: ""
    }
    GetNumTerraformingDynamicStats: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumTerraformingDynamicStats();
      file: menu_terraforming.lua
      detailed: ""
      notes: ""
    }
    GetNumTerraformingProjectGroups: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumTerraformingProjectGroups();
      file: menu_terraforming.lua
      detailed: ""
      notes: ""
    }
    GetNumTerraformingProjects: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: clusterid
        }
        {
          type: bool
          name: useevents
        }
      ]
      declaration: uint32_t GetNumTerraformingProjects(UniverseID clusterid, bool useevents);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    GetNumTickerCache: {
      returnType: uint32_t
      parameters: [
        {
          type: const char*
          name: categoryname
        }
      ]
      declaration: uint32_t GetNumTickerCache(const char* categoryname);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    GetNumTiersOfRole: {
      returnType: uint32_t
      parameters: [
        {
          type: const char*
          name: role
        }
      ]
      declaration: uint32_t GetNumTiersOfRole(const char* role);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumTimeline: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumTimeline(void);
      file: menu_timeline.lua
      detailed: ""
      notes: ""
    }
    GetNumTradeComputerOrders: {
      returnType: size_t
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
      ]
      declaration: size_t GetNumTradeComputerOrders(UniverseID controllableid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumTradeOfferStatistics: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: containerorspaceid
        }
        {
          type: double
          name: starttime
        }
        {
          type: double
          name: endtime
        }
        {
          type: size_t
          name: numdatapoints
        }
      ]
      declaration: uint32_t GetNumTradeOfferStatistics(UniverseID containerorspaceid, double starttime, double endtime, size_t numdatapoints);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    GetNumTransactionLog: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
        {
          type: double
          name: starttime
        }
        {
          type: double
          name: endtime
        }
      ]
      declaration: uint32_t GetNumTransactionLog(UniverseID componentid, double starttime, double endtime);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    GetNumTurrets: {
      returnType: size_t
      parameters: []
      declaration: size_t GetNumTurrets();
      file: crosshair handling.lua
      detailed: ""
      notes: ""
    }
    GetNumTurretSlots: {
      returnType: size_t
      parameters: []
      declaration: size_t GetNumTurretSlots();
      file: crosshair handling.lua
      detailed: ""
      notes: ""
    }
    GetNumUISystemInfo: {
      returnType: UISystemInfoCounts
      parameters: [
        {
          type: UniverseID
          name: clusterid
        }
      ]
      declaration: UISystemInfoCounts GetNumUISystemInfo(UniverseID clusterid);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    GetNumUnavailableUnits: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: const char*
          name: cat
        }
      ]
      declaration: uint32_t GetNumUnavailableUnits(UniverseID defensibleid, const char* cat);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetNumUnitCargo: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: bool
          name: onlydrones
        }
      ]
      declaration: uint32_t GetNumUnitCargo(UniverseID containerid, bool onlydrones);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetNumUnreadLibraryEntries: {
      returnType: uint32_t
      parameters: [
        {
          type: const char*
          name: libraryid
        }
      ]
      declaration: uint32_t GetNumUnreadLibraryEntries(const char* libraryid);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    GetNumUnreadMails: {
      returnType: MailCount
      parameters: []
      declaration: MailCount GetNumUnreadMails();
      file: monitors.lua
      detailed: ""
      notes: ""
    }
    GetNumUpgradeGroupCompatibilities: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: destructibleid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: UniverseID
          name: contextid
        }
        {
          type: const char*
          name: path
        }
        {
          type: const char*
          name: group
        }
        {
          type: const char*
          name: upgradetypename
        }
      ]
      declaration: uint32_t GetNumUpgradeGroupCompatibilities(UniverseID destructibleid, const char* macroname, UniverseID contextid, const char* path, const char* group, const char* upgradetypename);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetNumUpgradeGroups: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: destructibleid
        }
        {
          type: const char*
          name: macroname
        }
      ]
      declaration: uint32_t GetNumUpgradeGroups(UniverseID destructibleid, const char* macroname);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetNumUpgradeSlots: {
      returnType: size_t
      parameters: [
        {
          type: UniverseID
          name: destructibleid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: const char*
          name: upgradetypename
        }
      ]
      declaration: size_t GetNumUpgradeSlots(UniverseID destructibleid, const char* macroname, const char* upgradetypename);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetNumUsedLimitedModules: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: excludedstationid
        }
      ]
      declaration: uint32_t GetNumUsedLimitedModules(UniverseID excludedstationid);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    GetNumUsedLimitedModulesFromSubsequence: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: size_t
          name: cp_idx
        }
      ]
      declaration: uint32_t GetNumUsedLimitedModulesFromSubsequence(UniverseID holomapid, size_t cp_idx);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    GetNumUsedLimitedShips: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumUsedLimitedShips(void);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetNumValidTransporterTargets2: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
        {
          type: UIComponentSlot
          name: currentlocation
        }
      ]
      declaration: uint32_t GetNumValidTransporterTargets2(UniverseID componentid, UIComponentSlot currentlocation);
      file: menu_transporter.lua
      detailed: ""
      notes: ""
    }
    GetNumVenturePlatformDocks: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: ventureplatformid
        }
      ]
      declaration: uint32_t GetNumVenturePlatformDocks(UniverseID ventureplatformid);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    GetNumVenturePlatforms: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
      ]
      declaration: uint32_t GetNumVenturePlatforms(UniverseID defensibleid);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    GetNumVirtualUpgradeSlots: {
      returnType: size_t
      parameters: [
        {
          type: UniverseID
          name: objectid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: const char*
          name: upgradetypename
        }
      ]
      declaration: size_t GetNumVirtualUpgradeSlots(UniverseID objectid, const char* macroname, const char* upgradetypename);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    GetNumWareBlueprintOwners: {
      returnType: uint32_t
      parameters: [
        {
          type: const char*
          name: wareid
        }
      ]
      declaration: uint32_t GetNumWareBlueprintOwners(const char* wareid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumWares: {
      returnType: uint32_t
      parameters: [
        {
          type: const char*
          name: tags
        }
        {
          type: bool
          name: research
        }
        {
          type: const char*
          name: licenceownerid
        }
        {
          type: const char*
          name: exclusiontags
        }
      ]
      declaration: uint32_t GetNumWares(const char* tags, bool research, const char* licenceownerid, const char* exclusiontags);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    GetNumWareSources: {
      returnType: uint32_t
      parameters: [
        {
          type: const char*
          name: wareid
        }
      ]
      declaration: uint32_t GetNumWareSources(const char* wareid);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    GetNumWareTransportTypes: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetNumWareTransportTypes(void);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    GetNumWeaponGroupsByWeapon: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: UniverseID
          name: weaponid
        }
      ]
      declaration: uint32_t GetNumWeaponGroupsByWeapon(UniverseID defensibleid, UniverseID weaponid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetNumWeaponSlots: {
      returnType: size_t
      parameters: []
      declaration: size_t GetNumWeaponSlots();
      file: crosshair handling.lua
      detailed: ""
      notes: ""
    }
    GetObjectCoverAbilityFaction: {
      returnType: const char*
      parameters: [
        {
          type: UniverseID
          name: shipid
        }
      ]
      declaration: const char* GetObjectCoverAbilityFaction(UniverseID shipid);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetObjectEngineStatus: {
      returnType: const char*
      parameters: [
        {
          type: const UniverseID
          name: objectid
        }
      ]
      declaration: const char* GetObjectEngineStatus(const UniverseID objectid);
      file: crosshair handling.lua
      detailed: ""
      notes: ""
    }
    GetObjectIDCode: {
      returnType: const char*
      parameters: [
        {
          type: UniverseID
          name: objectid
        }
      ]
      declaration: const char* GetObjectIDCode(UniverseID objectid);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetObjectPositionInSector: {
      returnType: UIPosRot
      parameters: [
        {
          type: UniverseID
          name: objectid
        }
      ]
      declaration: UIPosRot GetObjectPositionInSector(UniverseID objectid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetOpenTrackConnectionStatus: {
      returnType: const char*
      parameters: []
      declaration: const char* GetOpenTrackConnectionStatus(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetOpenTrackSupportOption: {
      returnType: bool
      parameters: []
      declaration: bool GetOpenTrackSupportOption(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetOrderDefinition: {
      returnType: bool
      parameters: [
        {
          type: OrderDefinition*
          name: result
        }
        {
          type: const char*
          name: orderdef
        }
      ]
      declaration: bool GetOrderDefinition(OrderDefinition* result, const char* orderdef);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetOrderDefinitions: {
      returnType: uint32_t
      parameters: [
        {
          type: OrderDefinition*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetOrderDefinitions(OrderDefinition* result, uint32_t resultlen);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetOrderFailures: {
      returnType: uint32_t
      parameters: [
        {
          type: OrderFailure*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: bool
          name: includelooporders
        }
      ]
      declaration: uint32_t GetOrderFailures(OrderFailure* result, uint32_t resultlen, UniverseID controllableid, bool includelooporders);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetOrderID: {
      returnType: AIOrderID
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: size_t
          name: orderidx
        }
      ]
      declaration: AIOrderID GetOrderID(UniverseID controllableid, size_t orderidx);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetOrderLocationData: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: size_t
          name: orderidx
        }
        {
          type: bool
          name: usedefault
        }
      ]
      declaration: uint32_t GetOrderLocationData(UniverseID* result, uint32_t resultlen, UniverseID controllableid, size_t orderidx, bool usedefault);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetOrderLoopSkillLimit: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetOrderLoopSkillLimit();
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetOrderQueueCurrentIdx: {
      returnType: size_t
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
      ]
      declaration: size_t GetOrderQueueCurrentIdx(UniverseID controllableid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetOrderQueueFirstLoopIdx: {
      returnType: size_t
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: bool*
          name: isvalid
        }
      ]
      declaration: size_t GetOrderQueueFirstLoopIdx(UniverseID controllableid, bool* isvalid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetOrders: {
      returnType: uint32_t
      parameters: [
        {
          type: Order*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: controllableid
        }
      ]
      declaration: uint32_t GetOrders(Order* result, uint32_t resultlen, UniverseID controllableid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetOrders2: {
      returnType: uint32_t
      parameters: [
        {
          type: Order2*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: controllableid
        }
      ]
      declaration: uint32_t GetOrders2(Order2* result, uint32_t resultlen, UniverseID controllableid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetOverlayCols3: {
      returnType: uint32_t
      parameters: [
        {
          type: OverlayCellInfo3*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: uint32_t
          name: rowidx
        }
      ]
      declaration: uint32_t GetOverlayCols3(OverlayCellInfo3* result, uint32_t resultlen, uint32_t rowidx);
      file: overlay.lua
      detailed: ""
      notes: ""
    }
    GetOverlayDefinition: {
      returnType: OverlayInfo
      parameters: []
      declaration: OverlayInfo GetOverlayDefinition(void);
      file: overlay.lua
      detailed: ""
      notes: ""
    }
    GetOwnerDetails: {
      returnType: FactionDetails
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
      ]
      declaration: FactionDetails GetOwnerDetails(UniverseID componentid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetPaidBuildPlotCenterOffset: {
      returnType: Coord3D
      parameters: [
        {
          type: UniverseID
          name: stationid
        }
      ]
      declaration: Coord3D GetPaidBuildPlotCenterOffset(UniverseID stationid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetPaidBuildPlotSize: {
      returnType: Coord3D
      parameters: [
        {
          type: UniverseID
          name: stationid
        }
      ]
      declaration: Coord3D GetPaidBuildPlotSize(UniverseID stationid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetPaintThemeMod: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: themeid
        }
        {
          type: const char*
          name: factionid
        }
        {
          type: UIPaintMod*
          name: paintmod
        }
      ]
      declaration: bool GetPaintThemeMod(const char* themeid, const char* factionid, UIPaintMod* paintmod);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetParentComponent: {
      returnType: UniverseID
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
      ]
      declaration: UniverseID GetParentComponent(UniverseID componentid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetPeople2: {
      returnType: uint32_t
      parameters: [
        {
          type: PeopleInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: bool
          name: includearriving
        }
      ]
      declaration: uint32_t GetPeople2(PeopleInfo* result, uint32_t resultlen, UniverseID controllableid, bool includearriving);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetPeopleAfterOrders: {
      returnType: uint32_t
      parameters: [
        {
          type: NPCInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: int32_t
          name: numorders
        }
      ]
      declaration: uint32_t GetPeopleAfterOrders(NPCInfo* result, uint32_t resultlen, UniverseID controllableid, int32_t numorders);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetPeopleCapacity: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: bool
          name: includepilot
        }
      ]
      declaration: uint32_t GetPeopleCapacity(UniverseID controllableid, const char* macroname, bool includepilot);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    GetPersonCombinedSkill: {
      returnType: int32_t
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: NPCSeed
          name: person
        }
        {
          type: const char*
          name: role
        }
        {
          type: const char*
          name: postid
        }
      ]
      declaration: int32_t GetPersonCombinedSkill(UniverseID controllableid, NPCSeed person, const char* role, const char* postid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetPersonName: {
      returnType: const char*
      parameters: [
        {
          type: NPCSeed
          name: person
        }
        {
          type: UniverseID
          name: controllableid
        }
      ]
      declaration: const char* GetPersonName(NPCSeed person, UniverseID controllableid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetPersonRole: {
      returnType: const char*
      parameters: [
        {
          type: NPCSeed
          name: person
        }
        {
          type: UniverseID
          name: controllableid
        }
      ]
      declaration: const char* GetPersonRole(NPCSeed person, UniverseID controllableid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetPersonRoleName: {
      returnType: const char*
      parameters: [
        {
          type: NPCSeed
          name: person
        }
        {
          type: UniverseID
          name: controllableid
        }
      ]
      declaration: const char* GetPersonRoleName(NPCSeed person, UniverseID controllableid);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    GetPersonSkills3: {
      returnType: uint32_t
      parameters: [
        {
          type: SkillInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: NPCSeed
          name: person
        }
        {
          type: UniverseID
          name: controllableid
        }
      ]
      declaration: uint32_t GetPersonSkills3(SkillInfo* result, uint32_t resultlen, NPCSeed person, UniverseID controllableid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetPersonSkillsForAssignment: {
      returnType: uint32_t
      parameters: [
        {
          type: Skill2*
          name: result
        }
        {
          type: NPCSeed
          name: person
        }
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: const char*
          name: role
        }
        {
          type: const char*
          name: postid
        }
      ]
      declaration: uint32_t GetPersonSkillsForAssignment(Skill2* result, NPCSeed person, UniverseID controllableid, const char* role, const char* postid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetPersonSuitableControlPosts: {
      returnType: uint32_t
      parameters: [
        {
          type: ControlPostInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: UniverseID
          name: personcontrollableid
        }
        {
          type: NPCSeed
          name: person
        }
        {
          type: bool
          name: free
        }
      ]
      declaration: uint32_t GetPersonSuitableControlPosts(ControlPostInfo* result, uint32_t resultlen, UniverseID controllableid, UniverseID personcontrollableid, NPCSeed person, bool free);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetPersonTier: {
      returnType: int32_t
      parameters: [
        {
          type: NPCSeed
          name: npc
        }
        {
          type: const char*
          name: role
        }
        {
          type: UniverseID
          name: controllableid
        }
      ]
      declaration: int32_t GetPersonTier(NPCSeed npc, const char* role, UniverseID controllableid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetPickedBuildMapEntry2: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: UIConstructionPlanEntry*
          name: result
        }
        {
          type: bool
          name: requirecomponentid
        }
      ]
      declaration: bool GetPickedBuildMapEntry2(UniverseID holomapid, UniverseID defensibleid, UIConstructionPlanEntry* result, bool requirecomponentid);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    GetPickedMapComponent: {
      returnType: UniverseID
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
      ]
      declaration: UniverseID GetPickedMapComponent(UniverseID holomapid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetPickedMapInterSectorDefence: {
      returnType: SubordinateGroup
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
      ]
      declaration: SubordinateGroup GetPickedMapInterSectorDefence(UniverseID holomapid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetPickedMapMacroSlot: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: UniverseID
          name: moduleid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: bool
          name: ismodule
        }
        {
          type: UILoadoutSlot*
          name: result
        }
      ]
      declaration: bool GetPickedMapMacroSlot(UniverseID holomapid, UniverseID defensibleid, UniverseID moduleid, const char* macroname, bool ismodule, UILoadoutSlot* result);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetPickedMapMission: {
      returnType: MissionID
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
      ]
      declaration: MissionID GetPickedMapMission(UniverseID holomapid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetPickedMapMissionOffer: {
      returnType: UniverseID
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
      ]
      declaration: UniverseID GetPickedMapMissionOffer(UniverseID holomapid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetPickedMapOrder: {
      returnType: UniverseID
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: Order*
          name: result
        }
        {
          type: bool*
          name: intermediate
        }
      ]
      declaration: UniverseID GetPickedMapOrder(UniverseID holomapid, Order* result, bool* intermediate);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetPickedMapSyncPoint: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
      ]
      declaration: uint32_t GetPickedMapSyncPoint(UniverseID holomapid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetPickedMapSyncPointOwningOrder: {
      returnType: UniverseID
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: Order*
          name: result
        }
      ]
      declaration: UniverseID GetPickedMapSyncPointOwningOrder(UniverseID holomapid, Order* result);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetPickedMapTradeOffer: {
      returnType: TradeID
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
      ]
      declaration: TradeID GetPickedMapTradeOffer(UniverseID holomapid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetPickedMultiverseMapPlayer: {
      returnType: MultiverseMapPickInfo
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
      ]
      declaration: MultiverseMapPickInfo GetPickedMultiverseMapPlayer(UniverseID holomapid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetPlannedDefaultOrder: {
      returnType: bool
      parameters: [
        {
          type: Order*
          name: result
        }
        {
          type: UniverseID
          name: controllableid
        }
      ]
      declaration: bool GetPlannedDefaultOrder(Order* result, UniverseID controllableid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetPlannedLimitedModules: {
      returnType: uint32_t
      parameters: [
        {
          type: UIMacroCount*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: constructionplanid
        }
      ]
      declaration: uint32_t GetPlannedLimitedModules(UIMacroCount* result, uint32_t resultlen, const char* constructionplanid);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    GetPlannedStationModules: {
      returnType: size_t
      parameters: [
        {
          type: UIConstructionPlanEntry*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: bool
          name: includeall
        }
      ]
      declaration: size_t GetPlannedStationModules(UIConstructionPlanEntry* result, uint32_t resultlen, UniverseID defensibleid, bool includeall);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetPlayerAlertCounts: {
      returnType: uint32_t
      parameters: [
        {
          type: PlayerAlertCounts*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetPlayerAlertCounts(PlayerAlertCounts* result, uint32_t resultlen);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    GetPlayerAlerts2: {
      returnType: uint32_t
      parameters: [
        {
          type: PlayerAlertInfo2*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetPlayerAlerts2(PlayerAlertInfo2* result, uint32_t resultlen);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    GetPlayerAlertSounds2: {
      returnType: uint32_t
      parameters: [
        {
          type: SoundInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: tags
        }
      ]
      declaration: uint32_t GetPlayerAlertSounds2(SoundInfo* result, uint32_t resultlen, const char* tags);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    GetPlayerBuildMethod: {
      returnType: const char*
      parameters: []
      declaration: const char* GetPlayerBuildMethod(void);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetPlayerBuildMethods: {
      returnType: uint32_t
      parameters: [
        {
          type: ProductionMethodInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetPlayerBuildMethods(ProductionMethodInfo* result, uint32_t resultlen);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetPlayerClothingTheme: {
      returnType: const char*
      parameters: []
      declaration: const char* GetPlayerClothingTheme(void);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    GetPlayerComputerID: {
      returnType: UniverseID
      parameters: []
      declaration: UniverseID GetPlayerComputerID(void);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetPlayerContainerID: {
      returnType: UniverseID
      parameters: []
      declaration: UniverseID GetPlayerContainerID(void);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetPlayerControlledShipID: {
      returnType: UniverseID
      parameters: []
      declaration: UniverseID GetPlayerControlledShipID(void);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetPlayerCoverFaction: {
      returnType: const char*
      parameters: []
      declaration: const char* GetPlayerCoverFaction(void);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetPlayerCurrentControlGroup: {
      returnType: const char*
      parameters: []
      declaration: const char* GetPlayerCurrentControlGroup(void);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetPlayerFactionName: {
      returnType: const char*
      parameters: [
        {
          type: bool
          name: userawname
        }
      ]
      declaration: const char* GetPlayerFactionName(bool userawname);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    GetPlayerGalaxyID: {
      returnType: UniverseID
      parameters: []
      declaration: UniverseID GetPlayerGalaxyID(void);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    GetPlayerGlobalLoadoutLevel: {
      returnType: float
      parameters: []
      declaration: float GetPlayerGlobalLoadoutLevel(void);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetPlayerGlobalTradeLoopCargoReservationSetting: {
      returnType: bool
      parameters: []
      declaration: bool GetPlayerGlobalTradeLoopCargoReservationSetting(void);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetPlayerID: {
      returnType: UniverseID
      parameters: []
      declaration: UniverseID GetPlayerID(void);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetPlayerLogos: {
      returnType: uint32_t
      parameters: [
        {
          type: UILogo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: bool
          name: includestandard
        }
        {
          type: bool
          name: includecustom
        }
      ]
      declaration: uint32_t GetPlayerLogos(UILogo* result, uint32_t resultlen, bool includestandard, bool includecustom);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetPlayerName: {
      returnType: const char*
      parameters: []
      declaration: const char* GetPlayerName(void);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    GetPlayerObjectID: {
      returnType: UniverseID
      parameters: []
      declaration: UniverseID GetPlayerObjectID(void);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetPlayerOccupiedShipID: {
      returnType: UniverseID
      parameters: []
      declaration: UniverseID GetPlayerOccupiedShipID(void);
      file: menu_crafting.lua
      detailed: ""
      notes: ""
    }
    GetPlayerPaintTheme: {
      returnType: const char*
      parameters: []
      declaration: const char* GetPlayerPaintTheme(void);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    GetPlayerPaintThemeMod: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: objectid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: UIPaintMod*
          name: paintmod
        }
      ]
      declaration: bool GetPlayerPaintThemeMod(UniverseID objectid, const char* macroname, UIPaintMod* paintmod);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetPlayerPeopleDefinitions: {
      returnType: uint32_t
      parameters: [
        {
          type: PeopleDefinitionInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetPlayerPeopleDefinitions(PeopleDefinitionInfo* result, uint32_t resultlen);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetPlayerShipBuildTasks: {
      returnType: uint32_t
      parameters: [
        {
          type: BuildTaskInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: bool
          name: isinprogress
        }
        {
          type: bool
          name: includeupgrade
        }
      ]
      declaration: uint32_t GetPlayerShipBuildTasks(BuildTaskInfo* result, uint32_t resultlen, bool isinprogress, bool includeupgrade);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetPlayerShipID: {
      returnType: UniverseID
      parameters: []
      declaration: UniverseID GetPlayerShipID(void);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetPlayerShipSize: {
      returnType: const char*
      parameters: []
      declaration: const char* GetPlayerShipSize();
      file: crosshair handling.lua
      detailed: ""
      notes: ""
    }
    GetPlayerTargetOffset: {
      returnType: UIPosRot
      parameters: []
      declaration: UIPosRot GetPlayerTargetOffset(void);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetPlayerZoneID: {
      returnType: UniverseID
      parameters: []
      declaration: UniverseID GetPlayerZoneID(void);
      file: menu_crafting.lua
      detailed: ""
      notes: ""
    }
    GetPOIDetails: {
      returnType: POIDetails
      parameters: [
        {
          type: const uint64_t
          name: poiid
        }
      ]
      declaration: POIDetails GetPOIDetails(const uint64_t poiid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    GetPOMOption: {
      returnType: const char*
      parameters: []
      declaration: const char* GetPOMOption(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetPositionalOffset: {
      returnType: UIPosRot
      parameters: [
        {
          type: UniverseID
          name: positionalid
        }
        {
          type: UniverseID
          name: spaceid
        }
      ]
      declaration: UIPosRot GetPositionalOffset(UniverseID positionalid, UniverseID spaceid);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    GetPresentModeOption: {
      returnType: const char*
      parameters: []
      declaration: const char* GetPresentModeOption(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetPrimaryWeapon: {
      returnType: WeaponDetails
      parameters: [
        {
          type: size_t
          name: weaponnum
        }
      ]
      declaration: WeaponDetails GetPrimaryWeapon(size_t weaponnum);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    GetPriorityMissiontargetPOSID: {
      returnType: int
      parameters: []
      declaration: int GetPriorityMissiontargetPOSID();
      file: crosshair handling.lua
      detailed: ""
      notes: ""
    }
    GetProductionMethodInfo: {
      returnType: ProductionMethodInfo2
      parameters: [
        {
          type: const char*
          name: wareid
        }
        {
          type: const char*
          name: productionmethod
        }
      ]
      declaration: ProductionMethodInfo2 GetProductionMethodInfo(const char* wareid, const char* productionmethod);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    GetProductionMethodResources: {
      returnType: uint32_t
      parameters: [
        {
          type: UIWareAmount*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: wareid
        }
        {
          type: const char*
          name: productionmethod
        }
      ]
      declaration: uint32_t GetProductionMethodResources(UIWareAmount* result, uint32_t resultlen, const char* wareid, const char* productionmethod);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    GetPurchasableCargo: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: const char*
          name: ""
        }
      ]
      declaration: uint32_t GetPurchasableCargo(UniverseID containerid, const char*);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetPurposeName: {
      returnType: const char*
      parameters: [
        {
          type: const char*
          name: purposeid
        }
      ]
      declaration: const char* GetPurposeName(const char* purposeid);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    GetRadarModeOption: {
      returnType: size_t
      parameters: []
      declaration: size_t GetRadarModeOption(void);
      file: monitors.lua
      detailed: ""
      notes: ""
    }
    GetRealComponentClass: {
      returnType: const char*
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
      ]
      declaration: const char* GetRealComponentClass(UniverseID componentid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetRectangleTargetElementExtents: {
      returnType: float
      parameters: [
        {
          type: const int
          name: posid
        }
      ]
      declaration: float GetRectangleTargetElementExtents(const int posid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    GetReducedSpeedModeOption: {
      returnType: double
      parameters: []
      declaration: double GetReducedSpeedModeOption(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetRegionBoundaries: {
      returnType: uint32_t
      parameters: [
        {
          type: RegionBoundary*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: regiondefinition
        }
      ]
      declaration: uint32_t GetRegionBoundaries(RegionBoundary* result, uint32_t resultlen, const char* regiondefinition);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    GetRegionDefinition: {
      returnType: const char*
      parameters: [
        {
          type: UniverseID
          name: regionid
        }
      ]
      declaration: const char* GetRegionDefinition(UniverseID regionid);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    GetRegionDefinitions: {
      returnType: uint32_t
      parameters: [
        {
          type: RegionDefinition*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetRegionDefinitions(RegionDefinition* result, uint32_t resultlen);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    GetRegionFields: {
      returnType: uint32_t
      parameters: [
        {
          type: RegionField*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: regiondefinition
        }
      ]
      declaration: uint32_t GetRegionFields(RegionField* result, uint32_t resultlen, const char* regiondefinition);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    GetRegionResources: {
      returnType: uint32_t
      parameters: [
        {
          type: RegionResource*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: regiondefinition
        }
      ]
      declaration: uint32_t GetRegionResources(RegionResource* result, uint32_t resultlen, const char* regiondefinition);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    GetRelationRangeUIMaxValue: {
      returnType: int32_t
      parameters: [
        {
          type: const char*
          name: relationrangeid
        }
      ]
      declaration: int32_t GetRelationRangeUIMaxValue(const char* relationrangeid);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    GetRelationStatus3: {
      returnType: RelationDetails
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
        {
          type: const char*const
          name: connectionname
        }
      ]
      declaration: RelationDetails GetRelationStatus3(const UniverseID componentid, const char*const connectionname);
      file: monitors.lua
      detailed: ""
      notes: ""
    }
    GetRelativeAimOffset: {
      returnType: PosRot
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
      ]
      declaration: PosRot GetRelativeAimOffset(const UniverseID componentid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    GetRelativeAimScreenPosition: {
      returnType: Position2D
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
        {
          type: const uint32_t
          name: iconsizeonscreen
        }
        {
          type: const uint32_t
          name: iconsizeoffscreen
        }
      ]
      declaration: Position2D GetRelativeAimScreenPosition(const UniverseID componentid, const uint32_t iconsizeonscreen, const uint32_t iconsizeoffscreen);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    GetRemainingOxygen: {
      returnType: float
      parameters: []
      declaration: float GetRemainingOxygen();
      file: crosshair handling.lua
      detailed: ""
      notes: ""
    }
    GetRemovedConstructionPlanModules2: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: uint32_t*
          name: changedIndices
        }
        {
          type: uint32_t*
          name: numChangedIndices
        }
      ]
      declaration: uint32_t GetRemovedConstructionPlanModules2(UniverseID* result, uint32_t resultlen, uint32_t* changedIndices, uint32_t* numChangedIndices);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    GetRemovedStationModules2: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: uint32_t*
          name: changedIndices
        }
        {
          type: uint32_t*
          name: numChangedIndices
        }
      ]
      declaration: uint32_t GetRemovedStationModules2(UniverseID* result, uint32_t resultlen, uint32_t* changedIndices, uint32_t* numChangedIndices);
      file: menu_station_overview.lua
      detailed: ""
      notes: ""
    }
    GetRenderResolutionOption: {
      returnType: ResolutionInfo
      parameters: []
      declaration: ResolutionInfo GetRenderResolutionOption(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetRenderTargetAlpha: {
      returnType: uint32_t
      parameters: [
        {
          type: const int
          name: rendertargetid
        }
      ]
      declaration: uint32_t GetRenderTargetAlpha(const int rendertargetid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetRepairPrice: {
      returnType: int64_t
      parameters: [
        {
          type: UniverseID
          name: componenttorepairid
        }
        {
          type: UniverseID
          name: containerid
        }
      ]
      declaration: int64_t GetRepairPrice(UniverseID componenttorepairid, UniverseID containerid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetRepairResources2: {
      returnType: uint32_t
      parameters: [
        {
          type: UIWareInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: containerid
        }
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: UniverseID
          name: componenttorepairid
        }
      ]
      declaration: uint32_t GetRepairResources2(UIWareInfo* result, uint32_t resultlen, UniverseID containerid, UniverseID defensibleid, UniverseID componenttorepairid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetRequestedGPU: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetRequestedGPU(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetRequestedLanguage: {
      returnType: int32_t
      parameters: []
      declaration: int32_t GetRequestedLanguage(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetRequestedMissionNPCs: {
      returnType: uint32_t
      parameters: [
        {
          type: MissionNPCInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: containerid
        }
      ]
      declaration: uint32_t GetRequestedMissionNPCs(MissionNPCInfo* result, uint32_t resultlen, UniverseID containerid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetRequestedMissionShips: {
      returnType: uint32_t
      parameters: [
        {
          type: MissionShipDeliveryInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetRequestedMissionShips(MissionShipDeliveryInfo* result, uint32_t resultlen);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetRequestedMissionWares: {
      returnType: uint32_t
      parameters: [
        {
          type: MissionWareDeliveryCounts*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: containerid
        }
      ]
      declaration: uint32_t GetRequestedMissionWares(MissionWareDeliveryCounts* result, uint32_t resultlen, UniverseID containerid);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    GetResearchModules: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: containerid
        }
      ]
      declaration: uint32_t GetResearchModules(UniverseID* result, uint32_t resultlen, UniverseID containerid);
      file: menu_research.lua
      detailed: ""
      notes: ""
    }
    GetResourceBoxSize: {
      returnType: float
      parameters: []
      declaration: float GetResourceBoxSize();
      file: targetmonitor.lua
      detailed: ""
      notes: ""
    }
    GetRoleTierNPCs: {
      returnType: uint32_t
      parameters: [
        {
          type: NPCSeed*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: const char*
          name: role
        }
        {
          type: int32_t
          name: skilllevel
        }
      ]
      declaration: uint32_t GetRoleTierNPCs(NPCSeed* result, uint32_t resultlen, UniverseID controllableid, const char* role, int32_t skilllevel);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetRoleTiers: {
      returnType: uint32_t
      parameters: [
        {
          type: RoleTierData*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: const char*
          name: role
        }
      ]
      declaration: uint32_t GetRoleTiers(RoleTierData* result, uint32_t resultlen, UniverseID controllableid, const char* role);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetRoleTiers2: {
      returnType: uint32_t
      parameters: [
        {
          type: RoleTierData*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: const char*
          name: role
        }
        {
          type: bool
          name: includearriving
        }
      ]
      declaration: uint32_t GetRoleTiers2(RoleTierData* result, uint32_t resultlen, UniverseID controllableid, const char* role, bool includearriving);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetRoomForTransporter: {
      returnType: UniverseID
      parameters: [
        {
          type: UIComponentSlot
          name: transporter
        }
      ]
      declaration: UniverseID GetRoomForTransporter(UIComponentSlot transporter);
      file: menu_transporter.lua
      detailed: ""
      notes: ""
    }
    GetSaveFolderPath: {
      returnType: const char*
      parameters: []
      declaration: const char* GetSaveFolderPath(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetSaveInquiryReason: {
      returnType: const char*
      parameters: []
      declaration: const char* GetSaveInquiryReason(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetSaveInquiryText: {
      returnType: const char*
      parameters: []
      declaration: const char* GetSaveInquiryText();
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetSaveLocationName: {
      returnType: const char*
      parameters: []
      declaration: const char* GetSaveLocationName(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetScanProgress: {
      returnType: float
      parameters: []
      declaration: float GetScanProgress();
      file: crosshair handling.lua
      detailed: ""
      notes: ""
    }
    GetScenarioLoadingInfoTexts: {
      returnType: uint32_t
      parameters: [
        {
          type: const char**
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetScenarioLoadingInfoTexts(const char** result, uint32_t resultlen);
      file: loading.lua
      detailed: ""
      notes: ""
    }
    GetScenarioLoadingTexts: {
      returnType: uint32_t
      parameters: [
        {
          type: const char**
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetScenarioLoadingTexts(const char** result, uint32_t resultlen);
      file: loading.lua
      detailed: ""
      notes: ""
    }
    GetScenarioScoreForNextStar: {
      returnType: float
      parameters: [
        {
          type: const char*
          name: scenarioid
        }
      ]
      declaration: float GetScenarioScoreForNextStar(const char* scenarioid);
      file: menu_scenario_debriefing.lua
      detailed: ""
      notes: ""
    }
    GetScenarioScoreForRating: {
      returnType: float
      parameters: [
        {
          type: const char*
          name: scenarioid
        }
        {
          type: uint32_t
          name: rating
        }
      ]
      declaration: float GetScenarioScoreForRating(const char* scenarioid, uint32_t rating);
      file: menu_scenario_debriefing.lua
      detailed: ""
      notes: ""
    }
    GetScenarioStats: {
      returnType: uint32_t
      parameters: [
        {
          type: ScenarioStat*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetScenarioStats(ScenarioStat* result, uint32_t resultlen);
      file: menu_scenario_debriefing.lua
      detailed: ""
      notes: ""
    }
    GetScreenDisplayOption: {
      returnType: bool
      parameters: []
      declaration: bool GetScreenDisplayOption(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetSecondaryWeapon: {
      returnType: WeaponDetails
      parameters: [
        {
          type: size_t
          name: weaponnum
        }
      ]
      declaration: WeaponDetails GetSecondaryWeapon(size_t weaponnum);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    GetSectorControlStation: {
      returnType: UniverseID
      parameters: [
        {
          type: UniverseID
          name: sectorid
        }
      ]
      declaration: UniverseID GetSectorControlStation(UniverseID sectorid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetSectorPopulation: {
      returnType: uint64_t
      parameters: [
        {
          type: UniverseID
          name: sectorid
        }
      ]
      declaration: uint64_t GetSectorPopulation(UniverseID sectorid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetSectorsByOwner: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: factionid
        }
      ]
      declaration: uint32_t GetSectorsByOwner(UniverseID* result, uint32_t resultlen, const char* factionid);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    GetSelectedBuildMapEntry: {
      returnType: size_t
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
      ]
      declaration: size_t GetSelectedBuildMapEntry(UniverseID holomapid);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    GetShieldGroup: {
      returnType: bool
      parameters: [
        {
          type: ShieldGroup*
          name: result
        }
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: UniverseID
          name: destructibleid
        }
      ]
      declaration: bool GetShieldGroup(ShieldGroup* result, UniverseID defensibleid, UniverseID destructibleid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetShieldGroups: {
      returnType: uint32_t
      parameters: [
        {
          type: ShieldGroup*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: defensibleid
        }
      ]
      declaration: uint32_t GetShieldGroups(ShieldGroup* result, uint32_t resultlen, UniverseID defensibleid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetShieldHullBarGlowFactor: {
      returnType: float
      parameters: [
        {
          type: const int
          name: shieldhullbarid
        }
      ]
      declaration: float GetShieldHullBarGlowFactor(const int shieldhullbarid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetShieldHullBarHullPercent: {
      returnType: float
      parameters: [
        {
          type: const int
          name: shieldhullbarid
        }
      ]
      declaration: float GetShieldHullBarHullPercent(const int shieldhullbarid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetShieldHullBarShieldPercent: {
      returnType: float
      parameters: [
        {
          type: const int
          name: shieldhullbarid
        }
      ]
      declaration: float GetShieldHullBarShieldPercent(const int shieldhullbarid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetShipCombinedSkill: {
      returnType: int32_t
      parameters: [
        {
          type: UniverseID
          name: shipid
        }
      ]
      declaration: int32_t GetShipCombinedSkill(UniverseID shipid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetShipOrLaserTowerSize: {
      returnType: const char*
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
      ]
      declaration: const char* GetShipOrLaserTowerSize(const UniverseID componentid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    GetShipTradeLoopCargoReservationSetting: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: shipid
        }
      ]
      declaration: bool GetShipTradeLoopCargoReservationSetting(UniverseID shipid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetShipValue: {
      returnType: int64_t
      parameters: [
        {
          type: const char*
          name: macroname
        }
        {
          type: UILoadout2
          name: uiloadout
        }
      ]
      declaration: int64_t GetShipValue(const char* macroname, UILoadout2 uiloadout);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetSignalLeakIndicatorOption: {
      returnType: bool
      parameters: []
      declaration: bool GetSignalLeakIndicatorOption(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetSkills: {
      returnType: uint32_t
      parameters: [
        {
          type: SkillInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetSkills(SkillInfo* result, uint32_t resultlen);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetSliderCellAccuracyOverride: {
      returnType: int32_t
      parameters: [
        {
          type: const int
          name: slidercellid
        }
      ]
      declaration: int32_t GetSliderCellAccuracyOverride(const int slidercellid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetSliderCellBackgroundColor: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: slidercellid
        }
        {
          type: Color*
          name: color
        }
      ]
      declaration: bool GetSliderCellBackgroundColor(const int slidercellid, Color* color);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetSliderCellFont: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: slidercellid
        }
        {
          type: Font*
          name: font
        }
      ]
      declaration: bool GetSliderCellFont(const int slidercellid, Font* font);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetSliderCellInactiveBackgroundColor: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: slidercellid
        }
        {
          type: Color*
          name: color
        }
      ]
      declaration: bool GetSliderCellInactiveBackgroundColor(const int slidercellid, Color* color);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetSliderCellNegativeValueColor: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: slidercellid
        }
        {
          type: Color*
          name: color
        }
      ]
      declaration: bool GetSliderCellNegativeValueColor(const int slidercellid, Color* color);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetSliderCellNegativeValueGlowFactor: {
      returnType: float
      parameters: [
        {
          type: const int
          name: slidercellid
        }
      ]
      declaration: float GetSliderCellNegativeValueGlowFactor(const int slidercellid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetSliderCellSuffix: {
      returnType: const char*
      parameters: [
        {
          type: const int
          name: slidercellid
        }
      ]
      declaration: const char* GetSliderCellSuffix(const int slidercellid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetSliderCellText: {
      returnType: const char*
      parameters: [
        {
          type: const int
          name: slidercellid
        }
      ]
      declaration: const char* GetSliderCellText(const int slidercellid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetSliderCellTextColor: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: slidercellid
        }
        {
          type: Color*
          name: color
        }
      ]
      declaration: bool GetSliderCellTextColor(const int slidercellid, Color* color);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetSliderCellTextGlowFactor: {
      returnType: float
      parameters: [
        {
          type: const int
          name: slidercellid
        }
      ]
      declaration: float GetSliderCellTextGlowFactor(const int slidercellid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetSliderCellValueColor: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: slidercellid
        }
        {
          type: Color*
          name: color
        }
      ]
      declaration: bool GetSliderCellValueColor(const int slidercellid, Color* color);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetSliderCellValueGlowFactor: {
      returnType: float
      parameters: [
        {
          type: const int
          name: slidercellid
        }
      ]
      declaration: float GetSliderCellValueGlowFactor(const int slidercellid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetSliderCellValues: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: slidercellid
        }
        {
          type: SliderCellDetails*
          name: values
        }
      ]
      declaration: bool GetSliderCellValues(const int slidercellid, SliderCellDetails* values);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetSlotCompatibilities: {
      returnType: uint32_t
      parameters: [
        {
          type: EquipmentCompatibilityInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: UniverseID
          name: moduleid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: bool
          name: ismodule
        }
        {
          type: const char*
          name: upgradetypename
        }
        {
          type: size_t
          name: slot
        }
      ]
      declaration: uint32_t GetSlotCompatibilities(EquipmentCompatibilityInfo* result, uint32_t resultlen, UniverseID defensibleid, UniverseID moduleid, const char* macroname, bool ismodule, const char* upgradetypename, size_t slot);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetSlotComponent: {
      returnType: UniverseID
      parameters: [
        {
          type: UIComponentSlot
          name: slot
        }
      ]
      declaration: UniverseID GetSlotComponent(UIComponentSlot slot);
      file: menu_transporter.lua
      detailed: ""
      notes: ""
    }
    GetSlotSize: {
      returnType: const char*
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: UniverseID
          name: moduleid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: bool
          name: ismodule
        }
        {
          type: const char*
          name: upgradetypename
        }
        {
          type: size_t
          name: slot
        }
      ]
      declaration: const char* GetSlotSize(UniverseID defensibleid, UniverseID moduleid, const char* macroname, bool ismodule, const char* upgradetypename, size_t slot);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetSofttarget2: {
      returnType: SofttargetDetails2
      parameters: []
      declaration: SofttargetDetails2 GetSofttarget2(void);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetSoftwareMaxCompatibleVersion: {
      returnType: const char*
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: const char*
          name: softwarename
        }
      ]
      declaration: const char* GetSoftwareMaxCompatibleVersion(UniverseID controllableid, const char* macroname, const char* softwarename);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetSoftwarePredecessors: {
      returnType: uint32_t
      parameters: [
        {
          type: const char**
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: softwarename
        }
      ]
      declaration: uint32_t GetSoftwarePredecessors(const char** result, uint32_t resultlen, const char* softwarename);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetSoftwareSlots: {
      returnType: uint32_t
      parameters: [
        {
          type: SoftwareSlot*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: const char*
          name: macroname
        }
      ]
      declaration: uint32_t GetSoftwareSlots(SoftwareSlot* result, uint32_t resultlen, UniverseID controllableid, const char* macroname);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetSoundDevices: {
      returnType: uint32_t
      parameters: [
        {
          type: const char**
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetSoundDevices(const char** result, uint32_t resultlen);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetSpeakTargetNameOption: {
      returnType: bool
      parameters: []
      declaration: bool GetSpeakTargetNameOption(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetSpecialNPCs: {
      returnType: SpecialNPCSet
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
      ]
      declaration: SpecialNPCSet GetSpecialNPCs(const UniverseID componentid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    GetSSROption2: {
      returnType: const char*
      parameters: []
      declaration: const char* GetSSROption2(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetStandardButtonHelpOverlayInfo2: {
      returnType: UIOverlayInfo2
      parameters: [
        {
          type: const int
          name: frameid
        }
        {
          type: const char*
          name: button
        }
      ]
      declaration: UIOverlayInfo2 GetStandardButtonHelpOverlayInfo2(const int frameid, const char* button);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetStandardButtonOffsetX: {
      returnType: uint32_t
      parameters: [
        {
          type: const int
          name: frameid
        }
      ]
      declaration: uint32_t GetStandardButtonOffsetX(const int frameid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetStandardButtonOffsetY: {
      returnType: uint32_t
      parameters: [
        {
          type: const int
          name: frameid
        }
      ]
      declaration: uint32_t GetStandardButtonOffsetY(const int frameid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetStardustIntensityOption: {
      returnType: float
      parameters: []
      declaration: float GetStardustIntensityOption(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetStartmenuBackgroundOption: {
      returnType: const char*
      parameters: []
      declaration: const char* GetStartmenuBackgroundOption(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetStartmenuBackgrounds: {
      returnType: uint32_t
      parameters: [
        {
          type: StartmenuBackgroundInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetStartmenuBackgrounds(StartmenuBackgroundInfo* result, uint32_t resultlen);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetStartmenuParam: {
      returnType: const char*
      parameters: []
      declaration: const char* GetStartmenuParam(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetStationModules: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: stationid
        }
        {
          type: bool
          name: includeconstructions
        }
        {
          type: bool
          name: includewrecks
        }
      ]
      declaration: uint32_t GetStationModules(UniverseID* result, uint32_t resultlen, UniverseID stationid, bool includeconstructions, bool includewrecks);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetStationOverviewGraphWares: {
      returnType: uint32_t
      parameters: [
        {
          type: const char**
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: stationid
        }
      ]
      declaration: uint32_t GetStationOverviewGraphWares(const char** result, uint32_t resultlen, UniverseID stationid);
      file: menu_station_overview.lua
      detailed: ""
      notes: ""
    }
    GetStationValue: {
      returnType: int64_t
      parameters: [
        {
          type: const char*
          name: macroname
        }
        {
          type: const char*
          name: constructionplanid
        }
      ]
      declaration: int64_t GetStationValue(const char* macroname, const char* constructionplanid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetStatusBarCurrentValue: {
      returnType: float
      parameters: [
        {
          type: const int
          name: statusbarid
        }
      ]
      declaration: float GetStatusBarCurrentValue(const int statusbarid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetStatusBarMarkerColor: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: statusbarid
        }
        {
          type: Color*
          name: color
        }
      ]
      declaration: bool GetStatusBarMarkerColor(const int statusbarid, Color* color);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetStatusBarMarkerGlowFactor: {
      returnType: float
      parameters: [
        {
          type: const int
          name: statusbarid
        }
      ]
      declaration: float GetStatusBarMarkerGlowFactor(const int statusbarid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetStatusBarMaxValue: {
      returnType: float
      parameters: [
        {
          type: const int
          name: statusbarid
        }
      ]
      declaration: float GetStatusBarMaxValue(const int statusbarid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetStatusBarNegChangeColor: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: statusbarid
        }
        {
          type: Color*
          name: color
        }
      ]
      declaration: bool GetStatusBarNegChangeColor(const int statusbarid, Color* color);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetStatusBarNegChangeGlowFactor: {
      returnType: float
      parameters: [
        {
          type: const int
          name: statusbarid
        }
      ]
      declaration: float GetStatusBarNegChangeGlowFactor(const int statusbarid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetStatusBarPosChangeColor: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: statusbarid
        }
        {
          type: Color*
          name: color
        }
      ]
      declaration: bool GetStatusBarPosChangeColor(const int statusbarid, Color* color);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetStatusBarPosChangeGlowFactor: {
      returnType: float
      parameters: [
        {
          type: const int
          name: statusbarid
        }
      ]
      declaration: float GetStatusBarPosChangeGlowFactor(const int statusbarid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetStatusBarStartValue: {
      returnType: float
      parameters: [
        {
          type: const int
          name: statusbarid
        }
      ]
      declaration: float GetStatusBarStartValue(const int statusbarid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetStatusBarTitleColor: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: statusbarid
        }
        {
          type: Color*
          name: color
        }
      ]
      declaration: bool GetStatusBarTitleColor(const int statusbarid, Color* color);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetStatusBarTitleGlowFactor: {
      returnType: float
      parameters: [
        {
          type: const int
          name: statusbarid
        }
      ]
      declaration: float GetStatusBarTitleGlowFactor(const int statusbarid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetStatusBarValueColor: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: statusbarid
        }
        {
          type: Color*
          name: color
        }
      ]
      declaration: bool GetStatusBarValueColor(const int statusbarid, Color* color);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetStatusBarValueGlowFactor: {
      returnType: float
      parameters: [
        {
          type: const int
          name: statusbarid
        }
      ]
      declaration: float GetStatusBarValueGlowFactor(const int statusbarid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetSteamID: {
      returnType: const char*
      parameters: []
      declaration: const char* GetSteamID(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetSubordinateGroupAssignment: {
      returnType: const char*
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: int
          name: group
        }
      ]
      declaration: const char* GetSubordinateGroupAssignment(UniverseID controllableid, int group);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetSubordinateGroupProtectedPosition: {
      returnType: UIPosRot
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: int
          name: group
        }
      ]
      declaration: UIPosRot GetSubordinateGroupProtectedPosition(UniverseID controllableid, int group);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetSubordinateGroupProtectedSector: {
      returnType: UniverseID
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: int
          name: group
        }
      ]
      declaration: UniverseID GetSubordinateGroupProtectedSector(UniverseID controllableid, int group);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetSubordinatesOfGroup: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: commanderid
        }
        {
          type: int
          name: group
        }
      ]
      declaration: uint32_t GetSubordinatesOfGroup(UniverseID* result, uint32_t resultlen, UniverseID commanderid, int group);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetSuitableControlPosts: {
      returnType: uint32_t
      parameters: [
        {
          type: ControlPostInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: UniverseID
          name: entityid
        }
        {
          type: bool
          name: free
        }
      ]
      declaration: uint32_t GetSuitableControlPosts(ControlPostInfo* result, uint32_t resultlen, UniverseID controllableid, UniverseID entityid, bool free);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetSupplyBudget: {
      returnType: int64_t
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
      ]
      declaration: int64_t GetSupplyBudget(UniverseID containerid);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    GetSupplyOrderResources: {
      returnType: uint32_t
      parameters: [
        {
          type: SupplyResourceInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: containerid
        }
      ]
      declaration: uint32_t GetSupplyOrderResources(SupplyResourceInfo* result, uint32_t resultlen, UniverseID containerid);
      file: menu_station_overview.lua
      detailed: ""
      notes: ""
    }
    GetSupplyOrders: {
      returnType: uint32_t
      parameters: [
        {
          type: SupplyOverride*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: containerid
        }
        {
          type: bool
          name: defaultorders
        }
      ]
      declaration: uint32_t GetSupplyOrders(SupplyOverride* result, uint32_t resultlen, UniverseID containerid, bool defaultorders);
      file: menu_station_overview.lua
      detailed: ""
      notes: ""
    }
    GetSyncPointAutoRelease: {
      returnType: bool
      parameters: [
        {
          type: uint32_t
          name: syncid
        }
        {
          type: bool
          name: checkall
        }
      ]
      declaration: bool GetSyncPointAutoRelease(uint32_t syncid, bool checkall);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetSyncPointAutoReleaseFromOrder: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: size_t
          name: orderidx
        }
        {
          type: bool
          name: checkall
        }
      ]
      declaration: bool GetSyncPointAutoReleaseFromOrder(UniverseID controllableid, size_t orderidx, bool checkall);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetSyncPointInfo2: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: size_t
          name: orderidx
        }
        {
          type: SyncPointInfo2*
          name: result
        }
      ]
      declaration: bool GetSyncPointInfo2(UniverseID controllableid, size_t orderidx, SyncPointInfo2* result);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetTableBackgroundColor: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: tableid
        }
        {
          type: Color*
          name: color
        }
      ]
      declaration: bool GetTableBackgroundColor(const int tableid, Color* color);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetTableBackgroundID: {
      returnType: const char*
      parameters: [
        {
          type: const int
          name: tableid
        }
      ]
      declaration: const char* GetTableBackgroundID(const int tableid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetTableHighlightMode: {
      returnType: uint32_t
      parameters: [
        {
          type: const int
          name: tableid
        }
      ]
      declaration: uint32_t GetTableHighlightMode(const int tableid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetTableInitialMultiselectedRows: {
      returnType: uint32_t
      parameters: [
        {
          type: uint32_t*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const int
          name: tableid
        }
      ]
      declaration: uint32_t GetTableInitialMultiselectedRows(uint32_t* result, uint32_t resultlen, const int tableid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetTableInitialSelectionInfo: {
      returnType: TableSelectionInfo
      parameters: [
        {
          type: const int
          name: tableid
        }
      ]
      declaration: TableSelectionInfo GetTableInitialSelectionInfo(const int tableid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetTableNextConnectedTable: {
      returnType: int
      parameters: [
        {
          type: const int
          name: tableid
        }
      ]
      declaration: int GetTableNextConnectedTable(const int tableid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetTableNextHorizontalConnectedTable: {
      returnType: int
      parameters: [
        {
          type: const int
          name: tableid
        }
      ]
      declaration: int GetTableNextHorizontalConnectedTable(const int tableid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetTablePreviousConnectedTable: {
      returnType: int
      parameters: [
        {
          type: const int
          name: tableid
        }
      ]
      declaration: int GetTablePreviousConnectedTable(const int tableid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetTablePreviousHorizontalConnectedTable: {
      returnType: int
      parameters: [
        {
          type: const int
          name: tableid
        }
      ]
      declaration: int GetTablePreviousHorizontalConnectedTable(const int tableid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetTargetElementOffset: {
      returnType: PosRot
      parameters: [
        {
          type: const int
          name: posid
        }
      ]
      declaration: PosRot GetTargetElementOffset(const int posid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    GetTerraformingActiveProject: {
      returnType: const char*
      parameters: [
        {
          type: UniverseID
          name: clusterid
        }
      ]
      declaration: const char* GetTerraformingActiveProject(UniverseID clusterid);
      file: menu_station_overview.lua
      detailed: ""
      notes: ""
    }
    GetTerraformingCurrentStats: {
      returnType: uint32_t
      parameters: [
        {
          type: UITerraformingStat*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: clusterid
        }
      ]
      declaration: uint32_t GetTerraformingCurrentStats(UITerraformingStat* result, uint32_t resultlen, UniverseID clusterid);
      file: menu_terraforming.lua
      detailed: ""
      notes: ""
    }
    GetTerraformingDynamicStats: {
      returnType: uint32_t
      parameters: [
        {
          type: UITerraformingStat*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetTerraformingDynamicStats(UITerraformingStat* result, uint32_t resultlen);
      file: menu_terraforming.lua
      detailed: ""
      notes: ""
    }
    GetTerraformingMissionInfo: {
      returnType: UITerraformingMissionInfo
      parameters: [
        {
          type: UniverseID
          name: clusterid
        }
      ]
      declaration: UITerraformingMissionInfo GetTerraformingMissionInfo(UniverseID clusterid);
      file: menu_terraforming.lua
      detailed: ""
      notes: ""
    }
    GetTerraformingProjectAvailabilityTime: {
      returnType: double
      parameters: [
        {
          type: UniverseID
          name: clusterid
        }
        {
          type: const char*
          name: projectid
        }
      ]
      declaration: double GetTerraformingProjectAvailabilityTime(UniverseID clusterid, const char* projectid);
      file: menu_terraforming.lua
      detailed: ""
      notes: ""
    }
    GetTerraformingProjectBlockingProjects: {
      returnType: uint32_t
      parameters: [
        {
          type: const char**
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: clusterid
        }
        {
          type: const char*
          name: projectid
        }
      ]
      declaration: uint32_t GetTerraformingProjectBlockingProjects(const char** result, uint32_t resultlen, UniverseID clusterid, const char* projectid);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    GetTerraformingProjectCompletionFraction: {
      returnType: float
      parameters: [
        {
          type: UniverseID
          name: clusterid
        }
        {
          type: const char*
          name: projectid
        }
      ]
      declaration: float GetTerraformingProjectCompletionFraction(UniverseID clusterid, const char* projectid);
      file: menu_terraforming.lua
      detailed: ""
      notes: ""
    }
    GetTerraformingProjectCompletionTime: {
      returnType: double
      parameters: [
        {
          type: UniverseID
          name: clusterid
        }
        {
          type: const char*
          name: projectid
        }
      ]
      declaration: double GetTerraformingProjectCompletionTime(UniverseID clusterid, const char* projectid);
      file: menu_terraforming.lua
      detailed: ""
      notes: ""
    }
    GetTerraformingProjectConditions: {
      returnType: uint32_t
      parameters: [
        {
          type: UITerraformingProjectCondition*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: clusterid
        }
        {
          type: const char*
          name: projectid
        }
      ]
      declaration: uint32_t GetTerraformingProjectConditions(UITerraformingProjectCondition* result, uint32_t resultlen, UniverseID clusterid, const char* projectid);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    GetTerraformingProjectDeliveredResources: {
      returnType: uint32_t
      parameters: [
        {
          type: UIWareInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: clusterid
        }
        {
          type: const char*
          name: projectid
        }
      ]
      declaration: uint32_t GetTerraformingProjectDeliveredResources(UIWareInfo* result, uint32_t resultlen, UniverseID clusterid, const char* projectid);
      file: menu_terraforming.lua
      detailed: ""
      notes: ""
    }
    GetTerraformingProjectDroneStatus: {
      returnType: UITerraformingDroneInfo
      parameters: [
        {
          type: UniverseID
          name: clusterid
        }
        {
          type: const char*
          name: projectid
        }
      ]
      declaration: UITerraformingDroneInfo GetTerraformingProjectDroneStatus(UniverseID clusterid, const char* projectid);
      file: menu_terraforming.lua
      detailed: ""
      notes: ""
    }
    GetTerraformingProjectEffects: {
      returnType: uint32_t
      parameters: [
        {
          type: UITerraformingProjectEffect*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: clusterid
        }
        {
          type: const char*
          name: projectid
        }
      ]
      declaration: uint32_t GetTerraformingProjectEffects(UITerraformingProjectEffect* result, uint32_t resultlen, UniverseID clusterid, const char* projectid);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    GetTerraformingProjectGroups: {
      returnType: uint32_t
      parameters: [
        {
          type: UITerraformingProjectGroup*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetTerraformingProjectGroups(UITerraformingProjectGroup* result, uint32_t resultlen);
      file: menu_terraforming.lua
      detailed: ""
      notes: ""
    }
    GetTerraformingProjectPredecessorGroups: {
      returnType: uint32_t
      parameters: [
        {
          type: UITerraformingProjectPredecessorGroup*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: clusterid
        }
        {
          type: const char*
          name: projectid
        }
      ]
      declaration: uint32_t GetTerraformingProjectPredecessorGroups(UITerraformingProjectPredecessorGroup* result, uint32_t resultlen, UniverseID clusterid, const char* projectid);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    GetTerraformingProjectPredecessors: {
      returnType: uint32_t
      parameters: [
        {
          type: const char**
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: clusterid
        }
        {
          type: const char*
          name: projectid
        }
      ]
      declaration: uint32_t GetTerraformingProjectPredecessors(const char** result, uint32_t resultlen, UniverseID clusterid, const char* projectid);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    GetTerraformingProjectRebatedResources: {
      returnType: uint32_t
      parameters: [
        {
          type: UIWareInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: clusterid
        }
        {
          type: const char*
          name: projectid
        }
      ]
      declaration: uint32_t GetTerraformingProjectRebatedResources(UIWareInfo* result, uint32_t resultlen, UniverseID clusterid, const char* projectid);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    GetTerraformingProjectRebates: {
      returnType: uint32_t
      parameters: [
        {
          type: UITerraformingProjectRebate*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: clusterid
        }
        {
          type: const char*
          name: projectid
        }
      ]
      declaration: uint32_t GetTerraformingProjectRebates(UITerraformingProjectRebate* result, uint32_t resultlen, UniverseID clusterid, const char* projectid);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    GetTerraformingProjectRemovedProjects: {
      returnType: uint32_t
      parameters: [
        {
          type: const char**
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: clusterid
        }
        {
          type: const char*
          name: projectid
        }
      ]
      declaration: uint32_t GetTerraformingProjectRemovedProjects(const char** result, uint32_t resultlen, UniverseID clusterid, const char* projectid);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    GetTerraformingProjects2: {
      returnType: uint32_t
      parameters: [
        {
          type: UITerraformingProject2*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: clusterid
        }
        {
          type: bool
          name: useevents
        }
      ]
      declaration: uint32_t GetTerraformingProjects2(UITerraformingProject2* result, uint32_t resultlen, UniverseID clusterid, bool useevents);
      file: menu_station_overview.lua
      detailed: ""
      notes: ""
    }
    GetTerraformingStat: {
      returnType: UITerraformingStat
      parameters: [
        {
          type: const char*
          name: statid
        }
      ]
      declaration: UITerraformingStat GetTerraformingStat(const char* statid);
      file: menu_terraforming.lua
      detailed: ""
      notes: ""
    }
    GetTerraformingStatRange: {
      returnType: uint32_t
      parameters: [
        {
          type: UITerraformingStatRange*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: clusterid
        }
        {
          type: const char*
          name: statid
        }
      ]
      declaration: uint32_t GetTerraformingStatRange(UITerraformingStatRange* result, uint32_t resultlen, UniverseID clusterid, const char* statid);
      file: menu_terraforming.lua
      detailed: ""
      notes: ""
    }
    GetTerraformingWorldName: {
      returnType: UITerraformingWorldInfo
      parameters: [
        {
          type: UniverseID
          name: clusterid
        }
      ]
      declaration: UITerraformingWorldInfo GetTerraformingWorldName(UniverseID clusterid);
      file: menu_terraforming.lua
      detailed: ""
      notes: ""
    }
    GetTextHeight: {
      returnType: float
      parameters: [
        {
          type: const char*const
          name: text
        }
        {
          type: const char*const
          name: fontname
        }
        {
          type: const float
          name: fontsize
        }
        {
          type: const float
          name: wordwrapwidth
        }
      ]
      declaration: float GetTextHeight(const char*const text, const char*const fontname, const float fontsize, const float wordwrapwidth);
      file: menu_diplomacy.lua
      detailed: ""
      notes: ""
    }
    GetTextureQualityOption: {
      returnType: const char*
      parameters: []
      declaration: const char* GetTextureQualityOption(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetTextWidth: {
      returnType: float
      parameters: [
        {
          type: const char*const
          name: text
        }
        {
          type: const char*const
          name: fontname
        }
        {
          type: const float
          name: fontsize
        }
      ]
      declaration: float GetTextWidth(const char*const text, const char*const fontname, const float fontsize);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    GetThirdPersonFlightOption: {
      returnType: bool
      parameters: []
      declaration: bool GetThirdPersonFlightOption(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetTickerCache: {
      returnType: uint32_t
      parameters: [
        {
          type: TickerCacheEntry*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: size_t
          name: start
        }
        {
          type: size_t
          name: count
        }
        {
          type: const char*
          name: categoryname
        }
      ]
      declaration: uint32_t GetTickerCache(TickerCacheEntry* result, uint32_t resultlen, size_t start, size_t count, const char* categoryname);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    GetTiersOfRole: {
      returnType: uint32_t
      parameters: [
        {
          type: RoleTierData*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: role
        }
      ]
      declaration: uint32_t GetTiersOfRole(RoleTierData* result, uint32_t resultlen, const char* role);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetTimeline: {
      returnType: uint32_t
      parameters: [
        {
          type: TimelineInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetTimeline(TimelineInfo* result, uint32_t resultlen);
      file: menu_timeline.lua
      detailed: ""
      notes: ""
    }
    GetTopLevelContainer: {
      returnType: UniverseID
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
      ]
      declaration: UniverseID GetTopLevelContainer(UniverseID componentid);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetTowedObject: {
      returnType: UniverseID
      parameters: [
        {
          type: UniverseID
          name: shipid
        }
      ]
      declaration: UniverseID GetTowedObject(UniverseID shipid);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    GetTrackerNameOption: {
      returnType: const char*
      parameters: []
      declaration: const char* GetTrackerNameOption(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetTrackerSDKOption: {
      returnType: const char*
      parameters: []
      declaration: const char* GetTrackerSDKOption(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetTradeOfferStatistics: {
      returnType: uint32_t
      parameters: [
        {
          type: UITradeOfferStat*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: size_t
          name: numdatapoints
        }
      ]
      declaration: uint32_t GetTradeOfferStatistics(UITradeOfferStat* result, uint32_t resultlen, size_t numdatapoints);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    GetTradeRuleInfo: {
      returnType: bool
      parameters: [
        {
          type: TradeRuleInfo*
          name: info
        }
        {
          type: TradeRuleID
          name: id
        }
      ]
      declaration: bool GetTradeRuleInfo(TradeRuleInfo* info, TradeRuleID id);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    GetTradeRuleInfoCounts: {
      returnType: TradeRuleCounts
      parameters: [
        {
          type: TradeRuleID
          name: id
        }
      ]
      declaration: TradeRuleCounts GetTradeRuleInfoCounts(TradeRuleID id);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    GetTradeWareBudget: {
      returnType: int64_t
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
      ]
      declaration: int64_t GetTradeWareBudget(UniverseID containerid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetTransactionLog: {
      returnType: uint32_t
      parameters: [
        {
          type: TransactionLogEntry*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: componentid
        }
        {
          type: double
          name: starttime
        }
        {
          type: double
          name: endtime
        }
      ]
      declaration: uint32_t GetTransactionLog(TransactionLogEntry* result, uint32_t resultlen, UniverseID componentid, double starttime, double endtime);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    GetTransporterLocationComponent: {
      returnType: UniverseID
      parameters: [
        {
          type: UIComponentSlot
          name: transporter
        }
      ]
      declaration: UniverseID GetTransporterLocationComponent(UIComponentSlot transporter);
      file: menu_transporter.lua
      detailed: ""
      notes: ""
    }
    GetTransporterLocationName: {
      returnType: const char*
      parameters: [
        {
          type: UIComponentSlot
          name: transporter
        }
      ]
      declaration: const char* GetTransporterLocationName(UIComponentSlot transporter);
      file: menu_transporter.lua
      detailed: ""
      notes: ""
    }
    GetTurret: {
      returnType: TurretDetails
      parameters: [
        {
          type: size_t
          name: turretnum
        }
      ]
      declaration: TurretDetails GetTurret(size_t turretnum);
      file: crosshair handling.lua
      detailed: ""
      notes: ""
    }
    GetTurretGroupMode2: {
      returnType: const char*
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: UniverseID
          name: contextid
        }
        {
          type: const char*
          name: path
        }
        {
          type: const char*
          name: group
        }
      ]
      declaration: const char* GetTurretGroupMode2(UniverseID defensibleid, UniverseID contextid, const char* path, const char* group);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetUIAnchorScreenPosition: {
      returnType: Position2D
      parameters: [
        {
          type: const char*
          name: presentationid
        }
        {
          type: uint32_t
          name: index
        }
        {
          type: PosRot
          name: additionaloffset
        }
      ]
      declaration: Position2D GetUIAnchorScreenPosition(const char* presentationid, uint32_t index, PosRot additionaloffset);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    GetUIDefaultBaseRelation: {
      returnType: int32_t
      parameters: [
        {
          type: const char*
          name: fromfactionid
        }
        {
          type: const char*
          name: tofactionid
        }
      ]
      declaration: int32_t GetUIDefaultBaseRelation(const char* fromfactionid, const char* tofactionid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    GetUIGlowIntensity: {
      returnType: float
      parameters: []
      declaration: float GetUIGlowIntensity(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetUIGlowOption: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetUIGlowOption(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetUIScale: {
      returnType: float
      parameters: [
        {
          type: const bool
          name: scalewithresolution
        }
      ]
      declaration: float GetUIScale(const bool scalewithresolution);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    GetUIScaleFactor: {
      returnType: float
      parameters: []
      declaration: float GetUIScaleFactor();
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetUIScaleFactorRange: {
      returnType: FloatRange
      parameters: []
      declaration: FloatRange GetUIScaleFactorRange(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetUISystemInfo2: {
      returnType: bool
      parameters: [
        {
          type: UISystemInfo2*
          name: result
        }
        {
          type: UniverseID
          name: clusterid
        }
      ]
      declaration: bool GetUISystemInfo2(UISystemInfo2* result, UniverseID clusterid);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    GetUnitCargo: {
      returnType: uint32_t
      parameters: [
        {
          type: UIWareInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: containerid
        }
        {
          type: bool
          name: onlydrones
        }
      ]
      declaration: uint32_t GetUnitCargo(UIWareInfo* result, uint32_t resultlen, UniverseID containerid, bool onlydrones);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetUp: {
      returnType: bool
      parameters: []
      declaration: bool GetUp(void);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetUpgradeGroupCompatibilities: {
      returnType: uint32_t
      parameters: [
        {
          type: EquipmentCompatibilityInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: destructibleid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: UniverseID
          name: contextid
        }
        {
          type: const char*
          name: path
        }
        {
          type: const char*
          name: group
        }
        {
          type: const char*
          name: upgradetypename
        }
      ]
      declaration: uint32_t GetUpgradeGroupCompatibilities(EquipmentCompatibilityInfo* result, uint32_t resultlen, UniverseID destructibleid, const char* macroname, UniverseID contextid, const char* path, const char* group, const char* upgradetypename);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetUpgradeGroupInfo: {
      returnType: UpgradeGroupInfo
      parameters: [
        {
          type: UniverseID
          name: destructibleid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: const char*
          name: path
        }
        {
          type: const char*
          name: group
        }
        {
          type: const char*
          name: upgradetypename
        }
      ]
      declaration: UpgradeGroupInfo GetUpgradeGroupInfo(UniverseID destructibleid, const char* macroname, const char* path, const char* group, const char* upgradetypename);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetUpgradeGroupInfo2: {
      returnType: UpgradeGroupInfo
      parameters: [
        {
          type: UniverseID
          name: destructibleid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: UniverseID
          name: contextid
        }
        {
          type: const char*
          name: path
        }
        {
          type: const char*
          name: group
        }
        {
          type: const char*
          name: upgradetypename
        }
      ]
      declaration: UpgradeGroupInfo GetUpgradeGroupInfo2(UniverseID destructibleid, const char* macroname, UniverseID contextid, const char* path, const char* group, const char* upgradetypename);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetUpgradeGroups: {
      returnType: uint32_t
      parameters: [
        {
          type: UpgradeGroup*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: destructibleid
        }
        {
          type: const char*
          name: macroname
        }
      ]
      declaration: uint32_t GetUpgradeGroups(UpgradeGroup* result, uint32_t resultlen, UniverseID destructibleid, const char* macroname);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    GetUpgradeGroups2: {
      returnType: uint32_t
      parameters: [
        {
          type: UpgradeGroup2*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: destructibleid
        }
        {
          type: const char*
          name: macroname
        }
      ]
      declaration: uint32_t GetUpgradeGroups2(UpgradeGroup2* result, uint32_t resultlen, UniverseID destructibleid, const char* macroname);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetUpgradeSlotCurrentComponent: {
      returnType: UniverseID
      parameters: [
        {
          type: UniverseID
          name: destructibleid
        }
        {
          type: const char*
          name: upgradetypename
        }
        {
          type: size_t
          name: slot
        }
      ]
      declaration: UniverseID GetUpgradeSlotCurrentComponent(UniverseID destructibleid, const char* upgradetypename, size_t slot);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetUpgradeSlotCurrentMacro: {
      returnType: const char*
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: UniverseID
          name: moduleid
        }
        {
          type: const char*
          name: upgradetypename
        }
        {
          type: size_t
          name: slot
        }
      ]
      declaration: const char* GetUpgradeSlotCurrentMacro(UniverseID defensibleid, UniverseID moduleid, const char* upgradetypename, size_t slot);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    GetUpgradeSlotGroup: {
      returnType: UpgradeGroup
      parameters: [
        {
          type: UniverseID
          name: destructibleid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: const char*
          name: upgradetypename
        }
        {
          type: size_t
          name: slot
        }
      ]
      declaration: UpgradeGroup GetUpgradeSlotGroup(UniverseID destructibleid, const char* macroname, const char* upgradetypename, size_t slot);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetUpscalingOption: {
      returnType: const char*
      parameters: [
        {
          type: bool
          name: useconfig
        }
      ]
      declaration: const char* GetUpscalingOption(bool useconfig);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetUsedLimitedModules: {
      returnType: uint32_t
      parameters: [
        {
          type: UIMacroCount*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: excludedstationid
        }
      ]
      declaration: uint32_t GetUsedLimitedModules(UIMacroCount* result, uint32_t resultlen, UniverseID excludedstationid);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    GetUsedLimitedModulesFromSubsequence: {
      returnType: uint32_t
      parameters: [
        {
          type: UIMacroCount*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: size_t
          name: cp_idx
        }
      ]
      declaration: uint32_t GetUsedLimitedModulesFromSubsequence(UIMacroCount* result, uint32_t resultlen, UniverseID holomapid, size_t cp_idx);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    GetUsedLimitedShips: {
      returnType: uint32_t
      parameters: [
        {
          type: UIMacroCount*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetUsedLimitedShips(UIMacroCount* result, uint32_t resultlen);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    GetUserData: {
      returnType: const char*
      parameters: [
        {
          type: const char*
          name: name
        }
      ]
      declaration: const char* GetUserData(const char* name);
      file: chatwindow.lua
      detailed: ""
      notes: ""
    }
    GetUserDataSigned: {
      returnType: const char*
      parameters: [
        {
          type: const char*
          name: name
        }
      ]
      declaration: const char* GetUserDataSigned(const char* name);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    GetUserTransportDroneMode: {
      returnType: const char*
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
      ]
      declaration: const char* GetUserTransportDroneMode(UniverseID defensibleid);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetValidTransporterTargets2: {
      returnType: uint32_t
      parameters: [
        {
          type: UIComponentSlot*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: componentid
        }
        {
          type: UIComponentSlot
          name: currentlocation
        }
      ]
      declaration: uint32_t GetValidTransporterTargets2(UIComponentSlot* result, uint32_t resultlen, UniverseID componentid, UIComponentSlot currentlocation);
      file: menu_transporter.lua
      detailed: ""
      notes: ""
    }
    GetVelocityIndicatorOption: {
      returnType: bool
      parameters: []
      declaration: bool GetVelocityIndicatorOption(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetVelocityScreenPosition: {
      returnType: VelocityInfo
      parameters: [
        {
          type: const uint32_t
          name: iconsizeonscreen
        }
        {
          type: const uint32_t
          name: iconsizeoffscreen
        }
      ]
      declaration: VelocityInfo GetVelocityScreenPosition(const uint32_t iconsizeonscreen, const uint32_t iconsizeoffscreen);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    GetVentureDLCStatus: {
      returnType: uint32_t
      parameters: []
      declaration: uint32_t GetVentureDLCStatus(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetVenturePlatformDocks: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: ventureplatformid
        }
      ]
      declaration: uint32_t GetVenturePlatformDocks(UniverseID* result, uint32_t resultlen, UniverseID ventureplatformid);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    GetVenturePlatforms: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: defensibleid
        }
      ]
      declaration: uint32_t GetVenturePlatforms(UniverseID* result, uint32_t resultlen, UniverseID defensibleid);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    GetVirtualUpgradeSlotCurrentMacro: {
      returnType: const char*
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: const char*
          name: upgradetypename
        }
        {
          type: size_t
          name: slot
        }
      ]
      declaration: const char* GetVirtualUpgradeSlotCurrentMacro(UniverseID defensibleid, const char* upgradetypename, size_t slot);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetVisitorNamesShownOption: {
      returnType: bool
      parameters: []
      declaration: bool GetVisitorNamesShownOption(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetVolumetricFogOption: {
      returnType: int32_t
      parameters: []
      declaration: int32_t GetVolumetricFogOption(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetVRVivePointerHand: {
      returnType: int
      parameters: []
      declaration: int GetVRVivePointerHand(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    GetWareBlueprintOwners: {
      returnType: uint32_t
      parameters: [
        {
          type: const char**
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: wareid
        }
      ]
      declaration: uint32_t GetWareBlueprintOwners(const char** result, uint32_t resultlen, const char* wareid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetWareReservationsForWare: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: const char*
          name: wareid
        }
        {
          type: bool
          name: buy
        }
      ]
      declaration: uint32_t GetWareReservationsForWare(UniverseID containerid, const char* wareid, bool buy);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetWares: {
      returnType: uint32_t
      parameters: [
        {
          type: const char**
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: tags
        }
        {
          type: bool
          name: research
        }
        {
          type: const char*
          name: licenceownerid
        }
        {
          type: const char*
          name: exclusiontags
        }
      ]
      declaration: uint32_t GetWares(const char** result, uint32_t resultlen, const char* tags, bool research, const char* licenceownerid, const char* exclusiontags);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    GetWareSources: {
      returnType: uint32_t
      parameters: [
        {
          type: WareSource*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: const char*
          name: wareid
        }
      ]
      declaration: uint32_t GetWareSources(WareSource* result, uint32_t resultlen, const char* wareid);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    GetWareTransportTypes: {
      returnType: uint32_t
      parameters: [
        {
          type: WareTransportInfo*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
      ]
      declaration: uint32_t GetWareTransportTypes(WareTransportInfo* result, uint32_t resultlen);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    GetWeaponDetails2: {
      returnType: WeaponDetails3
      parameters: [
        {
          type: size_t
          name: weaponnum
        }
        {
          type: bool
          name: issecondary
        }
      ]
      declaration: WeaponDetails3 GetWeaponDetails2(size_t weaponnum, bool issecondary);
      file: crosshair handling.lua
      detailed: ""
      notes: ""
    }
    GetWeaponGroupsByWeapon: {
      returnType: uint32_t
      parameters: [
        {
          type: UIWeaponGroup*
          name: result
        }
        {
          type: uint32_t
          name: resultlen
        }
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: UniverseID
          name: weaponid
        }
      ]
      declaration: uint32_t GetWeaponGroupsByWeapon(UIWeaponGroup* result, uint32_t resultlen, UniverseID defensibleid, UniverseID weaponid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetWeaponMode: {
      returnType: const char*
      parameters: [
        {
          type: UniverseID
          name: weaponid
        }
      ]
      declaration: const char* GetWeaponMode(UniverseID weaponid);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    GetWidgetSystemSizeOverride: {
      returnType: Coord2D
      parameters: []
      declaration: Coord2D GetWidgetSystemSizeOverride(void);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    GetWorkForceInfo: {
      returnType: WorkForceInfo
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: const char*
          name: raceid
        }
      ]
      declaration: WorkForceInfo GetWorkForceInfo(UniverseID containerid, const char* raceid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    GetZoneAt: {
      returnType: UniverseID
      parameters: [
        {
          type: UniverseID
          name: sectorid
        }
        {
          type: UIPosRot*
          name: uioffset
        }
      ]
      declaration: UniverseID GetZoneAt(UniverseID sectorid, UIPosRot* uioffset);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    HandleTargetMouseClickOnRadar: {
      returnType: bool
      parameters: [
        {
          type: bool
          name: instantinteract
        }
        {
          type: bool
          name: interactwithselectedtarget
        }
      ]
      declaration: bool HandleTargetMouseClickOnRadar(bool instantinteract, bool interactwithselectedtarget);
      file: monitors.lua
      detailed: ""
      notes: ""
    }
    HandleTargetMouseDownOnRadar: {
      returnType: void
      parameters: []
      declaration: void HandleTargetMouseDownOnRadar();
      file: monitors.lua
      detailed: ""
      notes: ""
    }
    HasAcceptedOnlineMission: {
      returnType: bool
      parameters: []
      declaration: bool HasAcceptedOnlineMission(void);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    HasContainerBuyLimitOverride: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: const char*
          name: wareid
        }
      ]
      declaration: bool HasContainerBuyLimitOverride(UniverseID containerid, const char* wareid);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    HasContainerFreeInternalShipStorage: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: UniverseID
          name: shipid
        }
      ]
      declaration: bool HasContainerFreeInternalShipStorage(UniverseID containerid, UniverseID shipid);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    HasContainerOwnTradeRule: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: const char*
          name: ruletype
        }
        {
          type: const char*
          name: wareid
        }
      ]
      declaration: bool HasContainerOwnTradeRule(UniverseID containerid, const char* ruletype, const char* wareid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    HasContainerProcessingModule: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
      ]
      declaration: bool HasContainerProcessingModule(UniverseID containerid);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    HasContainerSellLimitOverride: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: const char*
          name: wareid
        }
      ]
      declaration: bool HasContainerSellLimitOverride(UniverseID containerid, const char* wareid);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    HasControllableAnyOrderFailures: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
      ]
      declaration: bool HasControllableAnyOrderFailures(UniverseID controllableid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    HasControllableOwnBlacklist: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: const char*
          name: listtype
        }
      ]
      declaration: bool HasControllableOwnBlacklist(UniverseID controllableid, const char* listtype);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    HasControllableOwnFightRule: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: const char*
          name: listtype
        }
      ]
      declaration: bool HasControllableOwnFightRule(UniverseID controllableid, const char* listtype);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    HasControllableOwnResponse: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: const char*
          name: signalid
        }
      ]
      declaration: bool HasControllableOwnResponse(UniverseID controllableid, const char* signalid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    HasCustomGameStartBudget: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: budgetid
        }
      ]
      declaration: bool HasCustomGameStartBudget(const char* id, const char* budgetid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    HasDefaultLoadout2: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: macroname
        }
        {
          type: bool
          name: allowloadoutoverride
        }
      ]
      declaration: bool HasDefaultLoadout2(const char* macroname, bool allowloadoutoverride);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    HasDefaultResponseToSignalForFaction: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: signalid
        }
        {
          type: const char*
          name: factionid
        }
        {
          type: const char*
          name: purposeid
        }
      ]
      declaration: bool HasDefaultResponseToSignalForFaction(const char* signalid, const char* factionid, const char* purposeid);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    HasEntityMoneyLogEntries: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: entityid
        }
      ]
      declaration: bool HasEntityMoneyLogEntries(UniverseID entityid);
      file: menu_station_overview.lua
      detailed: ""
      notes: ""
    }
    HasExtension: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: extensionid
        }
        {
          type: bool
          name: personal
        }
      ]
      declaration: bool HasExtension(const char* extensionid, bool personal);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    HasFactionShipyard: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: factionid
        }
      ]
      declaration: bool HasFactionShipyard(const char* factionid);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    HasFactionWharf: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: factionid
        }
      ]
      declaration: bool HasFactionWharf(const char* factionid);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    HasFollowCameraBasePosChanged: {
      returnType: bool
      parameters: []
      declaration: bool HasFollowCameraBasePosChanged(void);
      file: menu_followcamera.lua
      detailed: ""
      notes: ""
    }
    HasFrameBrackets: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: frameid
        }
      ]
      declaration: bool HasFrameBrackets(const int frameid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    HasLimitedOxygenSupply: {
      returnType: bool
      parameters: []
      declaration: bool HasLimitedOxygenSupply();
      file: crosshair handling.lua
      detailed: ""
      notes: ""
    }
    HasPersonArrived: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: NPCSeed
          name: person
        }
      ]
      declaration: bool HasPersonArrived(UniverseID controllableid, NPCSeed person);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    HasProductionModuleIllegalProducts: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: macroname
        }
        {
          type: const char*
          name: licencefactionid
        }
        {
          type: const char*
          name: policefactionid
        }
      ]
      declaration: bool HasProductionModuleIllegalProducts(const char* macroname, const char* licencefactionid, const char* policefactionid);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    HasRenderTargetStartNoise: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: rendertargetid
        }
      ]
      declaration: bool HasRenderTargetStartNoise(const int rendertargetid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    HasResearched: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: wareid
        }
      ]
      declaration: bool HasResearched(const char* wareid);
      file: menu_research.lua
      detailed: ""
      notes: ""
    }
    HasSavegame: {
      returnType: bool
      parameters: []
      declaration: bool HasSavegame(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    HasSeta: {
      returnType: bool
      parameters: []
      declaration: bool HasSeta();
      file: crosshair handling.lua
      detailed: ""
      notes: ""
    }
    HasShipFlightAssist: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: shipid
        }
      ]
      declaration: bool HasShipFlightAssist(UniverseID shipid);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    HasShipTradeLoopCargoReservationOverride: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: shipid
        }
      ]
      declaration: bool HasShipTradeLoopCargoReservationOverride(UniverseID shipid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    HasStartAnimation: {
      returnType: bool
      parameters: []
      declaration: bool HasStartAnimation(void);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    HasSubordinateAssignment: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: const char*
          name: assignment
        }
      ]
      declaration: bool HasSubordinateAssignment(UniverseID controllableid, const char* assignment);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    HasSuitableBuildModule: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: const char*
          name: macroname
        }
      ]
      declaration: bool HasSuitableBuildModule(UniverseID containerid, UniverseID defensibleid, const char* macroname);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    HasTerraformingProjectStarted: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: clusterid
        }
        {
          type: const char*
          name: projectid
        }
      ]
      declaration: bool HasTerraformingProjectStarted(UniverseID clusterid, const char* projectid);
      file: menu_terraforming.lua
      detailed: ""
      notes: ""
    }
    HasVenturerDock: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: UniverseID
          name: shipid
        }
        {
          type: UniverseID
          name: ventureplatformid
        }
      ]
      declaration: bool HasVenturerDock(UniverseID containerid, UniverseID shipid, UniverseID ventureplatformid);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    HidePromo: {
      returnType: void
      parameters: []
      declaration: void HidePromo(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    ImportColorMap: {
      returnType: void
      parameters: [
        {
          type: bool
          name: usedefault
        }
      ]
      declaration: void ImportColorMap(bool usedefault);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    ImportColorProfile: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: filename
        }
      ]
      declaration: void ImportColorProfile(const char* filename);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    ImportCustomGameStart: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: filename
        }
        {
          type: const char*
          name: gamestartid
        }
      ]
      declaration: void ImportCustomGameStart(const char* id, const char* filename, const char* gamestartid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    ImportInputFeedbackConfig: {
      returnType: void
      parameters: [
        {
          type: bool
          name: usedefault
        }
      ]
      declaration: void ImportInputFeedbackConfig(bool usedefault);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    ImportMapConstructionPlan: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: filename
        }
        {
          type: const char*
          name: id
        }
      ]
      declaration: void ImportMapConstructionPlan(const char* filename, const char* id);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    InstallEngineMod: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: objectid
        }
        {
          type: const char*
          name: wareid
        }
      ]
      declaration: bool InstallEngineMod(UniverseID objectid, const char* wareid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    InstallGroupedWeaponMod: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: UniverseID
          name: contextid
        }
        {
          type: const char*
          name: group
        }
        {
          type: const char*
          name: wareid
        }
      ]
      declaration: bool InstallGroupedWeaponMod(UniverseID defensibleid, UniverseID contextid, const char* group, const char* wareid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    InstallPaintMod: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: objectid
        }
        {
          type: const char*
          name: wareid
        }
        {
          type: bool
          name: useinventory
        }
      ]
      declaration: bool InstallPaintMod(UniverseID objectid, const char* wareid, bool useinventory);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    InstallShieldMod: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: UniverseID
          name: contextid
        }
        {
          type: const char*
          name: group
        }
        {
          type: const char*
          name: wareid
        }
      ]
      declaration: bool InstallShieldMod(UniverseID defensibleid, UniverseID contextid, const char* group, const char* wareid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    InstallShipMod: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: shipid
        }
        {
          type: const char*
          name: wareid
        }
      ]
      declaration: bool InstallShipMod(UniverseID shipid, const char* wareid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    InstallWeaponMod: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: weaponid
        }
        {
          type: const char*
          name: wareid
        }
      ]
      declaration: bool InstallWeaponMod(UniverseID weaponid, const char* wareid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    InvalidateRadarCursorPosition: {
      returnType: void
      parameters: []
      declaration: void InvalidateRadarCursorPosition();
      file: monitors.lua
      detailed: ""
      notes: ""
    }
    IsAAOptionSupported: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: mode
        }
      ]
      declaration: bool IsAAOptionSupported(const char* mode);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    IsActiveHeadTrackerAvailable: {
      returnType: bool
      parameters: []
      declaration: bool IsActiveHeadTrackerAvailable(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    IsActiveHeadTrackerSettingSupported: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: settingid
        }
      ]
      declaration: bool IsActiveHeadTrackerSettingSupported(const char* settingid);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    IsAdvancedSatellite: {
      returnType: bool
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
      ]
      declaration: bool IsAdvancedSatellite(const UniverseID componentid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    IsAmmoMacroCompatible: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: weaponmacroname
        }
        {
          type: const char*
          name: ammomacroname
        }
      ]
      declaration: bool IsAmmoMacroCompatible(const char* weaponmacroname, const char* ammomacroname);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    IsAppStoreVersion: {
      returnType: bool
      parameters: []
      declaration: bool IsAppStoreVersion(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    IsAsteroid: {
      returnType: bool
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
      ]
      declaration: bool IsAsteroid(const UniverseID componentid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    IsAutoPilotActive: {
      returnType: bool
      parameters: []
      declaration: bool IsAutoPilotActive(void);
      file: crosshair handling.lua
      detailed: ""
      notes: ""
    }
    IsAutotargetingActive: {
      returnType: bool
      parameters: []
      declaration: bool IsAutotargetingActive();
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    IsBomb: {
      returnType: bool
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
      ]
      declaration: bool IsBomb(const UniverseID componentid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    IsBoxTextWordWrap: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: boxtextid
        }
      ]
      declaration: bool IsBoxTextWordWrap(const int boxtextid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    IsBuilderBusy: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: shipid
        }
      ]
      declaration: bool IsBuilderBusy(UniverseID shipid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    IsBuildStorage: {
      returnType: bool
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
      ]
      declaration: bool IsBuildStorage(const UniverseID componentid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    IsBuildWaitingForSecondaryComponentResources: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
      ]
      declaration: bool IsBuildWaitingForSecondaryComponentResources(UniverseID containerid);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    IsCheckBoxActive: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: checkboxid
        }
      ]
      declaration: bool IsCheckBoxActive(const int checkboxid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    IsCheckBoxChecked: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: checkboxid
        }
      ]
      declaration: bool IsCheckBoxChecked(const int checkboxid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    IsClientModified: {
      returnType: bool
      parameters: []
      declaration: bool IsClientModified(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    IsCollectable: {
      returnType: bool
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
      ]
      declaration: bool IsCollectable(const UniverseID componentid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    IsCommander: {
      returnType: bool
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
      ]
      declaration: bool IsCommander(const UniverseID componentid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    IsComponentBlacklisted: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
        {
          type: const char*
          name: listtype
        }
        {
          type: const char*
          name: defaultgroup
        }
        {
          type: UniverseID
          name: controllableid
        }
      ]
      declaration: bool IsComponentBlacklisted(UniverseID componentid, const char* listtype, const char* defaultgroup, UniverseID controllableid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    IsComponentClass: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
        {
          type: const char*
          name: classname
        }
      ]
      declaration: bool IsComponentClass(UniverseID componentid, const char* classname);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    IsComponentOperational: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
      ]
      declaration: bool IsComponentOperational(UniverseID componentid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    IsComponentWrecked: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
      ]
      declaration: bool IsComponentWrecked(UniverseID componentid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    IsConstructionPlanAvailableInCustomGameStart: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: constructionplanid
        }
      ]
      declaration: bool IsConstructionPlanAvailableInCustomGameStart(const char* constructionplanid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    IsConstructionPlanValid: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: constructionplanid
        }
        {
          type: uint32_t*
          name: numinvalidpatches
        }
      ]
      declaration: bool IsConstructionPlanValid(const char* constructionplanid, uint32_t* numinvalidpatches);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    IsContainerAmmoMacroCompatible: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: const char*
          name: ammomacroname
        }
      ]
      declaration: bool IsContainerAmmoMacroCompatible(UniverseID containerid, const char* ammomacroname);
      file: menu_station_overview.lua
      detailed: ""
      notes: ""
    }
    IsContainerTradingWithFactionRescricted: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: const char*
          name: factionid
        }
      ]
      declaration: bool IsContainerTradingWithFactionRescricted(UniverseID containerid, const char* factionid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    IsContestedSector: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: sectorid
        }
      ]
      declaration: bool IsContestedSector(UniverseID sectorid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    IsControlPressed: {
      returnType: bool
      parameters: []
      declaration: bool IsControlPressed(void);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    IsConversationActive: {
      returnType: bool
      parameters: []
      declaration: bool IsConversationActive(void);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    IsConversationCancelling: {
      returnType: bool
      parameters: []
      declaration: bool IsConversationCancelling(void);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    IsCrate: {
      returnType: bool
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
      ]
      declaration: bool IsCrate(const UniverseID componentid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    IsCrystal: {
      returnType: bool
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
      ]
      declaration: bool IsCrystal(const UniverseID componentid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    IsCurrentBuildMapPlotPositionDiscovered: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: sectorid
        }
        {
          type: UIPosRot
          name: location
        }
        {
          type: float
          name: x
        }
        {
          type: float
          name: y
        }
        {
          type: float
          name: z
        }
      ]
      declaration: bool IsCurrentBuildMapPlotPositionDiscovered(UniverseID sectorid, UIPosRot location, float x, float y, float z);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    IsCurrentBuildMapPlotValid: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
      ]
      declaration: bool IsCurrentBuildMapPlotValid(UniverseID holomapid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    IsCurrentGPUDiscrete: {
      returnType: bool
      parameters: []
      declaration: bool IsCurrentGPUDiscrete(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    IsCurrentlyScanning: {
      returnType: bool
      parameters: []
      declaration: bool IsCurrentlyScanning();
      file: crosshair handling.lua
      detailed: ""
      notes: ""
    }
    IsCurrentOrderCritical: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
      ]
      declaration: bool IsCurrentOrderCritical(UniverseID controllableid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    IsCustomGameStartPropertyChanged: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
      ]
      declaration: bool IsCustomGameStartPropertyChanged(const char* id, const char* propertyid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    IsDataVault: {
      returnType: bool
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
      ]
      declaration: bool IsDataVault(const UniverseID componentid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    IsDefensibleBeingBoardedBy: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: const char*
          name: factionid
        }
      ]
      declaration: bool IsDefensibleBeingBoardedBy(UniverseID defensibleid, const char* factionid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    IsDemoVersion: {
      returnType: bool
      parameters: []
      declaration: bool IsDemoVersion(void);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    IsDeployableMacroCompatible: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: const char*
          name: deployablemacroname
        }
      ]
      declaration: bool IsDeployableMacroCompatible(UniverseID containerid, const char* macroname, const char* deployablemacroname);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    IsDestructible2: {
      returnType: bool
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
        {
          type: const char*const
          name: connectionname
        }
      ]
      declaration: bool IsDestructible2(const UniverseID componentid, const char*const connectionname);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    IsDetailUIElement: {
      returnType: bool
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
        {
          type: const char*const
          name: connectionname
        }
      ]
      declaration: bool IsDetailUIElement(const UniverseID componentid, const char*const connectionname);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    IsDLSSSupported: {
      returnType: bool
      parameters: []
      declaration: bool IsDLSSSupported(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    IsDroneTypeArmed: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: const char*
          name: dronetype
        }
      ]
      declaration: bool IsDroneTypeArmed(UniverseID defensibleid, const char* dronetype);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    IsDroneTypeBlocked: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: const char*
          name: dronetype
        }
      ]
      declaration: bool IsDroneTypeBlocked(UniverseID defensibleid, const char* dronetype);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    IsDropDownActive: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: dropdownid
        }
      ]
      declaration: bool IsDropDownActive(const int dropdownid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    IsDropDownMouseOverInteractionAllowed: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: dropdownid
        }
      ]
      declaration: bool IsDropDownMouseOverInteractionAllowed(const int dropdownid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    IsEditBoxActive: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: editboxid
        }
      ]
      declaration: bool IsEditBoxActive(const int editboxid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    IsEditBoxInputEncrypted: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: editboxid
        }
      ]
      declaration: bool IsEditBoxInputEncrypted(const int editboxid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    IsEditBoxTextHidden: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: editboxid
        }
      ]
      declaration: bool IsEditBoxTextHidden(const int editboxid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    IsEditBoxTextSelectedOnActivation: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: editboxid
        }
      ]
      declaration: bool IsEditBoxTextSelectedOnActivation(const int editboxid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    IsEntity: {
      returnType: bool
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
      ]
      declaration: bool IsEntity(const UniverseID componentid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    IsErrorLogActive: {
      returnType: bool
      parameters: []
      declaration: bool IsErrorLogActive();
      file: debuglog.lua
      detailed: ""
      notes: ""
    }
    IsExtensionEnabled: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: extensionid
        }
        {
          type: bool
          name: personal
        }
      ]
      declaration: bool IsExtensionEnabled(const char* extensionid, bool personal);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    IsExternalTargetMode: {
      returnType: bool
      parameters: []
      declaration: bool IsExternalTargetMode();
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    IsExternalViewActive: {
      returnType: bool
      parameters: []
      declaration: bool IsExternalViewActive();
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    IsExternalViewDisabled: {
      returnType: bool
      parameters: []
      declaration: bool IsExternalViewDisabled();
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    IsFactionAllyToFaction: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: factionid
        }
        {
          type: const char*
          name: otherfactionid
        }
      ]
      declaration: bool IsFactionAllyToFaction(const char* factionid, const char* otherfactionid);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    IsFactionEnemyToFaction: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: factionid
        }
        {
          type: const char*
          name: otherfactionid
        }
      ]
      declaration: bool IsFactionEnemyToFaction(const char* factionid, const char* otherfactionid);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    IsFactionHostileToFaction: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: factionid
        }
        {
          type: const char*
          name: otherfactionid
        }
      ]
      declaration: bool IsFactionHostileToFaction(const char* factionid, const char* otherfactionid);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    IsFleetManagerPlayerEnabled: {
      returnType: bool
      parameters: []
      declaration: bool IsFleetManagerPlayerEnabled(void);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    IsFlightAssistActive: {
      returnType: bool
      parameters: []
      declaration: bool IsFlightAssistActive(void);
      file: crosshair handling.lua
      detailed: ""
      notes: ""
    }
    IsFloatingViewActive: {
      returnType: bool
      parameters: []
      declaration: bool IsFloatingViewActive(void);
      file: infobar2.lua
      detailed: ""
      notes: ""
    }
    IsFPSEnabled: {
      returnType: bool
      parameters: []
      declaration: bool IsFPSEnabled();
      file: debuglog.lua
      detailed: ""
      notes: ""
    }
    IsFSROnWithoutAA: {
      returnType: bool
      parameters: []
      declaration: bool IsFSROnWithoutAA(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    IsFullscreenCutsceneActive: {
      returnType: bool
      parameters: []
      declaration: bool IsFullscreenCutsceneActive(void);
      file: gamemodified.lua
      detailed: ""
      notes: ""
    }
    IsFullscreenMenuDisplayed: {
      returnType: bool
      parameters: [
        {
          type: bool
          name: anymenu
        }
        {
          type: const char*
          name: menuname
        }
      ]
      declaration: bool IsFullscreenMenuDisplayed(bool anymenu, const char* menuname);
      file: helptext.lua
      detailed: ""
      notes: ""
    }
    IsGameModified: {
      returnType: bool
      parameters: []
      declaration: bool IsGameModified(void);
      file: menu_scenario_debriefing.lua
      detailed: ""
      notes: ""
    }
    IsGameOver: {
      returnType: bool
      parameters: []
      declaration: bool IsGameOver(void);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    IsGamePaused: {
      returnType: bool
      parameters: []
      declaration: bool IsGamePaused(void);
      file: helptext.lua
      detailed: ""
      notes: ""
    }
    IsGameStartModified: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: id
        }
      ]
      declaration: bool IsGameStartModified(const char* id);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    IsGate: {
      returnType: bool
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
      ]
      declaration: bool IsGate(const UniverseID componentid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    IsGOGVersion: {
      returnType: bool
      parameters: []
      declaration: bool IsGOGVersion(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    IsGPUAutomaticallySelected: {
      returnType: bool
      parameters: []
      declaration: bool IsGPUAutomaticallySelected(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    IsGPUCompatible: {
      returnType: bool
      parameters: [
        {
          type: uint32_t
          name: idx
        }
      ]
      declaration: bool IsGPUCompatible(uint32_t idx);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    IsHQ: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
      ]
      declaration: bool IsHQ(UniverseID componentid);
      file: menu_station_overview.lua
      detailed: ""
      notes: ""
    }
    IsHUDActive: {
      returnType: bool
      parameters: []
      declaration: bool IsHUDActive();
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    IsHUDRadarActive: {
      returnType: bool
      parameters: []
      declaration: bool IsHUDRadarActive(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    IsIconValid: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: iconid
        }
      ]
      declaration: bool IsIconValid(const char* iconid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    IsInfoUnlockedForPlayer: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
        {
          type: const char*
          name: infostring
        }
      ]
      declaration: bool IsInfoUnlockedForPlayer(UniverseID componentid, const char* infostring);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    IsInputModifierPressed: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: uimodifier
        }
      ]
      declaration: bool IsInputModifierPressed(const char* uimodifier);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    IsJoystickSteeringAdapative: {
      returnType: bool
      parameters: []
      declaration: bool IsJoystickSteeringAdapative(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    IsKnownItemRead: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: libraryid
        }
        {
          type: const char*
          name: itemid
        }
      ]
      declaration: bool IsKnownItemRead(const char* libraryid, const char* itemid);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    IsKnownRead: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
      ]
      declaration: bool IsKnownRead(UniverseID componentid);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    IsKnownToPlayer: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
      ]
      declaration: bool IsKnownToPlayer(UniverseID componentid);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    IsLandmark: {
      returnType: bool
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
      ]
      declaration: bool IsLandmark(const UniverseID componentid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    IsLanguageSettingEnabled: {
      returnType: bool
      parameters: []
      declaration: bool IsLanguageSettingEnabled(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    IsLanguageValid: {
      returnType: bool
      parameters: []
      declaration: bool IsLanguageValid(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    IsLaserTower: {
      returnType: bool
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
      ]
      declaration: bool IsLaserTower(const UniverseID componentid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    IsLoadoutCompatible: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: macroname
        }
        {
          type: const char*
          name: loadoutid
        }
      ]
      declaration: bool IsLoadoutCompatible(const char* macroname, const char* loadoutid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    IsLoadoutValid: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: const char*
          name: loadoutid
        }
        {
          type: uint32_t*
          name: numinvalidpatches
        }
      ]
      declaration: bool IsLoadoutValid(UniverseID defensibleid, const char* macroname, const char* loadoutid, uint32_t* numinvalidpatches);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    IsLockbox: {
      returnType: bool
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
      ]
      declaration: bool IsLockbox(const UniverseID componentid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    IsLowOnOxygen: {
      returnType: bool
      parameters: []
      declaration: bool IsLowOnOxygen();
      file: crosshair handling.lua
      detailed: ""
      notes: ""
    }
    IsMasterVersion: {
      returnType: bool
      parameters: []
      declaration: bool IsMasterVersion(void);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    IsMine: {
      returnType: bool
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
      ]
      declaration: bool IsMine(const UniverseID componentid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    IsMiniWidgetSystemUsed: {
      returnType: bool
      parameters: []
      declaration: bool IsMiniWidgetSystemUsed(void);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    IsMissileIncoming: {
      returnType: bool
      parameters: []
      declaration: bool IsMissileIncoming();
      file: crosshair handling.lua
      detailed: ""
      notes: ""
    }
    IsMissileLockingOn: {
      returnType: bool
      parameters: []
      declaration: bool IsMissileLockingOn();
      file: crosshair handling.lua
      detailed: ""
      notes: ""
    }
    IsMissionLimitReached: {
      returnType: bool
      parameters: [
        {
          type: bool
          name: includeupkeep
        }
        {
          type: bool
          name: includeguidance
        }
        {
          type: bool
          name: includeplot
        }
      ]
      declaration: bool IsMissionLimitReached(bool includeupkeep, bool includeguidance, bool includeplot);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    IsMouseEmulationActive: {
      returnType: bool
      parameters: []
      declaration: bool IsMouseEmulationActive(void);
      file: menu_crafting.lua
      detailed: ""
      notes: ""
    }
    IsMouseSteeringActive: {
      returnType: bool
      parameters: []
      declaration: bool IsMouseSteeringActive(void);
      file: crosshair handling.lua
      detailed: ""
      notes: ""
    }
    IsMouseSteeringAdapative: {
      returnType: bool
      parameters: []
      declaration: bool IsMouseSteeringAdapative(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    IsMouseSteeringLineEnabled: {
      returnType: bool
      parameters: []
      declaration: bool IsMouseSteeringLineEnabled(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    IsMouseSteeringPersistent: {
      returnType: bool
      parameters: []
      declaration: bool IsMouseSteeringPersistent(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    IsNavBeacon: {
      returnType: bool
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
      ]
      declaration: bool IsNavBeacon(const UniverseID componentid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    IsNetworkEngineEnabled: {
      returnType: bool
      parameters: []
      declaration: bool IsNetworkEngineEnabled(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    IsNewGame: {
      returnType: bool
      parameters: []
      declaration: bool IsNewGame(void);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    IsNextStartAnimationSkipped: {
      returnType: bool
      parameters: [
        {
          type: bool
          name: reset
        }
      ]
      declaration: bool IsNextStartAnimationSkipped(bool reset);
      file: menu_missionbriefing.lua
      detailed: ""
      notes: ""
    }
    IsNPCLineSkippable: {
      returnType: bool
      parameters: []
      declaration: bool IsNPCLineSkippable(void);
      file: subchannelbar.lua
      detailed: ""
      notes: ""
    }
    IsObjectKnown: {
      returnType: bool
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
      ]
      declaration: bool IsObjectKnown(const UniverseID componentid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    IsOnlineEnabled: {
      returnType: bool
      parameters: []
      declaration: bool IsOnlineEnabled(void);
      file: menu_scenario_debriefing.lua
      detailed: ""
      notes: ""
    }
    IsOpenTrackEnabled: {
      returnType: bool
      parameters: []
      declaration: bool IsOpenTrackEnabled(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    IsOrderLoopable: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: orderdefid
        }
      ]
      declaration: bool IsOrderLoopable(const char* orderdefid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    IsOrderSelectableFor: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: orderdefid
        }
        {
          type: UniverseID
          name: controllableid
        }
      ]
      declaration: bool IsOrderSelectableFor(const char* orderdefid, UniverseID controllableid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    IsPerson: {
      returnType: bool
      parameters: [
        {
          type: NPCSeed
          name: person
        }
        {
          type: UniverseID
          name: controllableid
        }
      ]
      declaration: bool IsPerson(NPCSeed person, UniverseID controllableid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    IsPersonTransferScheduled: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: NPCSeed
          name: person
        }
      ]
      declaration: bool IsPersonTransferScheduled(UniverseID controllableid, NPCSeed person);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    IsPlayerBlacklistDefault: {
      returnType: bool
      parameters: [
        {
          type: BlacklistID
          name: id
        }
        {
          type: const char*
          name: listtype
        }
        {
          type: const char*
          name: defaultgroup
        }
      ]
      declaration: bool IsPlayerBlacklistDefault(BlacklistID id, const char* listtype, const char* defaultgroup);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    IsPlayerCameraTargetViewPossible: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: targetid
        }
        {
          type: bool
          name: force
        }
      ]
      declaration: bool IsPlayerCameraTargetViewPossible(UniverseID targetid, bool force);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    IsPlayerContext: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
      ]
      declaration: bool IsPlayerContext(UniverseID componentid);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    IsPlayerControlGroupValid: {
      returnType: bool
      parameters: []
      declaration: bool IsPlayerControlGroupValid(void);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    IsPlayerFightRuleDefault: {
      returnType: bool
      parameters: [
        {
          type: FightRuleID
          name: id
        }
        {
          type: const char*
          name: listtype
        }
      ]
      declaration: bool IsPlayerFightRuleDefault(FightRuleID id, const char* listtype);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    IsPlayerOccupiedShipDocked: {
      returnType: bool
      parameters: []
      declaration: bool IsPlayerOccupiedShipDocked(void);
      file: crosshair handling.lua
      detailed: ""
      notes: ""
    }
    IsPlayerTradeRuleDefault: {
      returnType: bool
      parameters: [
        {
          type: TradeRuleID
          name: id
        }
        {
          type: const char*
          name: ruletype
        }
      ]
      declaration: bool IsPlayerTradeRuleDefault(TradeRuleID id, const char* ruletype);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    IsPlayerValid: {
      returnType: bool
      parameters: []
      declaration: bool IsPlayerValid(void);
      file: helptext.lua
      detailed: ""
      notes: ""
    }
    IsPointingWithinAimingRange: {
      returnType: bool
      parameters: []
      declaration: bool IsPointingWithinAimingRange();
      file: vr_pointer.lua
      detailed: ""
      notes: ""
    }
    IsPresentModeOptionSupported: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: mode
        }
      ]
      declaration: bool IsPresentModeOptionSupported(const char* mode);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    IsRealComponentClass: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
        {
          type: const char*
          name: classname
        }
      ]
      declaration: bool IsRealComponentClass(UniverseID componentid, const char* classname);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    IsRecyclable: {
      returnType: bool
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
      ]
      declaration: bool IsRecyclable(const UniverseID componentid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    IsReducedSpeedModeActive: {
      returnType: bool
      parameters: []
      declaration: bool IsReducedSpeedModeActive(void);
      file: crosshair handling.lua
      detailed: ""
      notes: ""
    }
    IsRequestedGPUCurrent: {
      returnType: bool
      parameters: []
      declaration: bool IsRequestedGPUCurrent(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    IsResourceProbe: {
      returnType: bool
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
      ]
      declaration: bool IsResourceProbe(const UniverseID componentid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    IsRunningOnSteamDeck: {
      returnType: bool
      parameters: []
      declaration: bool IsRunningOnSteamDeck(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    IsSatellite: {
      returnType: bool
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
      ]
      declaration: bool IsSatellite(const UniverseID componentid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    IsSaveListLoadingComplete: {
      returnType: bool
      parameters: []
      declaration: bool IsSaveListLoadingComplete(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    IsSaveValid: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: filename
        }
      ]
      declaration: bool IsSaveValid(const char* filename);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    IsScenarioLoading: {
      returnType: ScenarioLoadingData
      parameters: []
      declaration: ScenarioLoadingData IsScenarioLoading(void);
      file: loading.lua
      detailed: ""
      notes: ""
    }
    IsSetaActive: {
      returnType: bool
      parameters: []
      declaration: bool IsSetaActive();
      file: helper.lua
      detailed: ""
      notes: ""
    }
    IsShiftPressed: {
      returnType: bool
      parameters: []
      declaration: bool IsShiftPressed(void);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    IsShip: {
      returnType: bool
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
      ]
      declaration: bool IsShip(const UniverseID componentid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    IsShipAtExternalDock: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: shipid
        }
      ]
      declaration: bool IsShipAtExternalDock(UniverseID shipid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    IsShipBeingRetrieved: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: shipid
        }
      ]
      declaration: bool IsShipBeingRetrieved(UniverseID shipid);
      file: menu_platformundock.lua
      detailed: ""
      notes: ""
    }
    IsSlotMandatory: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: UniverseID
          name: moduleid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: bool
          name: ismodule
        }
        {
          type: const char*
          name: upgradetypename
        }
        {
          type: size_t
          name: slot
        }
      ]
      declaration: bool IsSlotMandatory(UniverseID defensibleid, UniverseID moduleid, const char* macroname, bool ismodule, const char* upgradetypename, size_t slot);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    IsSofttargetManagerActive: {
      returnType: bool
      parameters: []
      declaration: bool IsSofttargetManagerActive();
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    IsSoftwareDefault: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: const char*
          name: softwarename
        }
      ]
      declaration: bool IsSoftwareDefault(UniverseID controllableid, const char* macroname, const char* softwarename);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    IsStartmenu: {
      returnType: bool
      parameters: []
      declaration: bool IsStartmenu();
      file: helper.lua
      detailed: ""
      notes: ""
    }
    IsStation: {
      returnType: bool
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
      ]
      declaration: bool IsStation(const UniverseID componentid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    IsStationary: {
      returnType: bool
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
      ]
      declaration: bool IsStationary(const UniverseID componentid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    IsStoryFeatureUnlocked: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: featureid
        }
      ]
      declaration: bool IsStoryFeatureUnlocked(const char* featureid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    IsSuperHighway: {
      returnType: bool
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
      ]
      declaration: bool IsSuperHighway(const UniverseID componentid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    IsSupplyManual: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: const char*
          name: type
        }
      ]
      declaration: bool IsSupplyManual(UniverseID containerid, const char* type);
      file: menu_station_overview.lua
      detailed: ""
      notes: ""
    }
    IsSurfaceElement: {
      returnType: bool
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
      ]
      declaration: bool IsSurfaceElement(const UniverseID componentid);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    IsTableMultiSelect: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: tableid
        }
      ]
      declaration: bool IsTableMultiSelect(const int tableid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    IsTableRowBorderBelowEnabled: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: tableid
        }
        {
          type: uint32_t
          name: row
        }
      ]
      declaration: bool IsTableRowBorderBelowEnabled(const int tableid, uint32_t row);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    IsTableRowInteractive: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: tableid
        }
        {
          type: uint32_t
          name: row
        }
      ]
      declaration: bool IsTableRowInteractive(const int tableid, uint32_t row);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    IsTargetable: {
      returnType: bool
      parameters: [
        {
          type: const uint32_t
          name: messageid
        }
      ]
      declaration: bool IsTargetable(const uint32_t messageid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    IsTargetInPlayerWeaponRange: {
      returnType: bool
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
      ]
      declaration: bool IsTargetInPlayerWeaponRange(const UniverseID componentid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    IsTargetMonitorNotification: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: notificationid
        }
      ]
      declaration: bool IsTargetMonitorNotification(const int notificationid);
      file: monitors.lua
      detailed: ""
      notes: ""
    }
    IsTerraformingProjectOngoing: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: clusterid
        }
        {
          type: const char*
          name: projectid
        }
      ]
      declaration: bool IsTerraformingProjectOngoing(UniverseID clusterid, const char* projectid);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    IsThrottleBidirectional: {
      returnType: bool
      parameters: []
      declaration: bool IsThrottleBidirectional(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    IsTimelinesScenario: {
      returnType: bool
      parameters: []
      declaration: bool IsTimelinesScenario(void);
      file: menu_help.lua
      detailed: ""
      notes: ""
    }
    IsTitleFontString: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: fontstringid
        }
      ]
      declaration: bool IsTitleFontString(const int fontstringid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    IsTitleStatusBar: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: statusbarid
        }
      ]
      declaration: bool IsTitleStatusBar(const int statusbarid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    IsTradeShowVersion: {
      returnType: bool
      parameters: []
      declaration: bool IsTradeShowVersion(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    IsTurretGroupArmed: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: UniverseID
          name: contextid
        }
        {
          type: const char*
          name: path
        }
        {
          type: const char*
          name: group
        }
      ]
      declaration: bool IsTurretGroupArmed(UniverseID defensibleid, UniverseID contextid, const char* path, const char* group);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    IsTutorial: {
      returnType: bool
      parameters: []
      declaration: bool IsTutorial(void);
      file: menu_help.lua
      detailed: ""
      notes: ""
    }
    IsUICoverOverridden: {
      returnType: bool
      parameters: []
      declaration: bool IsUICoverOverridden(void);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    IsUnit: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
      ]
      declaration: bool IsUnit(UniverseID controllableid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    IsUnitMacroCompatible: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: const char*
          name: unitmacroname
        }
      ]
      declaration: bool IsUnitMacroCompatible(UniverseID containerid, const char* macroname, const char* unitmacroname);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    IsUpgradeGroupMacroCompatible: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: destructibleid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: const char*
          name: path
        }
        {
          type: const char*
          name: group
        }
        {
          type: const char*
          name: upgradetypename
        }
        {
          type: const char*
          name: upgrademacroname
        }
      ]
      declaration: bool IsUpgradeGroupMacroCompatible(UniverseID destructibleid, const char* macroname, const char* path, const char* group, const char* upgradetypename, const char* upgrademacroname);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    IsUpgradeMacroCompatible: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: UniverseID
          name: moduleid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: bool
          name: ismodule
        }
        {
          type: const char*
          name: upgradetypename
        }
        {
          type: size_t
          name: slot
        }
        {
          type: const char*
          name: upgrademacroname
        }
      ]
      declaration: bool IsUpgradeMacroCompatible(UniverseID defensibleid, UniverseID moduleid, const char* macroname, bool ismodule, const char* upgradetypename, size_t slot, const char* upgrademacroname);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    IsUpscalingOptionSupported: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: mode
        }
      ]
      declaration: bool IsUpscalingOptionSupported(const char* mode);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    IsValidComponent: {
      returnType: bool
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
      ]
      declaration: bool IsValidComponent(const UniverseID componentid);
      file: monitors.lua
      detailed: ""
      notes: ""
    }
    IsValidTrade: {
      returnType: bool
      parameters: [
        {
          type: TradeID
          name: tradeid
        }
      ]
      declaration: bool IsValidTrade(TradeID tradeid);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    IsVentureExtensionSupported: {
      returnType: bool
      parameters: []
      declaration: bool IsVentureExtensionSupported(void);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    IsVentureSeasonSupported: {
      returnType: bool
      parameters: []
      declaration: bool IsVentureSeasonSupported(void);
      file: chatwindow.lua
      detailed: ""
      notes: ""
    }
    IsVentureShip: {
      returnType: bool
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
      ]
      declaration: bool IsVentureShip(const UniverseID componentid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    IsVirtualUpgradeMacroCompatible: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: const char*
          name: upgradetypename
        }
        {
          type: size_t
          name: slot
        }
        {
          type: const char*
          name: upgrademacroname
        }
      ]
      declaration: bool IsVirtualUpgradeMacroCompatible(UniverseID defensibleid, const char* macroname, const char* upgradetypename, size_t slot, const char* upgrademacroname);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    IsVRMode: {
      returnType: bool
      parameters: []
      declaration: bool IsVRMode();
      file: debuglog.lua
      detailed: ""
      notes: ""
    }
    IsVROculusTouchActive: {
      returnType: bool
      parameters: []
      declaration: bool IsVROculusTouchActive(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    IsVRPointerActive: {
      returnType: bool
      parameters: []
      declaration: bool IsVRPointerActive();
      file: vr_pointer.lua
      detailed: ""
      notes: ""
    }
    IsVRVersion: {
      returnType: bool
      parameters: []
      declaration: bool IsVRVersion(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    IsVRViveControllerActive: {
      returnType: bool
      parameters: []
      declaration: bool IsVRViveControllerActive(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    IsWeaponArmed: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: weaponid
        }
      ]
      declaration: bool IsWeaponArmed(UniverseID weaponid);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    IsWeaponModeCompatible: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: weaponid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: const char*
          name: weaponmodeid
        }
      ]
      declaration: bool IsWeaponModeCompatible(UniverseID weaponid, const char* macroname, const char* weaponmodeid);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    IsWidgetsystemRequestingCrosshairVisible: {
      returnType: bool
      parameters: []
      declaration: bool IsWidgetsystemRequestingCrosshairVisible(void);
      file: crosshair handling.lua
      detailed: ""
      notes: ""
    }
    IsWillingToBuyFromPlayer: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
        {
          type: const char*
          name: warename
        }
      ]
      declaration: bool IsWillingToBuyFromPlayer(UniverseID componentid, const char* warename);
      file: menu_trader_inventory.lua
      detailed: ""
      notes: ""
    }
    IsWillingToSellToPlayer: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
        {
          type: const char*
          name: warename
        }
      ]
      declaration: bool IsWillingToSellToPlayer(UniverseID componentid, const char* warename);
      file: menu_trader_inventory.lua
      detailed: ""
      notes: ""
    }
    IsZone: {
      returnType: bool
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
      ]
      declaration: bool IsZone(const UniverseID componentid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    IsZoneHighway: {
      returnType: bool
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
      ]
      declaration: bool IsZoneHighway(const UniverseID componentid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    LaunchLaserTower: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: const char*
          name: lasertowermacroname
        }
      ]
      declaration: void LaunchLaserTower(UniverseID defensibleid, const char* lasertowermacroname);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    LaunchMine: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: const char*
          name: minemacroname
        }
      ]
      declaration: void LaunchMine(UniverseID defensibleid, const char* minemacroname);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    LaunchNavBeacon: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: const char*
          name: navbeaconmacroname
        }
      ]
      declaration: void LaunchNavBeacon(UniverseID defensibleid, const char* navbeaconmacroname);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    LaunchResourceProbe: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: const char*
          name: resourceprobemacroname
        }
      ]
      declaration: void LaunchResourceProbe(UniverseID defensibleid, const char* resourceprobemacroname);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    LaunchSatellite: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: const char*
          name: satellitemacroname
        }
      ]
      declaration: void LaunchSatellite(UniverseID defensibleid, const char* satellitemacroname);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    LearnBlueprint: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: wareid
        }
      ]
      declaration: void LearnBlueprint(const char* wareid);
      file: menu_trader_blueprintsorlicences.lua
      detailed: ""
      notes: ""
    }
    LeaveScenarioConsole: {
      returnType: void
      parameters: []
      declaration: void LeaveScenarioConsole(void);
      file: menu_scenario_selection.lua
      detailed: ""
      notes: ""
    }
    MakePlayerOwnerOf: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: objectid
        }
      ]
      declaration: void MakePlayerOwnerOf(UniverseID objectid);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    MapModifierButton: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: uimodifier
        }
        {
          type: int32_t
          name: source
        }
        {
          type: int32_t
          name: code
        }
        {
          type: bool
          name: checkonly
        }
      ]
      declaration: bool MapModifierButton(const char* uimodifier, int32_t source, int32_t code, bool checkonly);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    MarkIndicatorShown: {
      returnType: bool
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
      ]
      declaration: bool MarkIndicatorShown(const UniverseID componentid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    MissionBriefingInteractButtonClicked: {
      returnType: void
      parameters: [
        {
          type: MissionID
          name: missionid
        }
      ]
      declaration: void MissionBriefingInteractButtonClicked(MissionID missionid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    MovePlayerToSectorPos: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: sectorid
        }
        {
          type: UIPosRot
          name: position
        }
      ]
      declaration: void MovePlayerToSectorPos(UniverseID sectorid, UIPosRot position);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    MutePlayerAlert: {
      returnType: void
      parameters: [
        {
          type: size_t
          name: index
        }
      ]
      declaration: void MutePlayerAlert(size_t index);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    NewGame: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: modulename
        }
        {
          type: uint32_t
          name: numparams
        }
        {
          type: NewGameParameter*
          name: uiparams
        }
      ]
      declaration: void NewGame(const char* modulename, uint32_t numparams, NewGameParameter* uiparams);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    NewMultiplayerGame: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: modulename
        }
        {
          type: const char*
          name: difficulty
        }
      ]
      declaration: void NewMultiplayerGame(const char* modulename, const char* difficulty);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    NotifyChatMessageRead: {
      returnType: void
      parameters: []
      declaration: void NotifyChatMessageRead(void);
      file: chatwindow.lua
      detailed: ""
      notes: ""
    }
    NotifyDisplayNotification: {
      returnType: void
      parameters: [
        {
          type: const int
          name: notificationid
        }
      ]
      declaration: void NotifyDisplayNotification(const int notificationid);
      file: monitors.lua
      detailed: ""
      notes: ""
    }
    NotifyErrorLogDispatching: {
      returnType: void
      parameters: []
      declaration: void NotifyErrorLogDispatching();
      file: debuglog.lua
      detailed: ""
      notes: ""
    }
    NotifyErrorLogDispatchingDone: {
      returnType: void
      parameters: []
      declaration: void NotifyErrorLogDispatchingDone();
      file: debuglog.lua
      detailed: ""
      notes: ""
    }
    NotifyInteractMenuHidden: {
      returnType: void
      parameters: [
        {
          type: const uint32_t
          name: id
        }
        {
          type: const bool
          name: allclosed
        }
      ]
      declaration: void NotifyInteractMenuHidden(const uint32_t id, const bool allclosed);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    NotifyInteractMenuShown: {
      returnType: void
      parameters: [
        {
          type: const uint32_t
          name: id
        }
      ]
      declaration: void NotifyInteractMenuShown(const uint32_t id);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    NotifyMissionPosIDConnected: {
      returnType: void
      parameters: [
        {
          type: const int32_t
          name: posid
        }
      ]
      declaration: void NotifyMissionPosIDConnected(const int32_t posid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    NotifyMissionPosIDDisconnected: {
      returnType: void
      parameters: [
        {
          type: const int32_t
          name: posid
        }
      ]
      declaration: void NotifyMissionPosIDDisconnected(const int32_t posid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    OpenMovieMenu: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: key
        }
      ]
      declaration: void OpenMovieMenu(const char* key);
      file: movie.lua
      detailed: ""
      notes: ""
    }
    OpenWebBrowser: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: url
        }
      ]
      declaration: void OpenWebBrowser(const char* url);
      file: menu_help.lua
      detailed: ""
      notes: ""
    }
    PauseProcessingModule: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: processingmoduleid
        }
        {
          type: bool
          name: pause
        }
      ]
      declaration: void PauseProcessingModule(UniverseID processingmoduleid, bool pause);
      file: menu_station_overview.lua
      detailed: ""
      notes: ""
    }
    PauseProductionModule: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: productionmoduleid
        }
        {
          type: bool
          name: pause
        }
      ]
      declaration: void PauseProductionModule(UniverseID productionmoduleid, bool pause);
      file: menu_station_overview.lua
      detailed: ""
      notes: ""
    }
    PayBuildPlotSize: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: stationid
        }
        {
          type: Coord3D
          name: plotsize
        }
        {
          type: Coord3D
          name: plotcenter
        }
      ]
      declaration: void PayBuildPlotSize(UniverseID stationid, Coord3D plotsize, Coord3D plotcenter);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    PerformCompSlotPlayerAction: {
      returnType: bool
      parameters: [
        {
          type: UIComponentSlot
          name: compslot
        }
        {
          type: uint32_t
          name: actionid
        }
      ]
      declaration: bool PerformCompSlotPlayerAction(UIComponentSlot compslot, uint32_t actionid);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    PerformCrewExchange2: {
      returnType: UICrewExchangeResult
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: UniverseID
          name: partnercontrollableid
        }
        {
          type: NPCSeed*
          name: npcs
        }
        {
          type: uint32_t
          name: numnpcs
        }
        {
          type: NPCSeed*
          name: partnernpcs
        }
        {
          type: uint32_t
          name: numpartnernpcs
        }
        {
          type: NPCSeed
          name: captainfromcontainer
        }
        {
          type: NPCSeed
          name: captainfrompartner
        }
        {
          type: bool
          name: exchangecaptains
        }
        {
          type: bool
          name: checkonly
        }
      ]
      declaration: UICrewExchangeResult PerformCrewExchange2(UniverseID controllableid, UniverseID partnercontrollableid, NPCSeed* npcs, uint32_t numnpcs, NPCSeed* partnernpcs, uint32_t numpartnernpcs, NPCSeed captainfromcontainer, NPCSeed captainfrompartner, bool exchangecaptains, bool checkonly);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    PlayDetailmonitorCutscene: {
      returnType: uint32_t
      parameters: [
        {
          type: uint32_t
          name: cutsceneid
        }
        {
          type: const char*
          name: rendertarget
        }
      ]
      declaration: uint32_t PlayDetailmonitorCutscene(uint32_t cutsceneid, const char* rendertarget);
      file: movie.lua
      detailed: ""
      notes: ""
    }
    PrepareBuildSequenceResources2: {
      returnType: uint32_t
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: UniverseID
          name: stationid
        }
        {
          type: bool
          name: useplanned
        }
      ]
      declaration: uint32_t PrepareBuildSequenceResources2(UniverseID holomapid, UniverseID stationid, bool useplanned);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    PutShipIntoStorage: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: UniverseID
          name: shipid
        }
      ]
      declaration: void PutShipIntoStorage(UniverseID containerid, UniverseID shipid);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    QueryGameServers: {
      returnType: bool
      parameters: []
      declaration: bool QueryGameServers(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    QuickDock: {
      returnType: bool
      parameters: []
      declaration: bool QuickDock();
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    QuickMenuAccess: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: menu
        }
      ]
      declaration: bool QuickMenuAccess(const char* menu);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    ReadAllInventoryWares: {
      returnType: void
      parameters: []
      declaration: void ReadAllInventoryWares(void);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    ReadAllKnownItems: {
      returnType: void
      parameters: []
      declaration: void ReadAllKnownItems(void);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    ReadAllKnownSpaces: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: spaceid
        }
      ]
      declaration: void ReadAllKnownSpaces(UniverseID spaceid);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    ReadInventoryWare: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: wareid
        }
      ]
      declaration: void ReadInventoryWare(const char* wareid);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    ReadKnownItem: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: libraryid
        }
        {
          type: const char*
          name: itemid
        }
        {
          type: bool
          name: read
        }
      ]
      declaration: void ReadKnownItem(const char* libraryid, const char* itemid, bool read);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    ReassignControllableToFleetUnit: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: FleetUnitID
          name: commanderfleetunitid
        }
        {
          type: int32_t
          name: subordinategroupid
        }
      ]
      declaration: void ReassignControllableToFleetUnit(UniverseID controllableid, FleetUnitID commanderfleetunitid, int32_t subordinategroupid);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    ReassignPeople: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: CrewTransferContainer*
          name: reassignedcrew
        }
        {
          type: uint32_t
          name: amount
        }
      ]
      declaration: void ReassignPeople(UniverseID controllableid, CrewTransferContainer* reassignedcrew, uint32_t amount);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    RedoConstructionMapChange: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
      ]
      declaration: void RedoConstructionMapChange(UniverseID holomapid);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    ReenableErrorLog: {
      returnType: void
      parameters: []
      declaration: void ReenableErrorLog();
      file: debuglog.lua
      detailed: ""
      notes: ""
    }
    ReleaseConstructionMapState: {
      returnType: void
      parameters: []
      declaration: void ReleaseConstructionMapState(void);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    ReleaseDetachedSubordinateGroup: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: int
          name: group
        }
      ]
      declaration: void ReleaseDetachedSubordinateGroup(UniverseID controllableid, int group);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    ReleaseInteractionDescriptor: {
      returnType: void
      parameters: [
        {
          type: int32_t
          name: id
        }
      ]
      declaration: void ReleaseInteractionDescriptor(int32_t id);
      file: monitors.lua
      detailed: ""
      notes: ""
    }
    ReleaseOrderSyncPoint: {
      returnType: void
      parameters: [
        {
          type: uint32_t
          name: syncid
        }
      ]
      declaration: void ReleaseOrderSyncPoint(uint32_t syncid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    ReleaseOrderSyncPointFromOrder: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: size_t
          name: idx
        }
      ]
      declaration: void ReleaseOrderSyncPointFromOrder(UniverseID controllableid, size_t idx);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    ReleasePersonFromCrewTransfer: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: NPCSeed
          name: person
        }
      ]
      declaration: void ReleasePersonFromCrewTransfer(UniverseID controllableid, NPCSeed person);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    ReloadSaveList: {
      returnType: void
      parameters: []
      declaration: void ReloadSaveList(void);
      file: menu_userquestion.lua
      detailed: ""
      notes: ""
    }
    RemoveAllOrders: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
      ]
      declaration: bool RemoveAllOrders(UniverseID controllableid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    RemoveAttackerFromBoardingOperation: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: defensibleboarderid
        }
      ]
      declaration: bool RemoveAttackerFromBoardingOperation(UniverseID defensibleboarderid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    RemoveBlacklist: {
      returnType: void
      parameters: [
        {
          type: BlacklistID
          name: id
        }
      ]
      declaration: void RemoveBlacklist(BlacklistID id);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    RemoveBuildPlot2: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: stationid
        }
        {
          type: bool
          name: removebuildstoragecargo
        }
      ]
      declaration: bool RemoveBuildPlot2(UniverseID stationid, bool removebuildstoragecargo);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    RemoveBuildStorage: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: buildstorageid
        }
      ]
      declaration: bool RemoveBuildStorage(UniverseID buildstorageid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    RemoveColorMapColorDefinition: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: colorid
        }
      ]
      declaration: void RemoveColorMapColorDefinition(const char* colorid);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    RemoveColorProfile: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: filename
        }
      ]
      declaration: void RemoveColorProfile(const char* filename);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    RemoveCommander2: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
      ]
      declaration: bool RemoveCommander2(UniverseID controllableid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    RemoveComponent: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
      ]
      declaration: void RemoveComponent(UniverseID componentid);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    RemoveConstructionPlan: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: source
        }
        {
          type: const char*
          name: id
        }
      ]
      declaration: bool RemoveConstructionPlan(const char* source, const char* id);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    RemoveCustomGameStartPlayerProperty: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
        {
          type: const char*
          name: entryid
        }
      ]
      declaration: void RemoveCustomGameStartPlayerProperty(const char* id, const char* propertyid, const char* entryid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    RemoveDefaultOrderFailure: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
      ]
      declaration: void RemoveDefaultOrderFailure(UniverseID controllableid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    RemoveDockingBayReservation: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: dockingbayid
        }
      ]
      declaration: void RemoveDockingBayReservation(UniverseID dockingbayid);
      file: menu_platformundock.lua
      detailed: ""
      notes: ""
    }
    RemoveFightRule: {
      returnType: void
      parameters: [
        {
          type: FightRuleID
          name: id
        }
      ]
      declaration: void RemoveFightRule(FightRuleID id);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    RemoveFill: {
      returnType: void
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
        {
          type: const char*const
          name: connectionname
        }
      ]
      declaration: void RemoveFill(const UniverseID componentid, const char*const connectionname);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    RemoveFleetUnit: {
      returnType: void
      parameters: [
        {
          type: FleetUnitID
          name: fleetunitid
        }
      ]
      declaration: void RemoveFleetUnit(FleetUnitID fleetunitid);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    RemoveFloatingSequenceFromConstructionPlan: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
      ]
      declaration: void RemoveFloatingSequenceFromConstructionPlan(UniverseID holomapid);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    RemoveGateConnection: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: gateid
        }
        {
          type: UniverseID
          name: othergateid
        }
      ]
      declaration: void RemoveGateConnection(UniverseID gateid, UniverseID othergateid);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    RemoveHoloMap: {
      returnType: void
      parameters: []
      declaration: void RemoveHoloMap(void);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    RemoveInputProfile: {
      returnType: void
      parameters: [
        {
          type: uint32_t
          name: slot
        }
      ]
      declaration: void RemoveInputProfile(uint32_t slot);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    RemoveItemFromConstructionMap2: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: size_t
          name: itemidx
        }
        {
          type: bool
          name: removesequence
        }
      ]
      declaration: void RemoveItemFromConstructionMap2(UniverseID holomapid, size_t itemidx, bool removesequence);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    RemoveLoadout: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: source
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: const char*
          name: localid
        }
      ]
      declaration: bool RemoveLoadout(const char* source, const char* macroname, const char* localid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    RemoveOrder: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: size_t
          name: idx
        }
        {
          type: bool
          name: playercancelled
        }
        {
          type: bool
          name: checkonly
        }
      ]
      declaration: bool RemoveOrder(UniverseID controllableid, size_t idx, bool playercancelled, bool checkonly);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    RemoveOrder2: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: size_t
          name: idx
        }
        {
          type: bool
          name: playercancelled
        }
        {
          type: bool
          name: checkonly
        }
        {
          type: bool
          name: onlyimmediate
        }
      ]
      declaration: bool RemoveOrder2(UniverseID controllableid, size_t idx, bool playercancelled, bool checkonly, bool onlyimmediate);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    RemoveOrderFailure: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: uint32_t
          name: id
        }
      ]
      declaration: void RemoveOrderFailure(UniverseID controllableid, uint32_t id);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    RemoveOrderSyncPointID: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: size_t
          name: orderidx
        }
      ]
      declaration: void RemoveOrderSyncPointID(UniverseID controllableid, size_t orderidx);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    RemoveOutline: {
      returnType: void
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
        {
          type: const char*const
          name: connectionname
        }
      ]
      declaration: void RemoveOutline(const UniverseID componentid, const char*const connectionname);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    RemovePerson: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: NPCSeed
          name: person
        }
      ]
      declaration: void RemovePerson(UniverseID controllableid, NPCSeed person);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    RemovePlannedDefaultOrder: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
      ]
      declaration: void RemovePlannedDefaultOrder(UniverseID controllableid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    RemovePlayerAlert: {
      returnType: void
      parameters: [
        {
          type: size_t
          name: index
        }
      ]
      declaration: void RemovePlayerAlert(size_t index);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    RemoveShipTradeLoopCargoReservationOverride: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: shipid
        }
      ]
      declaration: void RemoveShipTradeLoopCargoReservationOverride(UniverseID shipid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    RemoveTrackedMenu: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: menu
        }
      ]
      declaration: void RemoveTrackedMenu(const char* menu);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    RemoveTradeRule: {
      returnType: void
      parameters: [
        {
          type: TradeRuleID
          name: id
        }
      ]
      declaration: void RemoveTradeRule(TradeRuleID id);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    RemoveTradeWare: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: const char*
          name: wareid
        }
      ]
      declaration: void RemoveTradeWare(UniverseID containerid, const char* wareid);
      file: menu_station_overview.lua
      detailed: ""
      notes: ""
    }
    ReplaceGlyphsWithAToZ: {
      returnType: const char*
      parameters: [
        {
          type: const char*
          name: inputtext
        }
      ]
      declaration: const char* ReplaceGlyphsWithAToZ(const char* inputtext);
      file: menu_scenario_debriefing.lua
      detailed: ""
      notes: ""
    }
    ReplaceHighwaySpline: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: highwayid
        }
        {
          type: SplineData*
          name: splinepoints
        }
        {
          type: uint32_t
          name: numsplinepoints
        }
        {
          type: UniverseID
          name: holomapid
        }
      ]
      declaration: void ReplaceHighwaySpline(UniverseID highwayid, SplineData* splinepoints, uint32_t numsplinepoints, UniverseID holomapid);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    RequestDockAt: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: bool
          name: checkonly
        }
      ]
      declaration: bool RequestDockAt(UniverseID containerid, bool checkonly);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    RequestDockAtReason: {
      returnType: const char*
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: bool
          name: checkonly
        }
      ]
      declaration: const char* RequestDockAtReason(UniverseID containerid, bool checkonly);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    RequestGPU: {
      returnType: void
      parameters: [
        {
          type: uint32_t
          name: idx
        }
      ]
      declaration: void RequestGPU(uint32_t idx);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    RequestGPUAutomaticallySelected: {
      returnType: void
      parameters: []
      declaration: void RequestGPUAutomaticallySelected(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    RequestLanguageChange: {
      returnType: void
      parameters: [
        {
          type: int32_t
          name: id
        }
      ]
      declaration: void RequestLanguageChange(int32_t id);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    RequestShipFromInternalStorage2: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: shipid
        }
        {
          type: bool
          name: highpriority
        }
        {
          type: UniverseID
          name: refcomponentid
        }
      ]
      declaration: bool RequestShipFromInternalStorage2(UniverseID shipid, bool highpriority, UniverseID refcomponentid);
      file: menu_platformundock.lua
      detailed: ""
      notes: ""
    }
    RequestSoundDeviceSwitch: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: device
        }
      ]
      declaration: void RequestSoundDeviceSwitch(const char* device);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    ReserveBuildPlot: {
      returnType: UniverseID
      parameters: [
        {
          type: UniverseID
          name: sectorid
        }
        {
          type: const char*
          name: factionid
        }
        {
          type: const char*
          name: set
        }
        {
          type: UIPosRot
          name: location
        }
        {
          type: float
          name: x
        }
        {
          type: float
          name: y
        }
        {
          type: float
          name: z
        }
      ]
      declaration: UniverseID ReserveBuildPlot(UniverseID sectorid, const char* factionid, const char* set, UIPosRot location, float x, float y, float z);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    ResetConstructionMapModuleRotation: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: size_t
          name: cp_idx
        }
      ]
      declaration: void ResetConstructionMapModuleRotation(UniverseID holomapid, size_t cp_idx);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    ResetCustomGameStart: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: id
        }
      ]
      declaration: void ResetCustomGameStart(const char* id);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    ResetCustomGameStartProperty: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
      ]
      declaration: void ResetCustomGameStartProperty(const char* id, const char* propertyid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    ResetDefaultResponseToSignalForFaction: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: signalid
        }
        {
          type: const char*
          name: factionid
        }
        {
          type: const char*
          name: purposeid
        }
      ]
      declaration: void ResetDefaultResponseToSignalForFaction(const char* signalid, const char* factionid, const char* purposeid);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    ResetEncryptedDirectInputData: {
      returnType: void
      parameters: []
      declaration: void ResetEncryptedDirectInputData(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    ResetFollowCameraBasePos: {
      returnType: void
      parameters: []
      declaration: void ResetFollowCameraBasePos(void);
      file: menu_followcamera.lua
      detailed: ""
      notes: ""
    }
    ResetFollowCameraBasePosOverride: {
      returnType: void
      parameters: []
      declaration: void ResetFollowCameraBasePosOverride(void);
      file: menu_followcamera.lua
      detailed: ""
      notes: ""
    }
    ResetMapPlayerRotation: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
      ]
      declaration: void ResetMapPlayerRotation(UniverseID holomapid);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    ResetOrderLoop: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
      ]
      declaration: void ResetOrderLoop(UniverseID controllableid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    ResetResponseToSignalForControllable: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: signalid
        }
        {
          type: UniverseID
          name: controllableid
        }
      ]
      declaration: bool ResetResponseToSignalForControllable(const char* signalid, UniverseID controllableid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    ResetTimelinesProgress: {
      returnType: void
      parameters: []
      declaration: void ResetTimelinesProgress(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    RestoreAccessibilityOptions: {
      returnType: void
      parameters: []
      declaration: void RestoreAccessibilityOptions(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    RestoreMiscOptions: {
      returnType: void
      parameters: []
      declaration: void RestoreMiscOptions(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    RevealEncyclopedia: {
      returnType: void
      parameters: []
      declaration: void RevealEncyclopedia(void);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    RevealMap: {
      returnType: void
      parameters: []
      declaration: void RevealMap(void);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    RevealStations: {
      returnType: void
      parameters: []
      declaration: void RevealStations(void);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SaveAAOption: {
      returnType: void
      parameters: []
      declaration: void SaveAAOption(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SaveDLSSModeOption: {
      returnType: void
      parameters: []
      declaration: void SaveDLSSModeOption(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SaveDLSSOption: {
      returnType: void
      parameters: []
      declaration: void SaveDLSSOption(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SaveFollowCameraBasePos: {
      returnType: void
      parameters: []
      declaration: void SaveFollowCameraBasePos(void);
      file: menu_followcamera.lua
      detailed: ""
      notes: ""
    }
    SaveLoadout: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: macroname
        }
        {
          type: UILoadout
          name: uiloadout
        }
        {
          type: const char*
          name: source
        }
        {
          type: const char*
          name: id
        }
        {
          type: bool
          name: overwrite
        }
        {
          type: const char*
          name: name
        }
        {
          type: const char*
          name: desc
        }
      ]
      declaration: void SaveLoadout(const char* macroname, UILoadout uiloadout, const char* source, const char* id, bool overwrite, const char* name, const char* desc);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    SaveLoadout2: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: macroname
        }
        {
          type: UILoadout2
          name: uiloadout
        }
        {
          type: const char*
          name: source
        }
        {
          type: const char*
          name: id
        }
        {
          type: bool
          name: overwrite
        }
        {
          type: const char*
          name: name
        }
        {
          type: const char*
          name: desc
        }
      ]
      declaration: void SaveLoadout2(const char* macroname, UILoadout2 uiloadout, const char* source, const char* id, bool overwrite, const char* name, const char* desc);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    SaveMapConstructionPlan: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: const char*
          name: source
        }
        {
          type: const char*
          name: id
        }
        {
          type: bool
          name: overwrite
        }
        {
          type: const char*
          name: name
        }
        {
          type: const char*
          name: desc
        }
      ]
      declaration: void SaveMapConstructionPlan(UniverseID holomapid, const char* source, const char* id, bool overwrite, const char* name, const char* desc);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    SaveUIUserData: {
      returnType: void
      parameters: []
      declaration: void SaveUIUserData(void);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    SaveUpscalingOption: {
      returnType: void
      parameters: []
      declaration: void SaveUpscalingOption(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SelectBuildMapEntry: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: size_t
          name: cp_idx
        }
      ]
      declaration: void SelectBuildMapEntry(UniverseID holomapid, size_t cp_idx);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    SelectPickedBuildMapEntry: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
      ]
      declaration: void SelectPickedBuildMapEntry(UniverseID holomapid);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    SelectSimilarMapComponents: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: UniverseID
          name: componentid
        }
      ]
      declaration: void SelectSimilarMapComponents(UniverseID holomapid, UniverseID componentid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SelfDestructComponent: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
      ]
      declaration: void SelfDestructComponent(UniverseID componentid);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    SellPlayerShip: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: shipid
        }
        {
          type: UniverseID
          name: shipyardid
        }
      ]
      declaration: void SellPlayerShip(UniverseID shipid, UniverseID shipyardid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetAAOption: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: fxaa
        }
      ]
      declaration: void SetAAOption(const char* fxaa);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetActiveFrame: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: frameid
        }
      ]
      declaration: bool SetActiveFrame(const int frameid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    SetActiveHeadTrackerAngleFactor: {
      returnType: void
      parameters: [
        {
          type: float
          name: value
        }
      ]
      declaration: void SetActiveHeadTrackerAngleFactor(float value);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetActiveHeadTrackerDeadzoneAngle: {
      returnType: void
      parameters: [
        {
          type: float
          name: value
        }
      ]
      declaration: void SetActiveHeadTrackerDeadzoneAngle(float value);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetActiveHeadTrackerDeadzonePosition: {
      returnType: void
      parameters: [
        {
          type: float
          name: value
        }
      ]
      declaration: void SetActiveHeadTrackerDeadzonePosition(float value);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetActiveHeadTrackerGazeAngleFactor: {
      returnType: void
      parameters: [
        {
          type: float
          name: value
        }
      ]
      declaration: void SetActiveHeadTrackerGazeAngleFactor(float value);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetActiveHeadTrackerGazeDeadzone: {
      returnType: void
      parameters: [
        {
          type: float
          name: value
        }
      ]
      declaration: void SetActiveHeadTrackerGazeDeadzone(float value);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetActiveHeadTrackerGazeFilterStrength: {
      returnType: void
      parameters: [
        {
          type: size_t
          name: value
        }
      ]
      declaration: void SetActiveHeadTrackerGazeFilterStrength(size_t value);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetActiveHeadTrackerHeadFilterStrength: {
      returnType: void
      parameters: [
        {
          type: size_t
          name: value
        }
      ]
      declaration: void SetActiveHeadTrackerHeadFilterStrength(size_t value);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetActiveHeadTrackerHeadPositionFactor: {
      returnType: void
      parameters: [
        {
          type: float
          name: value
        }
      ]
      declaration: void SetActiveHeadTrackerHeadPositionFactor(float value);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetActiveHeadTrackerMode: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: mode
        }
      ]
      declaration: void SetActiveHeadTrackerMode(const char* mode);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetActiveMission: {
      returnType: bool
      parameters: [
        {
          type: MissionID
          name: missionid
        }
      ]
      declaration: bool SetActiveMission(MissionID missionid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetAdaptiveSamplingOption: {
      returnType: void
      parameters: [
        {
          type: float
          name: value
        }
      ]
      declaration: void SetAdaptiveSamplingOption(float value);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetAllDronesArmed: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: bool
          name: arm
        }
      ]
      declaration: void SetAllDronesArmed(UniverseID defensibleid, bool arm);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    SetAllMissileTurretModes: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: const char*
          name: mode
        }
      ]
      declaration: void SetAllMissileTurretModes(UniverseID defensibleid, const char* mode);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetAllMissileTurretsArmed: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: bool
          name: arm
        }
      ]
      declaration: void SetAllMissileTurretsArmed(UniverseID defensibleid, bool arm);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetAllNonMissileTurretModes: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: const char*
          name: mode
        }
      ]
      declaration: void SetAllNonMissileTurretModes(UniverseID defensibleid, const char* mode);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetAllNonMissileTurretsArmed: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: bool
          name: arm
        }
      ]
      declaration: void SetAllNonMissileTurretsArmed(UniverseID defensibleid, bool arm);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetAllowedWeaponSystems: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: size_t
          name: orderidx
        }
        {
          type: bool
          name: usedefault
        }
        {
          type: WeaponSystemInfo*
          name: uiweaponsysteminfo
        }
        {
          type: uint32_t
          name: numuiweaponsysteminfo
        }
      ]
      declaration: void SetAllowedWeaponSystems(UniverseID defensibleid, size_t orderidx, bool usedefault, WeaponSystemInfo* uiweaponsysteminfo, uint32_t numuiweaponsysteminfo);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetAllTurretModes: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: const char*
          name: mode
        }
      ]
      declaration: void SetAllTurretModes(UniverseID defensibleid, const char* mode);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    SetAllTurretsArmed: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: bool
          name: arm
        }
      ]
      declaration: void SetAllTurretsArmed(UniverseID defensibleid, bool arm);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    SetAllUIInputIgnored: {
      returnType: void
      parameters: [
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetAllUIInputIgnored(bool value);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetAmmoOfWeapon: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: weaponid
        }
        {
          type: const char*
          name: newammomacro
        }
      ]
      declaration: bool SetAmmoOfWeapon(UniverseID weaponid, const char* newammomacro);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetAutoRoll: {
      returnType: void
      parameters: [
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetAutoRoll(bool value);
      file: menu_userquestion.lua
      detailed: ""
      notes: ""
    }
    SetAutosaveIntervalOption: {
      returnType: void
      parameters: [
        {
          type: float
          name: factor
        }
      ]
      declaration: void SetAutosaveIntervalOption(float factor);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetAutoZoomResetOption: {
      returnType: void
      parameters: [
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetAutoZoomResetOption(bool value);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetBoxText: {
      returnType: void
      parameters: [
        {
          type: const int
          name: boxtextid
        }
        {
          type: const char*
          name: text
        }
      ]
      declaration: void SetBoxText(const int boxtextid, const char* text);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetBoxTextBoxColor: {
      returnType: void
      parameters: [
        {
          type: const int
          name: boxtextid
        }
        {
          type: Color
          name: color
        }
      ]
      declaration: void SetBoxTextBoxColor(const int boxtextid, Color color);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetBoxTextColor: {
      returnType: void
      parameters: [
        {
          type: const int
          name: boxtextid
        }
        {
          type: Color
          name: color
        }
      ]
      declaration: void SetBoxTextColor(const int boxtextid, Color color);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetBoxTextGlowFactor: {
      returnType: void
      parameters: [
        {
          type: const int
          name: boxtextid
        }
        {
          type: float
          name: factor
        }
      ]
      declaration: void SetBoxTextGlowFactor(const int boxtextid, float factor);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetBuildTaskTransferredMoney: {
      returnType: void
      parameters: [
        {
          type: BuildTaskID
          name: id
        }
        {
          type: int64_t
          name: value
        }
      ]
      declaration: void SetBuildTaskTransferredMoney(BuildTaskID id, int64_t value);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    SetButtonActive: {
      returnType: void
      parameters: [
        {
          type: const int
          name: buttonid
        }
        {
          type: bool
          name: active
        }
      ]
      declaration: void SetButtonActive(const int buttonid, bool active);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetButtonGlowFactor: {
      returnType: void
      parameters: [
        {
          type: const int
          name: buttonid
        }
        {
          type: float
          name: factor
        }
      ]
      declaration: void SetButtonGlowFactor(const int buttonid, float factor);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetButtonHighlightColor: {
      returnType: void
      parameters: [
        {
          type: const int
          name: buttonid
        }
        {
          type: Color
          name: color
        }
      ]
      declaration: void SetButtonHighlightColor(const int buttonid, Color color);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetButtonHighlightGlowFactor: {
      returnType: void
      parameters: [
        {
          type: const int
          name: buttonid
        }
        {
          type: float
          name: factor
        }
      ]
      declaration: void SetButtonHighlightGlowFactor(const int buttonid, float factor);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetButtonIcon2Color: {
      returnType: void
      parameters: [
        {
          type: const int
          name: buttonid
        }
        {
          type: Color
          name: color
        }
      ]
      declaration: void SetButtonIcon2Color(const int buttonid, Color color);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetButtonIcon2GlowFactor: {
      returnType: void
      parameters: [
        {
          type: const int
          name: buttonid
        }
        {
          type: float
          name: factor
        }
      ]
      declaration: void SetButtonIcon2GlowFactor(const int buttonid, float factor);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetButtonIcon2ID: {
      returnType: void
      parameters: [
        {
          type: const int
          name: buttonid
        }
        {
          type: const char*
          name: iconid
        }
      ]
      declaration: void SetButtonIcon2ID(const int buttonid, const char* iconid);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetButtonIconColor: {
      returnType: void
      parameters: [
        {
          type: const int
          name: buttonid
        }
        {
          type: Color
          name: color
        }
      ]
      declaration: void SetButtonIconColor(const int buttonid, Color color);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetButtonIconGlowFactor: {
      returnType: void
      parameters: [
        {
          type: const int
          name: buttonid
        }
        {
          type: float
          name: factor
        }
      ]
      declaration: void SetButtonIconGlowFactor(const int buttonid, float factor);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetButtonIconID: {
      returnType: void
      parameters: [
        {
          type: const int
          name: buttonid
        }
        {
          type: const char*
          name: iconid
        }
      ]
      declaration: void SetButtonIconID(const int buttonid, const char* iconid);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetButtonText2: {
      returnType: void
      parameters: [
        {
          type: const int
          name: buttonid
        }
        {
          type: const char*
          name: text
        }
      ]
      declaration: void SetButtonText2(const int buttonid, const char* text);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetButtonText2Color: {
      returnType: void
      parameters: [
        {
          type: const int
          name: buttonid
        }
        {
          type: Color
          name: color
        }
      ]
      declaration: void SetButtonText2Color(const int buttonid, Color color);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetButtonText2GlowFactor: {
      returnType: void
      parameters: [
        {
          type: const int
          name: buttonid
        }
        {
          type: float
          name: factor
        }
      ]
      declaration: void SetButtonText2GlowFactor(const int buttonid, float factor);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetButtonTextColor: {
      returnType: void
      parameters: [
        {
          type: const int
          name: buttonid
        }
        {
          type: Color
          name: color
        }
      ]
      declaration: void SetButtonTextColor(const int buttonid, Color color);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetButtonTextGlowFactor: {
      returnType: void
      parameters: [
        {
          type: const int
          name: buttonid
        }
        {
          type: float
          name: factor
        }
      ]
      declaration: void SetButtonTextGlowFactor(const int buttonid, float factor);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetCheckBoxChecked2: {
      returnType: void
      parameters: [
        {
          type: const int
          name: checkboxid
        }
        {
          type: bool
          name: checked
        }
        {
          type: bool
          name: update
        }
      ]
      declaration: void SetCheckBoxChecked2(const int checkboxid, bool checked, bool update);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    SetCheckBoxColor: {
      returnType: void
      parameters: [
        {
          type: const int
          name: checkboxid
        }
        {
          type: Color
          name: color
        }
      ]
      declaration: void SetCheckBoxColor(const int checkboxid, Color color);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetCheckBoxSymbolGlowFactor: {
      returnType: void
      parameters: [
        {
          type: const int
          name: checkboxid
        }
        {
          type: float
          name: factor
        }
      ]
      declaration: void SetCheckBoxSymbolGlowFactor(const int checkboxid, float factor);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetCheckpointSequence: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: checkpointid
        }
        {
          type: int32_t
          name: sequence
        }
      ]
      declaration: void SetCheckpointSequence(UniverseID checkpointid, int32_t sequence);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    SetChromaticAberrationOption: {
      returnType: void
      parameters: [
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetChromaticAberrationOption(bool value);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetClusterBackground: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: clusterid
        }
        {
          type: const char*
          name: macroname
        }
      ]
      declaration: void SetClusterBackground(UniverseID clusterid, const char* macroname);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    SetCockpitCameraScaleOption: {
      returnType: void
      parameters: [
        {
          type: float
          name: value
        }
      ]
      declaration: void SetCockpitCameraScaleOption(float value);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetColorBlindOption: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: mode
        }
      ]
      declaration: void SetColorBlindOption(const char* mode);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetColorBlindOptionStrength: {
      returnType: void
      parameters: [
        {
          type: float
          name: value
        }
      ]
      declaration: void SetColorBlindOptionStrength(float value);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetColorMapDefinition: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: colorid
        }
        {
          type: Color
          name: color
        }
        {
          type: float
          name: glowfactor
        }
      ]
      declaration: void SetColorMapDefinition(const char* colorid, Color color, float glowfactor);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetColorMapReference: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: mappingid
        }
        {
          type: const char*
          name: colorid
        }
      ]
      declaration: void SetColorMapReference(const char* mappingid, const char* colorid);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetComponentDescription: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
        {
          type: const char*
          name: desc
        }
      ]
      declaration: void SetComponentDescription(UniverseID componentid, const char* desc);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    SetComponentOwner: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
        {
          type: const char*
          name: factionid
        }
      ]
      declaration: void SetComponentOwner(UniverseID componentid, const char* factionid);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    SetConfigSetting: {
      returnType: void
      parameters: [
        {
          type: const char*const
          name: setting
        }
        {
          type: const bool
          name: value
        }
      ]
      declaration: void SetConfigSetting(const char*const setting, const bool value);
      file: debuglog.lua
      detailed: ""
      notes: ""
    }
    SetConstructionMapBuildAngleStep: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: float
          name: angle
        }
      ]
      declaration: void SetConstructionMapBuildAngleStep(UniverseID holomapid, float angle);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    SetConstructionMapCollisionDetection: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetConstructionMapCollisionDetection(UniverseID holomapid, bool value);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    SetConstructionMapRenderSectorBackground: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetConstructionMapRenderSectorBackground(UniverseID holomapid, bool value);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    SetConstructionMapRenderTransformGizmo: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetConstructionMapRenderTransformGizmo(UniverseID holomapid, bool value);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    SetConstructionSequenceFromConstructionMap: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: UniverseID
          name: holomapid
        }
      ]
      declaration: void SetConstructionSequenceFromConstructionMap(UniverseID containerid, UniverseID holomapid);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    SetContainerBuildMethod: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: const char*
          name: buildmethodid
        }
      ]
      declaration: void SetContainerBuildMethod(UniverseID containerid, const char* buildmethodid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetContainerBuildPriceFactor: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: float
          name: value
        }
      ]
      declaration: void SetContainerBuildPriceFactor(UniverseID containerid, float value);
      file: menu_station_overview.lua
      detailed: ""
      notes: ""
    }
    SetContainerBuyLimitOverride: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: const char*
          name: wareid
        }
        {
          type: int32_t
          name: amount
        }
      ]
      declaration: void SetContainerBuyLimitOverride(UniverseID containerid, const char* wareid, int32_t amount);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetContainerGlobalPriceFactor: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: float
          name: value
        }
      ]
      declaration: void SetContainerGlobalPriceFactor(UniverseID containerid, float value);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    SetContainerSellLimitOverride: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: const char*
          name: wareid
        }
        {
          type: int32_t
          name: amount
        }
      ]
      declaration: void SetContainerSellLimitOverride(UniverseID containerid, const char* wareid, int32_t amount);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetContainerTradeRule: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: TradeRuleID
          name: id
        }
        {
          type: const char*
          name: ruletype
        }
        {
          type: const char*
          name: wareid
        }
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetContainerTradeRule(UniverseID containerid, TradeRuleID id, const char* ruletype, const char* wareid, bool value);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetContainerWareIsBuyable: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: const char*
          name: wareid
        }
        {
          type: bool
          name: allowed
        }
      ]
      declaration: void SetContainerWareIsBuyable(UniverseID containerid, const char* wareid, bool allowed);
      file: menu_station_overview.lua
      detailed: ""
      notes: ""
    }
    SetContainerWareIsSellable: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: const char*
          name: wareid
        }
        {
          type: bool
          name: allowed
        }
      ]
      declaration: void SetContainerWareIsSellable(UniverseID containerid, const char* wareid, bool allowed);
      file: menu_station_overview.lua
      detailed: ""
      notes: ""
    }
    SetContainerWorkforceFillCapacity: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetContainerWorkforceFillCapacity(UniverseID containerid, bool value);
      file: menu_station_overview.lua
      detailed: ""
      notes: ""
    }
    SetControllableBlacklist: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: BlacklistID
          name: id
        }
        {
          type: const char*
          name: listtype
        }
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetControllableBlacklist(UniverseID controllableid, BlacklistID id, const char* listtype, bool value);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetControllableFightRule: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: FightRuleID
          name: id
        }
        {
          type: const char*
          name: listtype
        }
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetControllableFightRule(UniverseID controllableid, FightRuleID id, const char* listtype, bool value);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetCrosshairMessage: {
      returnType: void
      parameters: [
        {
          type: const uint32_t
          name: messageid
        }
      ]
      declaration: void SetCrosshairMessage(const uint32_t messageid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    SetCurrentLoopOrder: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: size_t
          name: idx
        }
        {
          type: bool
          name: enabled
        }
        {
          type: bool
          name: forcestates
        }
        {
          type: bool
          name: checkonly
        }
      ]
      declaration: void SetCurrentLoopOrder(UniverseID controllableid, size_t idx, bool enabled, bool forcestates, bool checkonly);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetCustomGameStartBlueprintProperty: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
        {
          type: CustomGameStartBlueprint*
          name: uivalue
        }
        {
          type: uint32_t
          name: uivaluecount
        }
      ]
      declaration: void SetCustomGameStartBlueprintProperty(const char* id, const char* propertyid, CustomGameStartBlueprint* uivalue, uint32_t uivaluecount);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    SetCustomGameStartBoolProperty: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
        {
          type: bool
          name: uivalue
        }
      ]
      declaration: void SetCustomGameStartBoolProperty(const char* id, const char* propertyid, bool uivalue);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    SetCustomGameStartEncyclopediaProperty: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
        {
          type: CustomGameStartEncyclopediaEntry*
          name: uivalue
        }
        {
          type: uint32_t
          name: uivaluecount
        }
      ]
      declaration: void SetCustomGameStartEncyclopediaProperty(const char* id, const char* propertyid, CustomGameStartEncyclopediaEntry* uivalue, uint32_t uivaluecount);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    SetCustomGameStartFloatProperty: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
        {
          type: float
          name: uivalue
        }
      ]
      declaration: void SetCustomGameStartFloatProperty(const char* id, const char* propertyid, float uivalue);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    SetCustomGameStartInventoryProperty: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
        {
          type: CustomGameStartInventory*
          name: uivalue
        }
        {
          type: uint32_t
          name: uivaluecount
        }
      ]
      declaration: void SetCustomGameStartInventoryProperty(const char* id, const char* propertyid, CustomGameStartInventory* uivalue, uint32_t uivaluecount);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    SetCustomGameStartKnownProperty2: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
        {
          type: CustomGameStartKnownEntry2*
          name: uivalue
        }
        {
          type: uint32_t
          name: uivaluecount
        }
      ]
      declaration: void SetCustomGameStartKnownProperty2(const char* id, const char* propertyid, CustomGameStartKnownEntry2* uivalue, uint32_t uivaluecount);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    SetCustomGameStartMoneyProperty: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
        {
          type: int64_t
          name: uivalue
        }
      ]
      declaration: void SetCustomGameStartMoneyProperty(const char* id, const char* propertyid, int64_t uivalue);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    SetCustomGameStartPlayerPropertyCount: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
        {
          type: const char*
          name: entryid
        }
        {
          type: uint32_t
          name: count
        }
      ]
      declaration: void SetCustomGameStartPlayerPropertyCount(const char* id, const char* propertyid, const char* entryid, uint32_t count);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    SetCustomGameStartPlayerPropertyMacroAndConstructionPlan2: {
      returnType: const char*
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
        {
          type: const char*
          name: entryid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: const char*
          name: constructionplanid
        }
      ]
      declaration: const char* SetCustomGameStartPlayerPropertyMacroAndConstructionPlan2(const char* id, const char* propertyid, const char* entryid, const char* macroname, const char* constructionplanid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    SetCustomGameStartPlayerPropertyMacroAndLoadout2: {
      returnType: const char*
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
        {
          type: const char*
          name: entryid
        }
        {
          type: const char*
          name: commanderid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: UILoadout2
          name: uiloadout
        }
      ]
      declaration: const char* SetCustomGameStartPlayerPropertyMacroAndLoadout2(const char* id, const char* propertyid, const char* entryid, const char* commanderid, const char* macroname, UILoadout2 uiloadout);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    SetCustomGameStartPlayerPropertyName: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
        {
          type: const char*
          name: entryid
        }
        {
          type: const char*
          name: name
        }
      ]
      declaration: void SetCustomGameStartPlayerPropertyName(const char* id, const char* propertyid, const char* entryid, const char* name);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    SetCustomGameStartPlayerPropertyObjectMacro: {
      returnType: const char*
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
        {
          type: const char*
          name: entryid
        }
        {
          type: const char*
          name: macroname
        }
      ]
      declaration: const char* SetCustomGameStartPlayerPropertyObjectMacro(const char* id, const char* propertyid, const char* entryid, const char* macroname);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    SetCustomGameStartPlayerPropertyPeople: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
        {
          type: const char*
          name: entryid
        }
        {
          type: const char*
          name: peopledefid
        }
      ]
      declaration: void SetCustomGameStartPlayerPropertyPeople(const char* id, const char* propertyid, const char* entryid, const char* peopledefid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    SetCustomGameStartPlayerPropertyPeopleFillPercentage2: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
        {
          type: const char*
          name: entryid
        }
        {
          type: float
          name: fillpercentage
        }
      ]
      declaration: void SetCustomGameStartPlayerPropertyPeopleFillPercentage2(const char* id, const char* propertyid, const char* entryid, float fillpercentage);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    SetCustomGameStartPlayerPropertyPerson: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
        {
          type: const char*
          name: entryid
        }
        {
          type: CustomGameStartPersonEntry
          name: uivalue
        }
      ]
      declaration: void SetCustomGameStartPlayerPropertyPerson(const char* id, const char* propertyid, const char* entryid, CustomGameStartPersonEntry uivalue);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    SetCustomGameStartPlayerPropertySectorAndOffset: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
        {
          type: const char*
          name: entryid
        }
        {
          type: const char*
          name: sectormacroname
        }
        {
          type: UIPosRot
          name: uivalue
        }
      ]
      declaration: void SetCustomGameStartPlayerPropertySectorAndOffset(const char* id, const char* propertyid, const char* entryid, const char* sectormacroname, UIPosRot uivalue);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    SetCustomGameStartPosRotProperty: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
        {
          type: UIPosRot
          name: uivalue
        }
      ]
      declaration: void SetCustomGameStartPosRotProperty(const char* id, const char* propertyid, UIPosRot uivalue);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    SetCustomGameStartRelationsProperty: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
        {
          type: CustomGameStartRelationInfo*
          name: uivalue
        }
        {
          type: uint32_t
          name: uivaluecount
        }
      ]
      declaration: void SetCustomGameStartRelationsProperty(const char* id, const char* propertyid, CustomGameStartRelationInfo* uivalue, uint32_t uivaluecount);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    SetCustomGameStartResearchProperty: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
        {
          type: const char**
          name: uivalue
        }
        {
          type: uint32_t
          name: uivaluecount
        }
      ]
      declaration: void SetCustomGameStartResearchProperty(const char* id, const char* propertyid, const char** uivalue, uint32_t uivaluecount);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    SetCustomGameStartShipAndEmptyLoadout: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: shippropertyid
        }
        {
          type: const char*
          name: loadoutpropertyid
        }
        {
          type: const char*
          name: macroname
        }
      ]
      declaration: void SetCustomGameStartShipAndEmptyLoadout(const char* id, const char* shippropertyid, const char* loadoutpropertyid, const char* macroname);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    SetCustomGameStartShipAndLoadoutProperty2: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: shippropertyid
        }
        {
          type: const char*
          name: loadoutpropertyid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: UILoadout2
          name: uiloadout
        }
      ]
      declaration: void SetCustomGameStartShipAndLoadoutProperty2(const char* id, const char* shippropertyid, const char* loadoutpropertyid, const char* macroname, UILoadout2 uiloadout);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    SetCustomGameStartShipPilot: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
        {
          type: CustomGameStartPersonEntry
          name: uivalue
        }
      ]
      declaration: void SetCustomGameStartShipPilot(const char* id, const char* propertyid, CustomGameStartPersonEntry uivalue);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    SetCustomGameStartStory: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
        {
          type: const char**
          name: uivalue
        }
        {
          type: uint32_t
          name: uivaluecount
        }
      ]
      declaration: void SetCustomGameStartStory(const char* id, const char* propertyid, const char** uivalue, uint32_t uivaluecount);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    SetCustomGameStartStringProperty: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: const char*
          name: propertyid
        }
        {
          type: const char*
          name: uivalue
        }
      ]
      declaration: void SetCustomGameStartStringProperty(const char* id, const char* propertyid, const char* uivalue);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    SetDefaultResponseToSignalForControllable: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: newresponse
        }
        {
          type: bool
          name: ask
        }
        {
          type: const char*
          name: signalid
        }
        {
          type: UniverseID
          name: controllableid
        }
      ]
      declaration: bool SetDefaultResponseToSignalForControllable(const char* newresponse, bool ask, const char* signalid, UniverseID controllableid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetDefaultResponseToSignalForFaction2: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: newresponse
        }
        {
          type: bool
          name: ask
        }
        {
          type: const char*
          name: signalid
        }
        {
          type: const char*
          name: factionid
        }
        {
          type: const char*
          name: purposeid
        }
      ]
      declaration: bool SetDefaultResponseToSignalForFaction2(const char* newresponse, bool ask, const char* signalid, const char* factionid, const char* purposeid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetDefensibleActiveWeaponGroup: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: bool
          name: primary
        }
        {
          type: uint32_t
          name: groupidx
        }
      ]
      declaration: void SetDefensibleActiveWeaponGroup(UniverseID defensibleid, bool primary, uint32_t groupidx);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    SetDefensibleLoadoutLevel: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: float
          name: value
        }
      ]
      declaration: void SetDefensibleLoadoutLevel(UniverseID defensibleid, float value);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetDLSSModeOption: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: value
        }
      ]
      declaration: void SetDLSSModeOption(const char* value);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetDLSSOption: {
      returnType: void
      parameters: [
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetDLSSOption(bool value);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetDockingBayReservation: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: dockingbayid
        }
        {
          type: double
          name: duration
        }
      ]
      declaration: void SetDockingBayReservation(UniverseID dockingbayid, double duration);
      file: menu_platformundock.lua
      detailed: ""
      notes: ""
    }
    SetDroneMode: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: const char*
          name: dronetype
        }
        {
          type: const char*
          name: mode
        }
      ]
      declaration: void SetDroneMode(UniverseID defensibleid, const char* dronetype, const char* mode);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    SetDroneTypeArmed: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: const char*
          name: dronetype
        }
        {
          type: bool
          name: arm
        }
      ]
      declaration: void SetDroneTypeArmed(UniverseID defensibleid, const char* dronetype, bool arm);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    SetDropDownCurOption: {
      returnType: void
      parameters: [
        {
          type: const int
          name: dropdownid
        }
        {
          type: const char*
          name: id
        }
      ]
      declaration: void SetDropDownCurOption(const int dropdownid, const char* id);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetDropDownOptionTexts: {
      returnType: void
      parameters: [
        {
          type: const int
          name: dropdownid
        }
        {
          type: const char**
          name: texts
        }
        {
          type: uint32_t
          name: numtexts
        }
      ]
      declaration: void SetDropDownOptionTexts(const int dropdownid, const char** texts, uint32_t numtexts);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetDropDownOptionTexts2: {
      returnType: void
      parameters: [
        {
          type: const int
          name: dropdownid
        }
        {
          type: const char**
          name: texts
        }
        {
          type: uint32_t
          name: numtexts
        }
      ]
      declaration: void SetDropDownOptionTexts2(const int dropdownid, const char** texts, uint32_t numtexts);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetEditBoxActive: {
      returnType: void
      parameters: [
        {
          type: const int
          name: editboxid
        }
        {
          type: bool
          name: active
        }
      ]
      declaration: void SetEditBoxActive(const int editboxid, bool active);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetEditBoxText: {
      returnType: void
      parameters: [
        {
          type: const int
          name: editboxid
        }
        {
          type: const char*
          name: text
        }
      ]
      declaration: void SetEditBoxText(const int editboxid, const char* text);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetEditBoxTextHidden: {
      returnType: void
      parameters: [
        {
          type: const int
          name: editboxid
        }
        {
          type: bool
          name: hidden
        }
      ]
      declaration: void SetEditBoxTextHidden(const int editboxid, bool hidden);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetEditingFollowCameraSettings: {
      returnType: void
      parameters: [
        {
          type: bool
          name: setting
        }
      ]
      declaration: void SetEditingFollowCameraSettings(bool setting);
      file: menu_followcamera.lua
      detailed: ""
      notes: ""
    }
    SetEmergencyEjectOption: {
      returnType: void
      parameters: [
        {
          type: bool
          name: setting
        }
      ]
      declaration: void SetEmergencyEjectOption(bool setting);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetEnemyWarningAttackSound: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: soundid
        }
      ]
      declaration: void SetEnemyWarningAttackSound(const char* soundid);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetEnemyWarningNearbySound: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: soundid
        }
      ]
      declaration: void SetEnemyWarningNearbySound(const char* soundid);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetEntityToPost: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: UniverseID
          name: entityid
        }
        {
          type: const char*
          name: postid
        }
      ]
      declaration: bool SetEntityToPost(UniverseID controllableid, UniverseID entityid, const char* postid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetEnvMapProbeInsideGlassFadeOption: {
      returnType: void
      parameters: [
        {
          type: float
          name: value
        }
      ]
      declaration: void SetEnvMapProbeInsideGlassFadeOption(float value);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetEnvMapProbeOption: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: quality
        }
      ]
      declaration: void SetEnvMapProbeOption(const char* quality);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetFactionBuildMethod: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: factionid
        }
        {
          type: const char*
          name: buildmethodid
        }
      ]
      declaration: void SetFactionBuildMethod(const char* factionid, const char* buildmethodid);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    SetFactionDefaultWeaponMode: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: factionid
        }
        {
          type: const char*
          name: weaponmode
        }
      ]
      declaration: void SetFactionDefaultWeaponMode(const char* factionid, const char* weaponmode);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    SetFactionRelationToPlayerFaction: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: factionid
        }
        {
          type: const char*
          name: reasonid
        }
        {
          type: float
          name: boostvalue
        }
      ]
      declaration: void SetFactionRelationToPlayerFaction(const char* factionid, const char* reasonid, float boostvalue);
      file: menu_diplomacy.lua
      detailed: ""
      notes: ""
    }
    SetFill: {
      returnType: void
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
        {
          type: const char*const
          name: connectionname
        }
        {
          type: const uint8_t
          name: red
        }
        {
          type: const uint8_t
          name: green
        }
        {
          type: const uint8_t
          name: blue
        }
        {
          type: const float
          name: alpha
        }
        {
          type: const bool
          name: animated
        }
        {
          type: const float
          name: minalpha
        }
        {
          type: const float
          name: maxalpha
        }
        {
          type: const float
          name: transitiontime
        }
      ]
      declaration: void SetFill(const UniverseID componentid, const char*const connectionname, const uint8_t red, const uint8_t green, const uint8_t blue, const float alpha, const bool animated, const float minalpha, const float maxalpha, const float transitiontime);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    SetFleetLogo: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: UILogo
          name: logo
        }
      ]
      declaration: void SetFleetLogo(UniverseID controllableid, UILogo logo);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetFleetManagement: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: bool
          name: enable
        }
      ]
      declaration: void SetFleetManagement(UniverseID controllableid, bool enable);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    SetFleetName: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: const char*
          name: fleetname
        }
      ]
      declaration: void SetFleetName(UniverseID controllableid, const char* fleetname);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetFleetUnitCommander: {
      returnType: void
      parameters: [
        {
          type: FleetUnitID
          name: fleetunitid
        }
        {
          type: UniverseID
          name: commanderid
        }
        {
          type: FleetUnitID
          name: commanderfleetunitid
        }
        {
          type: int32_t
          name: subordinategroupid
        }
      ]
      declaration: void SetFleetUnitCommander(FleetUnitID fleetunitid, UniverseID commanderid, FleetUnitID commanderfleetunitid, int32_t subordinategroupid);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    SetFleetUnitSubordinateGroupAssignment: {
      returnType: void
      parameters: [
        {
          type: FleetUnitID
          name: fleetunitid
        }
        {
          type: int
          name: group
        }
        {
          type: const char*
          name: assignment
        }
      ]
      declaration: void SetFleetUnitSubordinateGroupAssignment(FleetUnitID fleetunitid, int group, const char* assignment);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    SetFlowChartEdgeColor: {
      returnType: void
      parameters: [
        {
          type: const int
          name: flowchartedgeid
        }
        {
          type: Color
          name: color
        }
      ]
      declaration: void SetFlowChartEdgeColor(const int flowchartedgeid, Color color);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetFlowChartNodeCaptionText: {
      returnType: void
      parameters: [
        {
          type: const int
          name: flowchartnodeid
        }
        {
          type: const char*
          name: text
        }
      ]
      declaration: void SetFlowChartNodeCaptionText(const int flowchartnodeid, const char* text);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetFlowChartNodeCaptionTextColor: {
      returnType: void
      parameters: [
        {
          type: const int
          name: flowchartnodeid
        }
        {
          type: Color
          name: color
        }
      ]
      declaration: void SetFlowChartNodeCaptionTextColor(const int flowchartnodeid, Color color);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetFlowChartNodeCaptionTextGlowFactor: {
      returnType: void
      parameters: [
        {
          type: const int
          name: flowchartnodeid
        }
        {
          type: float
          name: factor
        }
      ]
      declaration: void SetFlowChartNodeCaptionTextGlowFactor(const int flowchartnodeid, float factor);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetFlowChartNodeCurValue: {
      returnType: void
      parameters: [
        {
          type: const int
          name: flowchartnodeid
        }
        {
          type: double
          name: value
        }
      ]
      declaration: void SetFlowChartNodeCurValue(const int flowchartnodeid, double value);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetFlowchartNodeExpanded: {
      returnType: void
      parameters: [
        {
          type: const int
          name: flowchartnodeid
        }
        {
          type: const int
          name: frameid
        }
        {
          type: bool
          name: expandedabove
        }
      ]
      declaration: void SetFlowchartNodeExpanded(const int flowchartnodeid, const int frameid, bool expandedabove);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetFlowChartNodeMaxValue: {
      returnType: void
      parameters: [
        {
          type: const int
          name: flowchartnodeid
        }
        {
          type: double
          name: value
        }
      ]
      declaration: void SetFlowChartNodeMaxValue(const int flowchartnodeid, double value);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetFlowChartNodeOutlineColor: {
      returnType: void
      parameters: [
        {
          type: const int
          name: flowchartnodeid
        }
        {
          type: Color
          name: color
        }
      ]
      declaration: void SetFlowChartNodeOutlineColor(const int flowchartnodeid, Color color);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetFlowChartNodeSlider1Value: {
      returnType: void
      parameters: [
        {
          type: const int
          name: flowchartnodeid
        }
        {
          type: double
          name: value
        }
      ]
      declaration: void SetFlowChartNodeSlider1Value(const int flowchartnodeid, double value);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetFlowChartNodeSlider2Value: {
      returnType: void
      parameters: [
        {
          type: const int
          name: flowchartnodeid
        }
        {
          type: double
          name: value
        }
      ]
      declaration: void SetFlowChartNodeSlider2Value(const int flowchartnodeid, double value);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetFlowChartNodeSliderStep: {
      returnType: void
      parameters: [
        {
          type: const int
          name: flowchartnodeid
        }
        {
          type: double
          name: step
        }
      ]
      declaration: void SetFlowChartNodeSliderStep(const int flowchartnodeid, double step);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetFlowChartNodeStatusBgIcon: {
      returnType: void
      parameters: [
        {
          type: const int
          name: flowchartnodeid
        }
        {
          type: const char*
          name: iconid
        }
      ]
      declaration: void SetFlowChartNodeStatusBgIcon(const int flowchartnodeid, const char* iconid);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetFlowChartNodeStatusColor: {
      returnType: void
      parameters: [
        {
          type: const int
          name: flowchartnodeid
        }
        {
          type: Color
          name: color
        }
      ]
      declaration: void SetFlowChartNodeStatusColor(const int flowchartnodeid, Color color);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetFlowChartNodeStatusGlowFactor: {
      returnType: void
      parameters: [
        {
          type: const int
          name: flowchartnodeid
        }
        {
          type: float
          name: factor
        }
      ]
      declaration: void SetFlowChartNodeStatusGlowFactor(const int flowchartnodeid, float factor);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetFlowChartNodeStatusIcon: {
      returnType: void
      parameters: [
        {
          type: const int
          name: flowchartnodeid
        }
        {
          type: const char*
          name: iconid
        }
      ]
      declaration: void SetFlowChartNodeStatusIcon(const int flowchartnodeid, const char* iconid);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetFlowChartNodeStatusIconMouseOverText: {
      returnType: void
      parameters: [
        {
          type: const int
          name: flowchartnodeid
        }
        {
          type: const char*
          name: mouseovertext
        }
      ]
      declaration: void SetFlowChartNodeStatusIconMouseOverText(const int flowchartnodeid, const char* mouseovertext);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetFlowChartNodeStatusText: {
      returnType: void
      parameters: [
        {
          type: const int
          name: flowchartnodeid
        }
        {
          type: const char*
          name: text
        }
      ]
      declaration: void SetFlowChartNodeStatusText(const int flowchartnodeid, const char* text);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetFocusMapComponent: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: UniverseID
          name: componentid
        }
        {
          type: bool
          name: resetplayerpan
        }
      ]
      declaration: void SetFocusMapComponent(UniverseID holomapid, UniverseID componentid, bool resetplayerpan);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetFocusMapConstructionPlanEntry: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: size_t
          name: cp_idx
        }
        {
          type: bool
          name: resetplayerpan
        }
      ]
      declaration: void SetFocusMapConstructionPlanEntry(UniverseID holomapid, size_t cp_idx, bool resetplayerpan);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    SetFocusMapOrder: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: size_t
          name: orderidx
        }
        {
          type: bool
          name: resetplayerpan
        }
      ]
      declaration: void SetFocusMapOrder(UniverseID holomapid, UniverseID controllableid, size_t orderidx, bool resetplayerpan);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetFollowCameraBasePos: {
      returnType: void
      parameters: [
        {
          type: Coord3D
          name: uipos
        }
      ]
      declaration: void SetFollowCameraBasePos(Coord3D uipos);
      file: menu_followcamera.lua
      detailed: ""
      notes: ""
    }
    SetFontStringGlowFactor: {
      returnType: void
      parameters: [
        {
          type: const int
          name: fontstringid
        }
        {
          type: float
          name: factor
        }
      ]
      declaration: void SetFontStringGlowFactor(const int fontstringid, float factor);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetForceShootingAtCursorOption: {
      returnType: void
      parameters: [
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetForceShootingAtCursorOption(bool value);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetFormationShape: {
      returnType: UIFormationInfo
      parameters: [
        {
          type: UniverseID
          name: objectid
        }
        {
          type: const char*
          name: formationshape
        }
      ]
      declaration: UIFormationInfo SetFormationShape(UniverseID objectid, const char* formationshape);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetFPSOverlayInMaster: {
      returnType: void
      parameters: [
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetFPSOverlayInMaster(bool value);
      file: debuglog.lua
      detailed: ""
      notes: ""
    }
    SetFrameInteractiveObject: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: frameid
        }
        {
          type: const int
          name: objectid
        }
      ]
      declaration: bool SetFrameInteractiveObject(const int frameid, const int objectid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    SetGlobalLightScale: {
      returnType: void
      parameters: [
        {
          type: float
          name: value
        }
      ]
      declaration: void SetGlobalLightScale(float value);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetGroupAndAssignment: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: int
          name: group
        }
        {
          type: const char*
          name: assignment
        }
      ]
      declaration: void SetGroupAndAssignment(UniverseID controllableid, int group, const char* assignment);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    SetGuidance: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
        {
          type: UIPosRot
          name: offset
        }
      ]
      declaration: void SetGuidance(UniverseID componentid, UIPosRot offset);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetHUDRadarActive: {
      returnType: void
      parameters: [
        {
          type: bool
          name: setting
        }
      ]
      declaration: void SetHUDRadarActive(bool setting);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetHUDRadarSeparate: {
      returnType: void
      parameters: [
        {
          type: bool
          name: setting
        }
      ]
      declaration: void SetHUDRadarSeparate(bool setting);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetHUDScaleOption: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: value
        }
      ]
      declaration: void SetHUDScaleOption(const char* value);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetIcon: {
      returnType: void
      parameters: [
        {
          type: const int
          name: widgeticonid
        }
        {
          type: const char*
          name: iconid
        }
      ]
      declaration: void SetIcon(const int widgeticonid, const char* iconid);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetIconColor: {
      returnType: void
      parameters: [
        {
          type: const int
          name: widgeticonid
        }
        {
          type: Color
          name: color
        }
      ]
      declaration: void SetIconColor(const int widgeticonid, Color color);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetIconGlowFactor: {
      returnType: void
      parameters: [
        {
          type: const int
          name: widgeticonid
        }
        {
          type: float
          name: factor
        }
      ]
      declaration: void SetIconGlowFactor(const int widgeticonid, float factor);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetIconText: {
      returnType: void
      parameters: [
        {
          type: const int
          name: widgeticonid
        }
        {
          type: const char*
          name: text
        }
      ]
      declaration: void SetIconText(const int widgeticonid, const char* text);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetIconText2: {
      returnType: void
      parameters: [
        {
          type: const int
          name: widgeticonid
        }
        {
          type: const char*
          name: text
        }
      ]
      declaration: void SetIconText2(const int widgeticonid, const char* text);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetIconText2Color: {
      returnType: void
      parameters: [
        {
          type: const int
          name: widgeticonid
        }
        {
          type: Color
          name: color
        }
      ]
      declaration: void SetIconText2Color(const int widgeticonid, Color color);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetIconText2GlowFactor: {
      returnType: void
      parameters: [
        {
          type: const int
          name: widgeticonid
        }
        {
          type: float
          name: factor
        }
      ]
      declaration: void SetIconText2GlowFactor(const int widgeticonid, float factor);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetIconTextColor: {
      returnType: void
      parameters: [
        {
          type: const int
          name: widgeticonid
        }
        {
          type: Color
          name: color
        }
      ]
      declaration: void SetIconTextColor(const int widgeticonid, Color color);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetIconTextGlowFactor: {
      returnType: void
      parameters: [
        {
          type: const int
          name: widgeticonid
        }
        {
          type: float
          name: factor
        }
      ]
      declaration: void SetIconTextGlowFactor(const int widgeticonid, float factor);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetInputFeedbackOption: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: value
        }
      ]
      declaration: void SetInputFeedbackOption(const char* value);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetInputFeedbackTextOption: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: type
        }
        {
          type: const char*
          name: idname
        }
        {
          type: const char*
          name: textoption
        }
      ]
      declaration: void SetInputFeedbackTextOption(const char* type, const char* idname, const char* textoption);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetInputFeedbackVoiceOption: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: type
        }
        {
          type: const char*
          name: idname
        }
        {
          type: const char*
          name: voiceoption
        }
      ]
      declaration: void SetInputFeedbackVoiceOption(const char* type, const char* idname, const char* voiceoption);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetInversionSetting: {
      returnType: void
      parameters: [
        {
          type: uint32_t
          name: uirangeid
        }
        {
          type: const char*
          name: parametername
        }
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetInversionSetting(uint32_t uirangeid, const char* parametername, bool value);
      file: menu_userquestion.lua
      detailed: ""
      notes: ""
    }
    SetJoystickSteeringAdapative: {
      returnType: void
      parameters: [
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetJoystickSteeringAdapative(bool value);
      file: menu_userquestion.lua
      detailed: ""
      notes: ""
    }
    SetKnownRead: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
        {
          type: bool
          name: read
        }
      ]
      declaration: void SetKnownRead(UniverseID componentid, bool read);
      file: menu_encyclopedia.lua
      detailed: ""
      notes: ""
    }
    SetKnownTo: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
        {
          type: const char*
          name: factionid
        }
      ]
      declaration: void SetKnownTo(UniverseID componentid, const char* factionid);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    SetLongRangeScanIndicatorOption: {
      returnType: void
      parameters: [
        {
          type: bool
          name: shown
        }
      ]
      declaration: void SetLongRangeScanIndicatorOption(bool shown);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetLUTMode: {
      returnType: void
      parameters: [
        {
          type: uint32_t
          name: mode
        }
      ]
      declaration: void SetLUTMode(uint32_t mode);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetMacroMapLocalLinearHighways: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetMacroMapLocalLinearHighways(UniverseID holomapid, bool value);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    SetMacroMapLocalRingHighways: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetMacroMapLocalRingHighways(UniverseID holomapid, bool value);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    SetMacroMapSelection: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: bool
          name: selectplayer
        }
        {
          type: const char*
          name: propertyentryid
        }
      ]
      declaration: void SetMacroMapSelection(UniverseID holomapid, bool selectplayer, const char* propertyentryid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    SetMapAlertFilter: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: uint32_t
          name: alertlevel
        }
      ]
      declaration: void SetMapAlertFilter(UniverseID holomapid, uint32_t alertlevel);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetMapBehaviourInspectionComponent: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: UniverseID
          name: componentid
        }
      ]
      declaration: void SetMapBehaviourInspectionComponent(UniverseID holomapid, UniverseID componentid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetMapDefaultOrderParamObjectFilter: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: UniverseID
          name: ordercontrollableid
        }
        {
          type: bool
          name: planned
        }
        {
          type: size_t
          name: paramidx
        }
      ]
      declaration: void SetMapDefaultOrderParamObjectFilter(UniverseID holomapid, UniverseID ordercontrollableid, bool planned, size_t paramidx);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetMapFactionRelationColorOption: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetMapFactionRelationColorOption(UniverseID holomapid, bool value);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetMapFilterSectors: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: uint32_t
          name: numsectorids
        }
        {
          type: UniverseID*
          name: sectorids
        }
      ]
      declaration: void SetMapFilterSectors(UniverseID holomapid, uint32_t numsectorids, UniverseID* sectorids);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetMapFilterString: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: uint32_t
          name: numtexts
        }
        {
          type: const char**
          name: textarray
        }
      ]
      declaration: void SetMapFilterString(UniverseID holomapid, uint32_t numtexts, const char** textarray);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetMapObjectFilter: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: const char**
          name: classes
        }
        {
          type: uint32_t
          name: numclasses
        }
        {
          type: int32_t
          name: playerowned
        }
        {
          type: bool
          name: allowentitydeliverymissionobject
        }
      ]
      declaration: void SetMapObjectFilter(UniverseID holomapid, const char** classes, uint32_t numclasses, int32_t playerowned, bool allowentitydeliverymissionobject);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetMapOrderParamObjectFilter: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: UniverseID
          name: ordercontrollableid
        }
        {
          type: size_t
          name: orderidx
        }
        {
          type: size_t
          name: paramidx
        }
      ]
      declaration: void SetMapOrderParamObjectFilter(UniverseID holomapid, UniverseID ordercontrollableid, size_t orderidx, size_t paramidx);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetMapPaintMod: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: const char*
          name: wareid
        }
      ]
      declaration: void SetMapPaintMod(UniverseID holomapid, const char* wareid);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    SetMapPanOffset: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: UniverseID
          name: offsetcomponentid
        }
      ]
      declaration: void SetMapPanOffset(UniverseID holomapid, UniverseID offsetcomponentid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetMapPicking: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: bool
          name: enable
        }
      ]
      declaration: void SetMapPicking(UniverseID holomapid, bool enable);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetMapRelativeMousePosition: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: bool
          name: valid
        }
        {
          type: float
          name: x
        }
        {
          type: float
          name: y
        }
      ]
      declaration: void SetMapRelativeMousePosition(UniverseID holomapid, bool valid, float x, float y);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetMapRenderAllAllyOrderQueues: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetMapRenderAllAllyOrderQueues(UniverseID holomapid, bool value);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetMapRenderAllGateConnections: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetMapRenderAllGateConnections(UniverseID holomapid, bool value);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetMapRenderAllOrderQueues: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetMapRenderAllOrderQueues(UniverseID holomapid, bool value);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetMapRenderCivilianShips: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetMapRenderCivilianShips(UniverseID holomapid, bool value);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetMapRenderEclipticLines: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetMapRenderEclipticLines(UniverseID holomapid, bool value);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetMapRenderMissionGuidance: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: MissionID
          name: missionid
        }
      ]
      declaration: void SetMapRenderMissionGuidance(UniverseID holomapid, MissionID missionid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetMapRenderMissionOffers: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetMapRenderMissionOffers(UniverseID holomapid, bool value);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetMapRenderResourceInfo: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetMapRenderResourceInfo(UniverseID holomapid, bool value);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetMapRenderSatelliteRadarRange: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetMapRenderSatelliteRadarRange(UniverseID holomapid, bool value);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetMapRenderSelectionLines: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetMapRenderSelectionLines(UniverseID holomapid, bool value);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetMapRenderTradeOffers: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetMapRenderTradeOffers(UniverseID holomapid, bool value);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetMapRenderWrecks: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetMapRenderWrecks(UniverseID holomapid, bool value);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetMapSelectedFleetCommander: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: UniverseID
          name: controllableid
        }
      ]
      declaration: void SetMapSelectedFleetCommander(UniverseID holomapid, UniverseID controllableid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetMapState: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: HoloMapState
          name: state
        }
      ]
      declaration: void SetMapState(UniverseID holomapid, HoloMapState state);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetMapStationInfoBoxMargin: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: const char*
          name: margin
        }
        {
          type: uint32_t
          name: width
        }
      ]
      declaration: void SetMapStationInfoBoxMargin(UniverseID holomapid, const char* margin, uint32_t width);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetMapTargetDistance: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: float
          name: distance
        }
      ]
      declaration: void SetMapTargetDistance(UniverseID holomapid, float distance);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetMapTopTradesCount: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: uint32_t
          name: count
        }
      ]
      declaration: void SetMapTopTradesCount(UniverseID holomapid, uint32_t count);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetMapTradeFilterByMaxPrice: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: int64_t
          name: price
        }
      ]
      declaration: void SetMapTradeFilterByMaxPrice(UniverseID holomapid, int64_t price);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetMapTradeFilterByMinTotalVolume: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: uint32_t
          name: minvolume
        }
      ]
      declaration: void SetMapTradeFilterByMinTotalVolume(UniverseID holomapid, uint32_t minvolume);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetMapTradeFilterByPlayerOffer: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: bool
          name: buysellswitch
        }
        {
          type: bool
          name: enable
        }
      ]
      declaration: void SetMapTradeFilterByPlayerOffer(UniverseID holomapid, bool buysellswitch, bool enable);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetMapTradeFilterByWare: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: const char**
          name: wareids
        }
        {
          type: uint32_t
          name: numwareids
        }
      ]
      declaration: void SetMapTradeFilterByWare(UniverseID holomapid, const char** wareids, uint32_t numwareids);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetMapTradeFilterByWareTransport: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: const char**
          name: transporttypes
        }
        {
          type: uint32_t
          name: numtransporttypes
        }
      ]
      declaration: void SetMapTradeFilterByWareTransport(UniverseID holomapid, const char** transporttypes, uint32_t numtransporttypes);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetMapTradeFilterByWillingToTradeWithPlayer: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
      ]
      declaration: void SetMapTradeFilterByWillingToTradeWithPlayer(UniverseID holomapid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetMenuWidthScale: {
      returnType: void
      parameters: [
        {
          type: float
          name: value
        }
      ]
      declaration: void SetMenuWidthScale(float value);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetMessageRead: {
      returnType: void
      parameters: [
        {
          type: MessageID
          name: messageid
        }
        {
          type: const char*
          name: categoryname
        }
      ]
      declaration: void SetMessageRead(MessageID messageid, const char* categoryname);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    SetModifierButtonPosition: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: uimodifier
        }
        {
          type: int32_t
          name: source
        }
        {
          type: int32_t
          name: code
        }
        {
          type: size_t
          name: pos
        }
        {
          type: bool
          name: checkonly
        }
      ]
      declaration: bool SetModifierButtonPosition(const char* uimodifier, int32_t source, int32_t code, size_t pos, bool checkonly);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetMonitorExtents: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: monitorid
        }
        {
          type: float
          name: x
        }
        {
          type: float
          name: y
        }
        {
          type: float
          name: width
        }
        {
          type: float
          name: height
        }
      ]
      declaration: void SetMonitorExtents(const char* monitorid, float x, float y, float width, float height);
      file: monitors.lua
      detailed: ""
      notes: ""
    }
    SetMonitorRenderState: {
      returnType: void
      parameters: [
        {
          type: bool
          name: state
        }
      ]
      declaration: void SetMonitorRenderState(bool state);
      file: monitors.lua
      detailed: ""
      notes: ""
    }
    SetMouseCursorPosition: {
      returnType: void
      parameters: [
        {
          type: const int32_t
          name: posx
        }
        {
          type: const int32_t
          name: posy
        }
      ]
      declaration: void SetMouseCursorPosition(const int32_t posx, const int32_t posy);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    SetMouseInputBlockedByAnarkElement: {
      returnType: void
      parameters: [
        {
          type: int32_t
          name: mousebuttonid
        }
        {
          type: const char*
          name: modifiers
        }
        {
          type: bool
          name: blocked
        }
      ]
      declaration: void SetMouseInputBlockedByAnarkElement(int32_t mousebuttonid, const char* modifiers, bool blocked);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetMouseOverText: {
      returnType: void
      parameters: [
        {
          type: int
          name: widgetid
        }
        {
          type: const char*
          name: text
        }
      ]
      declaration: void SetMouseOverText(int widgetid, const char* text);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetMouseOverTextAdditional: {
      returnType: void
      parameters: [
        {
          type: const int
          name: widgetid
        }
        {
          type: const char*
          name: text
        }
      ]
      declaration: void SetMouseOverTextAdditional(const int widgetid, const char* text);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    SetMouseOverTextOption: {
      returnType: void
      parameters: [
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetMouseOverTextOption(bool value);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetMouseSteeringAdapative: {
      returnType: void
      parameters: [
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetMouseSteeringAdapative(bool value);
      file: menu_userquestion.lua
      detailed: ""
      notes: ""
    }
    SetMouseSteeringInvertedOption: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: paramname
        }
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetMouseSteeringInvertedOption(const char* paramname, bool value);
      file: menu_userquestion.lua
      detailed: ""
      notes: ""
    }
    SetMouseSteeringLine: {
      returnType: void
      parameters: [
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetMouseSteeringLine(bool value);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetMouseSteeringPersistent: {
      returnType: void
      parameters: [
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetMouseSteeringPersistent(bool value);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetMultipleGfxModes: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: aamode
        }
        {
          type: const char*
          name: upmode
        }
        {
          type: bool
          name: dlss
        }
        {
          type: const char*
          name: dlssmode
        }
      ]
      declaration: void SetMultipleGfxModes(const char* aamode, const char* upmode, bool dlss, const char* dlssmode);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetNotificationTypeEnabled: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: id
        }
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetNotificationTypeEnabled(const char* id, bool value);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    SetObjectCoverFaction: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: objectid
        }
        {
          type: const char*
          name: factionid
        }
      ]
      declaration: void SetObjectCoverFaction(UniverseID objectid, const char* factionid);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    SetObjectForcedRadarVisible: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: objectid
        }
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetObjectForcedRadarVisible(UniverseID objectid, bool value);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    SetObjectSectorPos: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: objectid
        }
        {
          type: UniverseID
          name: sectorid
        }
        {
          type: UIPosRot
          name: offset
        }
      ]
      declaration: void SetObjectSectorPos(UniverseID objectid, UniverseID sectorid, UIPosRot offset);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    SetOpenTrackSupportOption: {
      returnType: void
      parameters: [
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetOpenTrackSupportOption(bool value);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetOrderLoop: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: size_t
          name: orderidx
        }
        {
          type: bool
          name: checkonly
        }
      ]
      declaration: bool SetOrderLoop(UniverseID controllableid, size_t orderidx, bool checkonly);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetOrderSyncPointID: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: size_t
          name: orderidx
        }
        {
          type: uint32_t
          name: syncid
        }
        {
          type: bool
          name: checkonly
        }
      ]
      declaration: bool SetOrderSyncPointID(UniverseID controllableid, size_t orderidx, uint32_t syncid, bool checkonly);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetOutline: {
      returnType: void
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
        {
          type: const char*const
          name: connectionname
        }
        {
          type: const uint8_t
          name: red
        }
        {
          type: const uint8_t
          name: green
        }
        {
          type: const uint8_t
          name: blue
        }
        {
          type: const bool
          name: animated
        }
      ]
      declaration: void SetOutline(const UniverseID componentid, const char*const connectionname, const uint8_t red, const uint8_t green, const uint8_t blue, const bool animated);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    SetPaintModLocked: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: objectid
        }
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetPaintModLocked(UniverseID objectid, bool value);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    SetPlayerBlacklistDefault: {
      returnType: void
      parameters: [
        {
          type: BlacklistID
          name: id
        }
        {
          type: const char*
          name: listtype
        }
        {
          type: const char*
          name: defaultgroup
        }
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetPlayerBlacklistDefault(BlacklistID id, const char* listtype, const char* defaultgroup, bool value);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    SetPlayerCameraCinematicView: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
      ]
      declaration: void SetPlayerCameraCinematicView(UniverseID componentid);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    SetPlayerCameraCockpitView: {
      returnType: void
      parameters: [
        {
          type: bool
          name: force
        }
      ]
      declaration: void SetPlayerCameraCockpitView(bool force);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetPlayerCameraTargetView: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: targetid
        }
        {
          type: bool
          name: force
        }
      ]
      declaration: void SetPlayerCameraTargetView(UniverseID targetid, bool force);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetPlayerClothingTheme: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: theme
        }
      ]
      declaration: void SetPlayerClothingTheme(const char* theme);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    SetPlayerFactionName: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: name
        }
      ]
      declaration: void SetPlayerFactionName(const char* name);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    SetPlayerFightRuleDefault: {
      returnType: void
      parameters: [
        {
          type: FightRuleID
          name: id
        }
        {
          type: const char*
          name: listtype
        }
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetPlayerFightRuleDefault(FightRuleID id, const char* listtype, bool value);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    SetPlayerGlobalLoadoutLevel: {
      returnType: void
      parameters: [
        {
          type: float
          name: value
        }
      ]
      declaration: void SetPlayerGlobalLoadoutLevel(float value);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    SetPlayerIllegalWare: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: wareid
        }
        {
          type: bool
          name: illegal
        }
      ]
      declaration: void SetPlayerIllegalWare(const char* wareid, bool illegal);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    SetPlayerLogo: {
      returnType: void
      parameters: [
        {
          type: UILogo
          name: logo
        }
      ]
      declaration: void SetPlayerLogo(UILogo logo);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    SetPlayerPaintTheme: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: theme
        }
      ]
      declaration: void SetPlayerPaintTheme(const char* theme);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    SetPlayerShipsWaitForPlayer: {
      returnType: void
      parameters: [
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetPlayerShipsWaitForPlayer(bool value);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    SetPlayerTaxiWaitsForPlayer: {
      returnType: void
      parameters: [
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetPlayerTaxiWaitsForPlayer(bool value);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    SetPlayerTradeLoopCargoReservationSetting: {
      returnType: void
      parameters: [
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetPlayerTradeLoopCargoReservationSetting(bool value);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    SetPlayerTradeRuleDefault: {
      returnType: void
      parameters: [
        {
          type: TradeRuleID
          name: id
        }
        {
          type: const char*
          name: ruletype
        }
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetPlayerTradeRuleDefault(TradeRuleID id, const char* ruletype, bool value);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    SetPOMOption: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: quality
        }
      ]
      declaration: void SetPOMOption(const char* quality);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetPositionalOffset: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: positionalid
        }
        {
          type: UIPosRot
          name: offset
        }
      ]
      declaration: void SetPositionalOffset(UniverseID positionalid, UIPosRot offset);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    SetPresentModeOption: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: mode
        }
      ]
      declaration: void SetPresentModeOption(const char* mode);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetRadarMousePosition: {
      returnType: void
      parameters: [
        {
          type: float
          name: x
        }
        {
          type: float
          name: y
        }
      ]
      declaration: void SetRadarMousePosition(float x, float y);
      file: monitors.lua
      detailed: ""
      notes: ""
    }
    SetRadarRenderTarget2: {
      returnType: bool
      parameters: [
        {
          type: const char*const
          name: rendertargettexture
        }
        {
          type: const UniverseID
          name: referencecomponent
        }
        {
          type: const size_t
          name: mapmode
        }
      ]
      declaration: bool SetRadarRenderTarget2(const char*const rendertargettexture, const UniverseID referencecomponent, const size_t mapmode);
      file: monitors.lua
      detailed: ""
      notes: ""
    }
    SetRadarRenderTargetOnTarget2: {
      returnType: bool
      parameters: [
        {
          type: const char*const
          name: rendertargettexture
        }
        {
          type: const UniverseID
          name: focuscomponentid
        }
        {
          type: const UniverseID
          name: referencecomponent
        }
        {
          type: const size_t
          name: mapmode
        }
      ]
      declaration: bool SetRadarRenderTargetOnTarget2(const char*const rendertargettexture, const UniverseID focuscomponentid, const UniverseID referencecomponent, const size_t mapmode);
      file: monitors.lua
      detailed: ""
      notes: ""
    }
    SetReducedSpeedModeOption: {
      returnType: void
      parameters: [
        {
          type: double
          name: value
        }
      ]
      declaration: void SetReducedSpeedModeOption(double value);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetRegionDefinition: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: regionid
        }
        {
          type: const char*
          name: definition
        }
      ]
      declaration: void SetRegionDefinition(UniverseID regionid, const char* definition);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    SetRelationBoostToFaction: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
        {
          type: const char*
          name: factionid
        }
        {
          type: const char*
          name: reasonid
        }
        {
          type: float
          name: boostvalue
        }
        {
          type: float
          name: decayrate
        }
        {
          type: double
          name: decaydelay
        }
      ]
      declaration: void SetRelationBoostToFaction(UniverseID componentid, const char* factionid, const char* reasonid, float boostvalue, float decayrate, double decaydelay);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    SetSceneCameraActive: {
      returnType: void
      parameters: [
        {
          type: bool
          name: active
        }
      ]
      declaration: void SetSceneCameraActive(bool active);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetSelectedMapComponent: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: UniverseID
          name: componentid
        }
      ]
      declaration: void SetSelectedMapComponent(UniverseID holomapid, UniverseID componentid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetSelectedMapComponents: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: UniverseID*
          name: componentids
        }
        {
          type: uint32_t
          name: numcomponentids
        }
      ]
      declaration: void SetSelectedMapComponents(UniverseID holomapid, UniverseID* componentids, uint32_t numcomponentids);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetSelectedMapGroup: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: UniverseID
          name: destructibleid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: const char*
          name: path
        }
        {
          type: const char*
          name: group
        }
      ]
      declaration: void SetSelectedMapGroup(UniverseID holomapid, UniverseID destructibleid, const char* macroname, const char* path, const char* group);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    SetSelectedMapMacroSlot: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: UniverseID
          name: moduleid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: bool
          name: ismodule
        }
        {
          type: const char*
          name: upgradetypename
        }
        {
          type: size_t
          name: slot
        }
      ]
      declaration: void SetSelectedMapMacroSlot(UniverseID holomapid, UniverseID defensibleid, UniverseID moduleid, const char* macroname, bool ismodule, const char* upgradetypename, size_t slot);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    SetShieldHullBarGlowFactor: {
      returnType: void
      parameters: [
        {
          type: const int
          name: shieldhullbarid
        }
        {
          type: float
          name: factor
        }
      ]
      declaration: void SetShieldHullBarGlowFactor(const int shieldhullbarid, float factor);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetShieldHullBarHullPercent: {
      returnType: void
      parameters: [
        {
          type: const int
          name: shieldhullbarid
        }
        {
          type: float
          name: hullpercent
        }
      ]
      declaration: void SetShieldHullBarHullPercent(const int shieldhullbarid, float hullpercent);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetShieldHullBarShieldPercent: {
      returnType: void
      parameters: [
        {
          type: const int
          name: shieldhullbarid
        }
        {
          type: float
          name: shieldpercent
        }
      ]
      declaration: void SetShieldHullBarShieldPercent(const int shieldhullbarid, float shieldpercent);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetShipTradeLoopCargoReservationOverride: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: shipid
        }
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetShipTradeLoopCargoReservationOverride(UniverseID shipid, bool value);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetSignalLeakIndicatorOption: {
      returnType: void
      parameters: [
        {
          type: bool
          name: shown
        }
      ]
      declaration: void SetSignalLeakIndicatorOption(bool shown);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetSliderCellMaxFactor: {
      returnType: void
      parameters: [
        {
          type: const int
          name: slidercellid
        }
        {
          type: uint32_t
          name: maxfactor
        }
      ]
      declaration: void SetSliderCellMaxFactor(const int slidercellid, uint32_t maxfactor);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    SetSliderCellMaxSelectValue: {
      returnType: void
      parameters: [
        {
          type: const int
          name: slidercellid
        }
        {
          type: double
          name: value
        }
      ]
      declaration: void SetSliderCellMaxSelectValue(const int slidercellid, double value);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetSliderCellMaxValue: {
      returnType: void
      parameters: [
        {
          type: const int
          name: slidercellid
        }
        {
          type: double
          name: value
        }
      ]
      declaration: void SetSliderCellMaxValue(const int slidercellid, double value);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetSliderCellMinSelectValue: {
      returnType: void
      parameters: [
        {
          type: const int
          name: slidercellid
        }
        {
          type: double
          name: value
        }
      ]
      declaration: void SetSliderCellMinSelectValue(const int slidercellid, double value);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetSliderCellMinValue: {
      returnType: void
      parameters: [
        {
          type: const int
          name: slidercellid
        }
        {
          type: double
          name: value
        }
      ]
      declaration: void SetSliderCellMinValue(const int slidercellid, double value);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetSliderCellValue: {
      returnType: void
      parameters: [
        {
          type: const int
          name: slidercellid
        }
        {
          type: double
          name: value
        }
      ]
      declaration: void SetSliderCellValue(const int slidercellid, double value);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    SetSofttarget: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
        {
          type: const char*const
          name: connectionname
        }
      ]
      declaration: bool SetSofttarget(UniverseID componentid, const char*const connectionname);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetSpeakTargetNameOption: {
      returnType: void
      parameters: [
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetSpeakTargetNameOption(bool value);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetSSROption2: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: value
        }
      ]
      declaration: void SetSSROption2(const char* value);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetStardustIntensityOption: {
      returnType: void
      parameters: [
        {
          type: float
          name: value
        }
      ]
      declaration: void SetStardustIntensityOption(float value);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetStartmenuBackgroundOption: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: value
        }
      ]
      declaration: void SetStartmenuBackgroundOption(const char* value);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetStationOverviewGraphWare: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: stationid
        }
        {
          type: const char*
          name: wareid
        }
        {
          type: bool
          name: value
        }
      ]
      declaration: bool SetStationOverviewGraphWare(UniverseID stationid, const char* wareid, bool value);
      file: menu_station_overview.lua
      detailed: ""
      notes: ""
    }
    SetStatusBarCurrentValue: {
      returnType: void
      parameters: [
        {
          type: const int
          name: statusbarid
        }
        {
          type: float
          name: value
        }
      ]
      declaration: void SetStatusBarCurrentValue(const int statusbarid, float value);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetStatusBarMaxValue: {
      returnType: void
      parameters: [
        {
          type: const int
          name: statusbarid
        }
        {
          type: float
          name: value
        }
      ]
      declaration: void SetStatusBarMaxValue(const int statusbarid, float value);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetStatusBarStartValue: {
      returnType: void
      parameters: [
        {
          type: const int
          name: statusbarid
        }
        {
          type: float
          name: value
        }
      ]
      declaration: void SetStatusBarStartValue(const int statusbarid, float value);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetSubordinateGroupAssignment: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: int
          name: group
        }
        {
          type: const char*
          name: assignment
        }
      ]
      declaration: void SetSubordinateGroupAssignment(UniverseID controllableid, int group, const char* assignment);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetSubordinateGroupAttackOnSight: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: int
          name: group
        }
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetSubordinateGroupAttackOnSight(UniverseID controllableid, int group, bool value);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    SetSubordinateGroupDockAtCommander: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: int
          name: group
        }
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetSubordinateGroupDockAtCommander(UniverseID controllableid, int group, bool value);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    SetSubordinateGroupProtectedLocation: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: int
          name: group
        }
        {
          type: UniverseID
          name: sectorid
        }
        {
          type: UIPosRot
          name: offset
        }
      ]
      declaration: void SetSubordinateGroupProtectedLocation(UniverseID controllableid, int group, UniverseID sectorid, UIPosRot offset);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetSubordinateGroupReinforceFleet: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: int
          name: group
        }
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetSubordinateGroupReinforceFleet(UniverseID controllableid, int group, bool value);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    SetSubordinateGroupRespondToDistressCalls: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: int
          name: group
        }
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetSubordinateGroupRespondToDistressCalls(UniverseID controllableid, int group, bool value);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    SetSubordinateGroupResupplyAtFleet: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: int
          name: group
        }
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetSubordinateGroupResupplyAtFleet(UniverseID controllableid, int group, bool value);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    SetSupplyManual: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: const char*
          name: type
        }
        {
          type: bool
          name: onoff
        }
      ]
      declaration: void SetSupplyManual(UniverseID containerid, const char* type, bool onoff);
      file: menu_station_overview.lua
      detailed: ""
      notes: ""
    }
    SetSyncPointAutoRelease: {
      returnType: void
      parameters: [
        {
          type: uint32_t
          name: syncid
        }
        {
          type: bool
          name: all
        }
        {
          type: bool
          name: any
        }
      ]
      declaration: void SetSyncPointAutoRelease(uint32_t syncid, bool all, bool any);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetSyncPointAutoReleaseFromOrder: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: size_t
          name: orderidx
        }
        {
          type: bool
          name: all
        }
        {
          type: bool
          name: any
        }
      ]
      declaration: void SetSyncPointAutoReleaseFromOrder(UniverseID controllableid, size_t orderidx, bool all, bool any);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetTableNextConnectedTable: {
      returnType: void
      parameters: [
        {
          type: const int
          name: tableid
        }
        {
          type: const int
          name: nexttableid
        }
      ]
      declaration: void SetTableNextConnectedTable(const int tableid, const int nexttableid);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetTableNextHorizontalConnectedTable: {
      returnType: void
      parameters: [
        {
          type: const int
          name: tableid
        }
        {
          type: const int
          name: nexttableid
        }
      ]
      declaration: void SetTableNextHorizontalConnectedTable(const int tableid, const int nexttableid);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetTablePreviousConnectedTable: {
      returnType: void
      parameters: [
        {
          type: const int
          name: tableid
        }
        {
          type: const int
          name: prevtableid
        }
      ]
      declaration: void SetTablePreviousConnectedTable(const int tableid, const int prevtableid);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetTablePreviousHorizontalConnectedTable: {
      returnType: void
      parameters: [
        {
          type: const int
          name: tableid
        }
        {
          type: const int
          name: prevtableid
        }
      ]
      declaration: void SetTablePreviousHorizontalConnectedTable(const int tableid, const int prevtableid);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SetTextureQualityOption: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: mode
        }
      ]
      declaration: void SetTextureQualityOption(const char* mode);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetThirdPersonFlightOption: {
      returnType: void
      parameters: [
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetThirdPersonFlightOption(bool value);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetThrottleBidirectional: {
      returnType: void
      parameters: [
        {
          type: bool
          name: newsetting
        }
      ]
      declaration: void SetThrottleBidirectional(bool newsetting);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetTrackedMenuFullscreen: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: menu
        }
        {
          type: bool
          name: fullscreen
        }
      ]
      declaration: void SetTrackedMenuFullscreen(const char* menu, bool fullscreen);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetTurretGroupArmed: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: UniverseID
          name: contextid
        }
        {
          type: const char*
          name: path
        }
        {
          type: const char*
          name: group
        }
        {
          type: bool
          name: arm
        }
      ]
      declaration: void SetTurretGroupArmed(UniverseID defensibleid, UniverseID contextid, const char* path, const char* group, bool arm);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    SetTurretGroupMode2: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: UniverseID
          name: contextid
        }
        {
          type: const char*
          name: path
        }
        {
          type: const char*
          name: group
        }
        {
          type: const char*
          name: mode
        }
      ]
      declaration: void SetTurretGroupMode2(UniverseID defensibleid, UniverseID contextid, const char* path, const char* group, const char* mode);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    SetUICoverOverride: {
      returnType: void
      parameters: [
        {
          type: bool
          name: override
        }
      ]
      declaration: void SetUICoverOverride(bool override);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SetUIGlowIntensity: {
      returnType: void
      parameters: [
        {
          type: float
          name: value
        }
      ]
      declaration: void SetUIGlowIntensity(float value);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetUIGlowOption: {
      returnType: void
      parameters: [
        {
          type: uint32_t
          name: value
        }
      ]
      declaration: void SetUIGlowOption(uint32_t value);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetUIScaleFactor: {
      returnType: void
      parameters: [
        {
          type: const float
          name: scale
        }
      ]
      declaration: void SetUIScaleFactor(const float scale);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetupConstructionSequenceModulesCache: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: bool
          name: enable
        }
      ]
      declaration: void SetupConstructionSequenceModulesCache(UniverseID holomapid, UniverseID defensibleid, bool enable);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    SetUpscalingOption: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: mode
        }
      ]
      declaration: void SetUpscalingOption(const char* mode);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetUserData: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: name
        }
        {
          type: const char*
          name: value
        }
      ]
      declaration: void SetUserData(const char* name, const char* value);
      file: chatwindow.lua
      detailed: ""
      notes: ""
    }
    SetVelocityIndicatorOption: {
      returnType: void
      parameters: [
        {
          type: bool
          name: setting
        }
      ]
      declaration: void SetVelocityIndicatorOption(bool setting);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetVisitorNamesShownOption: {
      returnType: void
      parameters: [
        {
          type: bool
          name: setting
        }
      ]
      declaration: void SetVisitorNamesShownOption(bool setting);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetVolumetricFogOption: {
      returnType: void
      parameters: [
        {
          type: int32_t
          name: setting
        }
      ]
      declaration: void SetVolumetricFogOption(int32_t setting);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetVRVivePointerHand: {
      returnType: void
      parameters: [
        {
          type: int
          name: hand
        }
      ]
      declaration: void SetVRVivePointerHand(int hand);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    SetWeaponArmed: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: weaponid
        }
        {
          type: bool
          name: arm
        }
      ]
      declaration: void SetWeaponArmed(UniverseID weaponid, bool arm);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    SetWeaponGroup: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: UniverseID
          name: weaponid
        }
        {
          type: bool
          name: primary
        }
        {
          type: uint32_t
          name: groupidx
        }
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetWeaponGroup(UniverseID defensibleid, UniverseID weaponid, bool primary, uint32_t groupidx, bool value);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    SetWeaponMode: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: weaponid
        }
        {
          type: const char*
          name: mode
        }
      ]
      declaration: void SetWeaponMode(UniverseID weaponid, const char* mode);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    SetWidgetAssociatedElement: {
      returnType: void
      parameters: [
        {
          type: const int
          name: widgetid
        }
        {
          type: bool
          name: value
        }
      ]
      declaration: void SetWidgetAssociatedElement(const int widgetid, bool value);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    SetWidgetViewScheduled: {
      returnType: void
      parameters: [
        {
          type: bool
          name: scheduled
        }
      ]
      declaration: void SetWidgetViewScheduled(bool scheduled);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    ShouldContainerFillWorkforceCapacity: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
      ]
      declaration: bool ShouldContainerFillWorkforceCapacity(UniverseID containerid);
      file: menu_station_overview.lua
      detailed: ""
      notes: ""
    }
    ShouldEditBoxRestoreInteractiveObject: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: editboxid
        }
      ]
      declaration: bool ShouldEditBoxRestoreInteractiveObject(const int editboxid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    ShouldPlayerShipsWaitForPlayer: {
      returnType: bool
      parameters: []
      declaration: bool ShouldPlayerShipsWaitForPlayer(void);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    ShouldPlayerTaxiWaitForPlayer: {
      returnType: bool
      parameters: []
      declaration: bool ShouldPlayerTaxiWaitForPlayer(void);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    ShouldRenderTargetBeCleared: {
      returnType: bool
      parameters: [
        {
          type: const int
          name: rendertargetid
        }
      ]
      declaration: bool ShouldRenderTargetBeCleared(const int rendertargetid);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    ShouldShowMouseSteeringHelperLine: {
      returnType: bool
      parameters: []
      declaration: bool ShouldShowMouseSteeringHelperLine(void);
      file: crosshair handling.lua
      detailed: ""
      notes: ""
    }
    ShouldShowShieldBar: {
      returnType: bool
      parameters: [
        {
          type: const UniverseID
          name: destructibleid
        }
      ]
      declaration: bool ShouldShowShieldBar(const UniverseID destructibleid);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    ShouldSubordinateGroupAttackOnSight: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: int
          name: group
        }
      ]
      declaration: bool ShouldSubordinateGroupAttackOnSight(UniverseID controllableid, int group);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    ShouldSubordinateGroupDockAtCommander: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: int
          name: group
        }
      ]
      declaration: bool ShouldSubordinateGroupDockAtCommander(UniverseID controllableid, int group);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    ShouldSubordinateGroupReinforceFleet: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: int
          name: group
        }
      ]
      declaration: bool ShouldSubordinateGroupReinforceFleet(UniverseID controllableid, int group);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    ShouldSubordinateGroupRespondToDistressCalls: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: int
          name: group
        }
      ]
      declaration: bool ShouldSubordinateGroupRespondToDistressCalls(UniverseID controllableid, int group);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    ShouldSubordinateGroupResupplyAtFleet: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: int
          name: group
        }
      ]
      declaration: bool ShouldSubordinateGroupResupplyAtFleet(UniverseID controllableid, int group);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    ShowBuildPlotPlacementMap: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: UniverseID
          name: sectorid
        }
      ]
      declaration: void ShowBuildPlotPlacementMap(UniverseID holomapid, UniverseID sectorid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    ShowConstructionMap: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: UniverseID
          name: stationid
        }
        {
          type: const char*
          name: constructionplanid
        }
        {
          type: bool
          name: restore
        }
      ]
      declaration: void ShowConstructionMap(UniverseID holomapid, UniverseID stationid, const char* constructionplanid, bool restore);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    ShowEditorMap: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: UniverseID
          name: sectorid
        }
      ]
      declaration: void ShowEditorMap(UniverseID holomapid, UniverseID sectorid);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    ShowGamepadTextInput: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: description
        }
        {
          type: uint32_t
          name: maxchars
        }
        {
          type: const char*
          name: existingtext
        }
        {
          type: bool
          name: multilines
        }
        {
          type: bool
          name: password
        }
      ]
      declaration: bool ShowGamepadTextInput(const char* description, uint32_t maxchars, const char* existingtext, bool multilines, bool password);
      file: widget_fullscreen.lua
      detailed: ""
      notes: ""
    }
    ShowInfoLine: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: text
        }
        {
          type: uint32_t
          name: timeout
        }
      ]
      declaration: void ShowInfoLine(const char* text, uint32_t timeout);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    ShowInteractMenu: {
      returnType: void
      parameters: [
        {
          type: const UniverseID
          name: componentid
        }
        {
          type: const char*const
          name: connectionname
        }
        {
          type: const uint32_t
          name: id
        }
      ]
      declaration: void ShowInteractMenu(const UniverseID componentid, const char*const connectionname, const uint32_t id);
      file: targetsystem.lua
      detailed: ""
      notes: ""
    }
    ShowMultiverseMap: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
      ]
      declaration: void ShowMultiverseMap(UniverseID holomapid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    ShowObjectConfigurationMap2: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: UniverseID
          name: moduleid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: bool
          name: ismodule
        }
        {
          type: UILoadout
          name: uiloadout
        }
        {
          type: size_t
          name: cp_idx
        }
      ]
      declaration: void ShowObjectConfigurationMap2(UniverseID holomapid, UniverseID defensibleid, UniverseID moduleid, const char* macroname, bool ismodule, UILoadout uiloadout, size_t cp_idx);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    ShowPromo: {
      returnType: void
      parameters: []
      declaration: void ShowPromo(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    ShowUniverseMacroMap2: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: const char*
          name: startsectormacroname
        }
        {
          type: UIPosRot
          name: sectoroffset
        }
        {
          type: bool
          name: setoffset
        }
        {
          type: bool
          name: showzone
        }
        {
          type: const char*
          name: gamestartid
        }
      ]
      declaration: void ShowUniverseMacroMap2(UniverseID holomapid, const char* macroname, const char* startsectormacroname, UIPosRot sectoroffset, bool setoffset, bool showzone, const char* gamestartid);
      file: customgame.lua
      detailed: ""
      notes: ""
    }
    ShowUniverseMap2: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: bool
          name: setoffset
        }
        {
          type: bool
          name: showzone
        }
        {
          type: bool
          name: forcebuildershipicons
        }
        {
          type: UniverseID
          name: startsectorid
        }
        {
          type: UIPosRot
          name: startpos
        }
      ]
      declaration: void ShowUniverseMap2(UniverseID holomapid, bool setoffset, bool showzone, bool forcebuildershipicons, UniverseID startsectorid, UIPosRot startpos);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    ShuffleMapConstructionPlan2: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: bool
          name: checkonly
        }
        {
          type: const char*
          name: raceid
        }
      ]
      declaration: bool ShuffleMapConstructionPlan2(UniverseID holomapid, bool checkonly, const char* raceid);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    SignalObjectWithNPCSeed: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: objecttosignalid
        }
        {
          type: const char*
          name: param
        }
        {
          type: NPCSeed
          name: person
        }
        {
          type: UniverseID
          name: controllableid
        }
      ]
      declaration: void SignalObjectWithNPCSeed(UniverseID objecttosignalid, const char* param, NPCSeed person, UniverseID controllableid);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    SignalObjectWithNPCSeedAndMissionID: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: objecttosignalid
        }
        {
          type: const char*
          name: param
        }
        {
          type: MissionID
          name: missionid
        }
        {
          type: NPCSeed
          name: person
        }
        {
          type: UniverseID
          name: controllableid
        }
      ]
      declaration: void SignalObjectWithNPCSeedAndMissionID(UniverseID objecttosignalid, const char* param, MissionID missionid, NPCSeed person, UniverseID controllableid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    SkipNextStartAnimation: {
      returnType: void
      parameters: []
      declaration: void SkipNextStartAnimation(void);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    SpawnLocalHighwayAtPos: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: macroname
        }
        {
          type: UniverseID
          name: sectorid
        }
        {
          type: UIPosRot
          name: offset
        }
      ]
      declaration: void SpawnLocalHighwayAtPos(const char* macroname, UniverseID sectorid, UIPosRot offset);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    SpawnObjectAtPos: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: macroname
        }
        {
          type: UniverseID
          name: sectorid
        }
        {
          type: UIPosRot
          name: offset
        }
      ]
      declaration: void SpawnObjectAtPos(const char* macroname, UniverseID sectorid, UIPosRot offset);
      file: menu_interactmenu.lua
      detailed: ""
      notes: ""
    }
    SpawnObjectAtPos2: {
      returnType: UniverseID
      parameters: [
        {
          type: const char*
          name: macroname
        }
        {
          type: UniverseID
          name: sectorid
        }
        {
          type: UIPosRot
          name: offset
        }
        {
          type: const char*
          name: ownerid
        }
      ]
      declaration: UniverseID SpawnObjectAtPos2(const char* macroname, UniverseID sectorid, UIPosRot offset, const char* ownerid);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    SpawnRegionAtPos: {
      returnType: UniverseID
      parameters: [
        {
          type: const char*
          name: regiondefinition
        }
        {
          type: UniverseID
          name: sectorid
        }
        {
          type: UIPosRot
          name: offset
        }
      ]
      declaration: UniverseID SpawnRegionAtPos(const char* regiondefinition, UniverseID sectorid, UIPosRot offset);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    SpawnStationAtPos: {
      returnType: UniverseID
      parameters: [
        {
          type: const char*
          name: macroname
        }
        {
          type: UniverseID
          name: sectorid
        }
        {
          type: UIPosRot
          name: offset
        }
        {
          type: const char*
          name: constructionplanid
        }
        {
          type: const char*
          name: ownerid
        }
      ]
      declaration: UniverseID SpawnStationAtPos(const char* macroname, UniverseID sectorid, UIPosRot offset, const char* constructionplanid, const char* ownerid);
      file: menu_mapeditor.lua
      detailed: ""
      notes: ""
    }
    StartBoardingOperation: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: defensibletargetid
        }
        {
          type: const char*
          name: boarderfactionid
        }
      ]
      declaration: bool StartBoardingOperation(UniverseID defensibletargetid, const char* boarderfactionid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    StartBriefing: {
      returnType: void
      parameters: [
        {
          type: MissionID
          name: missionid
        }
        {
          type: const char*
          name: texturename
        }
        {
          type: bool
          name: issubmission
        }
      ]
      declaration: void StartBriefing(MissionID missionid, const char* texturename, bool issubmission);
      file: menu_missionbriefing.lua
      detailed: ""
      notes: ""
    }
    StartControlPanelHack: {
      returnType: void
      parameters: [
        {
          type: UIComponentSlot
          name: target
        }
        {
          type: const char*
          name: paneltypeid
        }
      ]
      declaration: void StartControlPanelHack(UIComponentSlot target, const char* paneltypeid);
      file: menu_userquestion.lua
      detailed: ""
      notes: ""
    }
    StartIntroAnimation: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: triggername
        }
      ]
      declaration: void StartIntroAnimation(const char* triggername);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    StartMapBoxSelect: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: bool
          name: selectenemies
        }
      ]
      declaration: void StartMapBoxSelect(UniverseID holomapid, bool selectenemies);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    StartPanMap: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
      ]
      declaration: void StartPanMap(UniverseID holomapid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    StartPlayerActivity: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: activityid
        }
      ]
      declaration: void StartPlayerActivity(const char* activityid);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    StartResearch: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: wareid
        }
        {
          type: UniverseID
          name: researchmoduleid
        }
      ]
      declaration: void StartResearch(const char* wareid, UniverseID researchmoduleid);
      file: menu_research.lua
      detailed: ""
      notes: ""
    }
    StartRotateMap: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
      ]
      declaration: void StartRotateMap(UniverseID holomapid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    StartStartMenuBGMusic: {
      returnType: void
      parameters: []
      declaration: void StartStartMenuBGMusic(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    StartTerraformingProject: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: clusterid
        }
        {
          type: const char*
          name: projectid
        }
      ]
      declaration: void StartTerraformingProject(UniverseID clusterid, const char* projectid);
      file: menu_terraforming.lua
      detailed: ""
      notes: ""
    }
    StartVoiceSequence2: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: sequenceid
        }
        {
          type: UniverseID
          name: entityid
        }
        {
          type: const char*
          name: gamestartid
        }
      ]
      declaration: void StartVoiceSequence2(const char* sequenceid, UniverseID entityid, const char* gamestartid);
      file: menu_timeline.lua
      detailed: ""
      notes: ""
    }
    StopBriefing: {
      returnType: void
      parameters: [
        {
          type: MissionID
          name: missionid
        }
        {
          type: bool
          name: issubmission
        }
      ]
      declaration: void StopBriefing(MissionID missionid, bool issubmission);
      file: menu_missionbriefing.lua
      detailed: ""
      notes: ""
    }
    StopDetailmonitorCutscene: {
      returnType: void
      parameters: [
        {
          type: uint32_t
          name: cutsceneid
        }
      ]
      declaration: void StopDetailmonitorCutscene(uint32_t cutsceneid);
      file: movie.lua
      detailed: ""
      notes: ""
    }
    StopMapBoxSelect: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
      ]
      declaration: void StopMapBoxSelect(UniverseID holomapid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    StopPanMap: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
      ]
      declaration: bool StopPanMap(UniverseID holomapid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    StopPlayerActivity: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: activityid
        }
      ]
      declaration: void StopPlayerActivity(const char* activityid);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    StopRotateMap: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
      ]
      declaration: bool StopRotateMap(UniverseID holomapid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    StopStartMenuBGMusic: {
      returnType: void
      parameters: []
      declaration: void StopStartMenuBGMusic(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    StopVoiceSequence: {
      returnType: void
      parameters: []
      declaration: void StopVoiceSequence(void);
      file: menu_timeline.lua
      detailed: ""
      notes: ""
    }
    StoreConstructionMapState: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
      ]
      declaration: void StoreConstructionMapState(UniverseID holomapid);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    TakeShipFromInternalStorage: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: shipid
        }
        {
          type: bool
          name: highpriority
        }
        {
          type: bool
          name: checkonly
        }
      ]
      declaration: bool TakeShipFromInternalStorage(UniverseID shipid, bool highpriority, bool checkonly);
      file: menu_platformundock.lua
      detailed: ""
      notes: ""
    }
    TeleportPlayerTo: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: controllableid
        }
        {
          type: bool
          name: allowcontrolling
        }
        {
          type: bool
          name: instant
        }
        {
          type: bool
          name: force
        }
      ]
      declaration: bool TeleportPlayerTo(UniverseID controllableid, bool allowcontrolling, bool instant, bool force);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    ToggleAutoPilot: {
      returnType: bool
      parameters: [
        {
          type: bool
          name: checkonly
        }
      ]
      declaration: bool ToggleAutoPilot(bool checkonly);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    ToggleDrones: {
      returnType: void
      parameters: [
        {
          type: uint32_t
          name: dronetype
        }
      ]
      declaration: void ToggleDrones(uint32_t dronetype);
      file: crosshair handling.lua
      detailed: ""
      notes: ""
    }
    ToggleFlightAssist: {
      returnType: void
      parameters: []
      declaration: void ToggleFlightAssist();
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    ToggleScreenDisplayOption: {
      returnType: void
      parameters: []
      declaration: void ToggleScreenDisplayOption(void);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    TrackMenu: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: menu
        }
        {
          type: bool
          name: fullscreen
        }
      ]
      declaration: void TrackMenu(const char* menu, bool fullscreen);
      file: helper.lua
      detailed: ""
      notes: ""
    }
    TransportPlayerToTarget: {
      returnType: void
      parameters: [
        {
          type: UIComponentSlot
          name: target
        }
      ]
      declaration: void TransportPlayerToTarget(UIComponentSlot target);
      file: menu_transporter.lua
      detailed: ""
      notes: ""
    }
    TriggerAutosave: {
      returnType: void
      parameters: [
        {
          type: bool
          name: checkenabled
        }
      ]
      declaration: void TriggerAutosave(bool checkenabled);
      file: menu_userquestion.lua
      detailed: ""
      notes: ""
    }
    TriggerCompSlotAnimation: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: componentid
        }
        {
          type: const char*
          name: connectionname
        }
        {
          type: const char*
          name: triggername
        }
      ]
      declaration: bool TriggerCompSlotAnimation(UniverseID componentid, const char* connectionname, const char* triggername);
      file: menu_trader_inventory.lua
      detailed: ""
      notes: ""
    }
    TriggerInputFeedback: {
      returnType: void
      parameters: [
        {
          type: const char*
          name: type
        }
        {
          type: const char*
          name: idname
        }
        {
          type: const char*
          name: triggerid
        }
        {
          type: const char*
          name: contextid
        }
      ]
      declaration: void TriggerInputFeedback(const char* type, const char* idname, const char* triggerid, const char* contextid);
      file: chatwindow.lua
      detailed: ""
      notes: ""
    }
    UndockPlayerShip: {
      returnType: const char*
      parameters: [
        {
          type: bool
          name: checkonly
        }
      ]
      declaration: const char* UndockPlayerShip(bool checkonly);
      file: menu_docked.lua
      detailed: ""
      notes: ""
    }
    UndoConstructionMapChange: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
      ]
      declaration: void UndoConstructionMapChange(UniverseID holomapid);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    UnmapModifierButton: {
      returnType: bool
      parameters: [
        {
          type: const char*
          name: uimodifier
        }
        {
          type: int32_t
          name: source
        }
        {
          type: int32_t
          name: code
        }
        {
          type: bool
          name: checkonly
        }
      ]
      declaration: bool UnmapModifierButton(const char* uimodifier, int32_t source, int32_t code, bool checkonly);
      file: gameoptions.lua
      detailed: ""
      notes: ""
    }
    UnmutePlayerAlert: {
      returnType: void
      parameters: [
        {
          type: size_t
          name: index
        }
        {
          type: bool
          name: silent
        }
      ]
      declaration: void UnmutePlayerAlert(size_t index, bool silent);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    UnsetRadarRenderTarget: {
      returnType: void
      parameters: []
      declaration: void UnsetRadarRenderTarget();
      file: monitors.lua
      detailed: ""
      notes: ""
    }
    UpdateAttackerOfBoardingOperation: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: defensibletargetid
        }
        {
          type: UniverseID
          name: defensibleboarderid
        }
        {
          type: const char*
          name: boarderfactionid
        }
        {
          type: const char*
          name: actionid
        }
        {
          type: uint32_t*
          name: marinetieramounts
        }
        {
          type: int32_t*
          name: marinetierskilllevels
        }
        {
          type: uint32_t
          name: nummarinetiers
        }
      ]
      declaration: bool UpdateAttackerOfBoardingOperation(UniverseID defensibletargetid, UniverseID defensibleboarderid, const char* boarderfactionid, const char* actionid, uint32_t* marinetieramounts, int32_t* marinetierskilllevels, uint32_t nummarinetiers);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    UpdateBlacklist2: {
      returnType: void
      parameters: [
        {
          type: BlacklistInfo2
          name: info
        }
      ]
      declaration: void UpdateBlacklist2(BlacklistInfo2 info);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    UpdateBoardingOperation: {
      returnType: bool
      parameters: [
        {
          type: UniverseID
          name: defensibletargetid
        }
        {
          type: const char*
          name: boarderfactionid
        }
        {
          type: uint32_t
          name: approachthreshold
        }
        {
          type: uint32_t
          name: insertionthreshold
        }
      ]
      declaration: bool UpdateBoardingOperation(UniverseID defensibletargetid, const char* boarderfactionid, uint32_t approachthreshold, uint32_t insertionthreshold);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    UpdateConstructionMapItemLoadout: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: size_t
          name: itemidx
        }
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: UILoadout
          name: uiloadout
        }
      ]
      declaration: void UpdateConstructionMapItemLoadout(UniverseID holomapid, size_t itemidx, UniverseID defensibleid, UILoadout uiloadout);
      file: menu_station_configuration.lua
      detailed: ""
      notes: ""
    }
    UpdateFightRule: {
      returnType: void
      parameters: [
        {
          type: FightRuleInfo
          name: info
        }
      ]
      declaration: void UpdateFightRule(FightRuleInfo info);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    UpdateMapBuildPlot: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
      ]
      declaration: void UpdateMapBuildPlot(UniverseID holomapid);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    UpdateObjectConfigurationMap: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: UniverseID
          name: defensibleid
        }
        {
          type: UniverseID
          name: moduleid
        }
        {
          type: const char*
          name: macroname
        }
        {
          type: bool
          name: ismodule
        }
        {
          type: UILoadout
          name: uiloadout
        }
      ]
      declaration: void UpdateObjectConfigurationMap(UniverseID holomapid, UniverseID defensibleid, UniverseID moduleid, const char* macroname, bool ismodule, UILoadout uiloadout);
      file: menu_ship_configuration.lua
      detailed: ""
      notes: ""
    }
    UpdatePlayerAlert2: {
      returnType: void
      parameters: [
        {
          type: PlayerAlertInfo2
          name: uialert
        }
      ]
      declaration: void UpdatePlayerAlert2(PlayerAlertInfo2 uialert);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    UpdateProduction: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: containerormoduleid
        }
        {
          type: bool
          name: force
        }
      ]
      declaration: void UpdateProduction(UniverseID containerormoduleid, bool force);
      file: menu_research.lua
      detailed: ""
      notes: ""
    }
    UpdateProductionTradeOffers: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
      ]
      declaration: void UpdateProductionTradeOffers(UniverseID containerid);
      file: menu_station_overview.lua
      detailed: ""
      notes: ""
    }
    UpdateSupplyOverrides: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: containerid
        }
        {
          type: SupplyOverride*
          name: overrides
        }
        {
          type: uint32_t
          name: numoverrides
        }
      ]
      declaration: void UpdateSupplyOverrides(UniverseID containerid, SupplyOverride* overrides, uint32_t numoverrides);
      file: menu_station_overview.lua
      detailed: ""
      notes: ""
    }
    UpdateTradeRule: {
      returnType: void
      parameters: [
        {
          type: TradeRuleInfo
          name: info
        }
      ]
      declaration: void UpdateTradeRule(TradeRuleInfo info);
      file: menu_playerinfo.lua
      detailed: ""
      notes: ""
    }
    WasSessionOnline: {
      returnType: bool
      parameters: []
      declaration: bool WasSessionOnline(void);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
    ZoomMap: {
      returnType: void
      parameters: [
        {
          type: UniverseID
          name: holomapid
        }
        {
          type: float
          name: zoomstep
        }
      ]
      declaration: void ZoomMap(UniverseID holomapid, float zoomstep);
      file: menu_map.lua
      detailed: ""
      notes: ""
    }
  }
  types: {
    AddBuildTask6Container: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		BlacklistTypeID* blacklists;
        		uint32_t numblacklists;
        		FightRuleTypeID* fightrules;
        		uint32_t numfightrules;
        		const char* paintmodwareid;
        	} AddBuildTask6Container;
        '''
      file: menu_ship_configuration.lua
    }
    AIOrderID: {
      kind: uint64_t
      declaration: '''	typedef uint64_t AIOrderID;'''
      file: menu_map.lua
    }
    AmmoData: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* macro;
        		const char* ware;
        		uint32_t amount;
        		uint32_t capacity;
        	} AmmoData;
        '''
      file: menu_docked.lua
    }
    ArrowDetails: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		float angle;
        		bool inside;
        		bool valid;
        	} ArrowDetails;
        '''
      file: crosshair handling.lua
    }
    AutosaveIntervalInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		uint32_t mintime;
        		uint32_t maxtime;
        		float factor;
        	} AutosaveIntervalInfo;
        '''
      file: gameoptions.lua
    }
    BlacklistCounts: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		uint32_t nummacros;
        		uint32_t numfactions;
        	} BlacklistCounts;
        '''
      file: helper.lua
    }
    BlacklistID: {
      kind: int32_t
      declaration: '''	typedef int32_t BlacklistID;'''
      file: menu_map.lua
    }
    BlacklistInfo2: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		uint32_t id;
        		const char* type;
        		const char* name;
        		bool usemacrowhitelist;
        		uint32_t nummacros;
        		const char** macros;
        		bool usefactionwhitelist;
        		uint32_t numfactions;
        		const char** factions;
        		const char* relation;
        		bool hazardous;
        	} BlacklistInfo2;
        '''
      file: menu_playerinfo.lua
    }
    BlacklistTypeID: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		BlacklistID id;
        		const char* type;
        	} BlacklistTypeID;
        '''
      file: menu_ship_configuration.lua
    }
    BoardingBehaviour: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* id;
        		const char* text;
        	} BoardingBehaviour;
        '''
      file: menu_map.lua
    }
    BoardingPhase: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* id;
        		const char* text;
        	} BoardingPhase;
        '''
      file: menu_map.lua
    }
    BoardingRiskThresholds: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		uint32_t approach;
        		uint32_t insertion;
        	} BoardingRiskThresholds;
        '''
      file: menu_map.lua
    }
    BuildTaskID: {
      kind: uint64_t
      declaration: '''	typedef uint64_t BuildTaskID;'''
      file: menu_docked.lua
    }
    BuildTaskInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		BuildTaskID id;
        		UniverseID buildingcontainer;
        		UniverseID component;
        		const char* macro;
        		const char* factionid;
        		UniverseID buildercomponent;
        		int64_t price;
        		bool ismissingresources;
        		uint32_t queueposition;
        	} BuildTaskInfo;
        '''
      file: menu_docked.lua
    }
    Color: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		uint32_t red;
        		uint32_t green;
        		uint32_t blue;
        		uint32_t alpha;
        	} Color;
        '''
      file: menu_terraforming.lua
    }
    ColorMapEntry: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* id;
        		Color color;
        		float glowfactor;
        	} ColorMapEntry;
        '''
      file: compass.lua
    }
    CommanderInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		UniverseID controllableid;
        		FleetUnitID fleetunitid;
        		int32_t groupindex;
        	} CommanderInfo;
        '''
      file: menu_map.lua
    }
    CompassMenuEntry: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* type;
        		const char* control;
        		uint32_t controlid;
        		uint32_t contextid;
        		bool active;
        	} CompassMenuEntry;
        '''
      file: compass.lua
    }
    ComponentDetails: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* name;
        		float hull;
        		float shield;
        		int speed;
        		bool hasShield;
        	} ComponentDetails;
        '''
      file: targetmonitor.lua
    }
    ControlPanelInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* type;
        		const char* name;
        		const char* desc;
        		const char* hackeddesc;
        		int64_t price;
        		int32_t numrequiredwares;
        		bool ishack;
        		bool hacked;
        		double hackduration;
        		double hackexpiretime;
        	} ControlPanelInfo;
        '''
      file: targetmonitor.lua
    }
    ControlPostInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* id;
        		const char* name;
        	} ControlPostInfo;
        '''
      file: menu_map.lua
    }
    Coord2D: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		int x;
        		int y;
        	} Coord2D;
        '''
      file: menu_map.lua
    }
    Coord3D: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		float x;
        		float y;
        		float z;
        	} Coord3D;
        '''
      file: menu_followcamera.lua
    }
    CrewTransferContainer: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* newroleid;
        		NPCSeed seed;
        		uint32_t amount;
        	} CrewTransferContainer;
        '''
      file: menu_map.lua
    }
    CrewTransferContainer2: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* newroleid;
        		NPCSeed seed;
        		uint32_t amount;
        		int64_t price;
        	} CrewTransferContainer2;
        '''
      file: menu_ship_configuration.lua
    }
    CrewTransferInfo2: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		CrewTransferContainer2* removed;
        		uint32_t numremoved;
        		CrewTransferContainer2* added;
        		uint32_t numadded;
        		CrewTransferContainer2* transferred;
        		uint32_t numtransferred;
        	} CrewTransferInfo2;
        '''
      file: menu_ship_configuration.lua
    }
    CrewTransferInfoCounts: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		uint32_t numremoved;
        		uint32_t numadded;
        		uint32_t numtransferred;
        	} CrewTransferInfoCounts;
        '''
      file: menu_ship_configuration.lua
    }
    CrosshairMessage: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		uint32_t messageID;
        		bool obstructed;
        	} CrosshairMessage;
        '''
      file: targetsystem.lua
    }
    CursorInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		uint32_t width;
        		uint32_t height;
        		uint32_t xHotspot;
        		uint32_t yHotspot;
        	} CursorInfo;
        '''
      file: dialogmenu.lua
    }
    CustomGameStartBlueprint: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* ware;
        	} CustomGameStartBlueprint;
        '''
      file: customgame.lua
    }
    CustomGameStartBlueprintPropertyState: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* state;
        		uint32_t numvalues;
        		uint32_t numdefaultvalues;
        	} CustomGameStartBlueprintPropertyState;
        '''
      file: customgame.lua
    }
    CustomGameStartBoolPropertyState: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* state;
        		bool defaultvalue;
        	} CustomGameStartBoolPropertyState;
        '''
      file: customgame.lua
    }
    CustomGameStartBudgetDetail: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* id;
        		int64_t value;
        	} CustomGameStartBudgetDetail;
        '''
      file: customgame.lua
    }
    CustomGameStartBudgetGroupInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* id;
        		const char* name;
        		const char* description;
        		bool isresearch;
        	} CustomGameStartBudgetGroupInfo;
        '''
      file: customgame.lua
    }
    CustomGameStartBudgetInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* id;
        		int64_t value;
        		int64_t limit;
        		uint32_t numdetails;
        	} CustomGameStartBudgetInfo;
        '''
      file: customgame.lua
    }
    CustomGameStartContentCounts: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		uint32_t nummacros;
        		uint32_t numblueprints;
        		uint32_t numconstructionplans;
        		bool hasincompatibleloadout;
        	} CustomGameStartContentCounts;
        '''
      file: customgame.lua
    }
    CustomGameStartContentData2: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		UIMacroCount* macros;
        		uint32_t nummacros;
        		const char** blueprints;
        		uint32_t numblueprints;
        		const char** constructionplanids;
        		uint32_t numconstructionplans;
        	} CustomGameStartContentData2;
        '''
      file: customgame.lua
    }
    CustomGameStartEncyclopediaEntry: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* library;
        		const char* item;
        	} CustomGameStartEncyclopediaEntry;
        '''
      file: customgame.lua
    }
    CustomGameStartEncyclopediaPropertyState: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* state;
        	} CustomGameStartEncyclopediaPropertyState;
        '''
      file: customgame.lua
    }
    CustomGameStartFloatPropertyState: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* state;
        		float defaultvalue;
        	} CustomGameStartFloatPropertyState;
        '''
      file: menu_ship_configuration.lua
    }
    CustomGameStartInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* id;
        		const char* name;
        		const char* filename;
        	} CustomGameStartInfo;
        '''
      file: customgame.lua
    }
    CustomGameStartInventory: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* ware;
        		int32_t amount;
        	} CustomGameStartInventory;
        '''
      file: customgame.lua
    }
    CustomGameStartInventoryPropertyState: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* state;
        		uint32_t numvalues;
        		uint32_t numdefaultvalues;
        	} CustomGameStartInventoryPropertyState;
        '''
      file: customgame.lua
    }
    CustomGameStartKnownEntry2: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* type;
        		const char* item;
        		const char* classid;
        		int64_t budgetvalue;
        		bool unlocked;
        		bool hidden;
        	} CustomGameStartKnownEntry2;
        '''
      file: customgame.lua
    }
    CustomGameStartKnownPropertyState: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* state;
        		uint32_t numvalues;
        		uint32_t numdefaultvalues;
        	} CustomGameStartKnownPropertyState;
        '''
      file: customgame.lua
    }
    CustomGameStartLoadoutPropertyState: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* state;
        	} CustomGameStartLoadoutPropertyState;
        '''
      file: menu_ship_configuration.lua
    }
    CustomGameStartMoneyPropertyState: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* state;
        		int64_t defaultvalue;
        		int64_t minvalue;
        		int64_t maxvalue;
        	} CustomGameStartMoneyPropertyState;
        '''
      file: customgame.lua
    }
    CustomGameStartPersonEntry: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* race;
        		const char* tags;
        		uint32_t numskills;
        		SkillInfo* skills;
        	} CustomGameStartPersonEntry;
        '''
      file: menu_ship_configuration.lua
    }
    CustomGameStartPlayerProperty3: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* type;
        		const char* id;
        		const char* sector;
        		UIPosRot offset;
        		const char* dockedatid;
        		const char* commanderid;
        		const char* macroname;
        		const char* name;
        		const char* constructionplanid;
        		const char* paintmod;
        		const char* peopledefid;
        		float peoplefillpercentage;
        		uint32_t numcargo;
        		UIWareInfo* cargo;
        		uint32_t count;
        	} CustomGameStartPlayerProperty3;
        '''
      file: customgame.lua
    }
    CustomGameStartPlayerPropertyCounts: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		uint32_t numcargo;
        	} CustomGameStartPlayerPropertyCounts;
        '''
      file: customgame.lua
    }
    CustomGameStartPlayerPropertyPropertyState: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* state;
        		uint32_t numvalues;
        	} CustomGameStartPlayerPropertyPropertyState;
        '''
      file: customgame.lua
    }
    CustomGameStartPosRotPropertyState: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* state;
        		UIPosRot defaultvalue;
        	} CustomGameStartPosRotPropertyState;
        '''
      file: customgame.lua
    }
    CustomGameStartRelationInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* factionid;
        		const char* otherfactionid;
        		int32_t relation;
        	} CustomGameStartRelationInfo;
        '''
      file: customgame.lua
    }
    CustomGameStartRelationsPropertyState: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* state;
        	} CustomGameStartRelationsPropertyState;
        '''
      file: customgame.lua
    }
    CustomGameStartResearchPropertyState: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* state;
        	} CustomGameStartResearchPropertyState;
        '''
      file: customgame.lua
    }
    CustomGameStartStoryInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* id;
        		const char* name;
        		const char* description;
        		const char* groupid;
        		const char* wareid;
        		int32_t index;
        		int64_t budgetvalue;
        		uint32_t numdependencylists;
        	} CustomGameStartStoryInfo;
        '''
      file: customgame.lua
    }
    CustomGameStartStoryState: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* state;
        		uint32_t numvalues;
        		uint32_t numdefaultvalues;
        	} CustomGameStartStoryState;
        '''
      file: customgame.lua
    }
    CustomGameStartStringPropertyState: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* state;
        		const char* defaultvalue;
        		const char* options;
        	} CustomGameStartStringPropertyState;
        '''
      file: menu_ship_configuration.lua
    }
    DiplomacyActionInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* id;
        		const char* name;
        		const char* desc;
        		const char* shortdesc;
        		const char* iconid;
        		const char* agentname;
        		const char* targetname;
        	} DiplomacyActionInfo;
        '''
      file: menu_diplomacy.lua
    }
    DPSData: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		float dps;
        		uint32_t quadranttextid;
        	} DPSData;
        '''
      file: menu_map.lua
    }
    DroneModeInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* id;
        		const char* name;
        		bool possible;
        	} DroneModeInfo;
        '''
      file: menu_docked.lua
    }
    DroneState: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		bool armed;
        		bool blocked;
        		const char* modeIcon;
        		bool pending;
        		bool possible;
        		uint32_t total;
        		uint32_t undocked;
        	} DroneState;
        '''
      file: crosshair handling.lua
    }
    DropDownIconInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		Color color;
        		uint32_t width;
        		uint32_t height;
        		uint32_t x;
        		uint32_t y;
        		float glowfactor;
        	} DropDownIconInfo;
        '''
      file: widget_fullscreen.lua
    }
    DropDownOption2: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* id;
        		const char* iconid;
        		const char* text;
        		const char* text2;
        		const char* mouseovertext;
        		const char* font;
        		Color overrideColor;
        		bool displayRemoveOption;
        		bool active;
        		bool hasOverrideColor;
        	} DropDownOption2;
        '''
      file: widget_fullscreen.lua
    }
    DropDownTextInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		Color color;
        		Font font;
        		const char* alignment;
        		uint32_t x;
        		uint32_t y;
        		const char* textOverride;
        		float glowfactor;
        	} DropDownTextInfo;
        '''
      file: widget_fullscreen.lua
    }
    EditableColorMapEntry: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* id;
        		const char* referenceid;
        		Color color;
        		float glowfactor;
        		bool ispersonal;
        		bool isdeletable;
        	} EditableColorMapEntry;
        '''
      file: gameoptions.lua
    }
    EquipmentCompatibilityInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* tag;
        		const char* name;
        	} EquipmentCompatibilityInfo;
        '''
      file: menu_ship_configuration.lua
    }
    EquipmentModInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* PropertyType;
        		float MinValueFloat;
        		float MaxValueFloat;
        		uint32_t MinValueUINT;
        		uint32_t MaxValueUINT;
        		uint32_t BonusMax;
        		float BonusChance;
        	} EquipmentModInfo;
        '''
      file: menu_ship_configuration.lua
    }
    EquipmentModPropertyInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* id;
        		const char* name;
        		const char* description;
        		const char* propdatatype;
        		float basevalue;
        		bool poseffect;
        	} EquipmentModPropertyInfo;
        '''
      file: helper.lua
    }
    EquipmentWareInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* type;
        		const char* ware;
        		const char* macro;
        		int amount;
        	} EquipmentWareInfo;
        '''
      file: menu_ship_configuration.lua
    }
    FactionDetails: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* factionID;
        		const char* factionName;
        		const char* factionIcon;
        	} FactionDetails;
        '''
      file: menu_map.lua
    }
    FightRuleCounts: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		uint32_t numfactions;
        	} FightRuleCounts;
        '''
      file: helper.lua
    }
    FightRuleID: {
      kind: int32_t
      declaration: '''	typedef int32_t FightRuleID;'''
      file: menu_map.lua
    }
    FightRuleInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		FightRuleID id;
        		const char* name;
        		uint32_t numfactions;
        		UIFightRuleSetting* factions;
        	} FightRuleInfo;
        '''
      file: menu_playerinfo.lua
    }
    FightRuleTypeID: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		FightRuleID id;
        		const char* type;
        	} FightRuleTypeID;
        '''
      file: menu_ship_configuration.lua
    }
    FleetUnitID: {
      kind: uint64_t
      declaration: '''	typedef uint64_t FleetUnitID;'''
      file: menu_map.lua
    }
    FleetUnitInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		FleetUnitID fleetunitid;
        		const char* name;
        		const char* idcode;
        		const char* macro;
        		BuildTaskID buildtaskid;
        		UniverseID replacementid;
        	} FleetUnitInfo;
        '''
      file: menu_map.lua
    }
    FloatRange: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		float min;
        		float max;
        	} FloatRange;
        '''
      file: gameoptions.lua
    }
    Font: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* name;
        		uint32_t size;
        	} Font;
        '''
      file: widget_fullscreen.lua
    }
    FPSDetails: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		double fps;
        		double moveTime;
        		double renderTime;
        		double gpuTime;
        	} FPSDetails;
        '''
      file: debuglog.lua
    }
    GameStartDateInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		int32_t year;
        		uint32_t month;
        		uint32_t day;
        		bool isvalid;
        	} GameStartDateInfo;
        '''
      file: helper.lua
    }
    GameStartGroupInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		int32_t id;
        		const char* name;
        	} GameStartGroupInfo;
        '''
      file: gameoptions.lua
    }
    GameVersion: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		int major;
        		int minor;
        	} GameVersion;
        '''
      file: debuglog.lua
    }
    GenericActor: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		UniverseID entity;
        		UniverseID personcontrollable;
        		NPCSeed personseed;
        	} GenericActor;
        '''
      file: menu_map.lua
    }
    GraphAxisInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		GraphTextInfo label;
        		double startvalue;
        		double endvalue;
        		double granularity;
        		double offset;
        		bool grid;
        		Color color;
        		Color gridcolor;
        		float glowfactor;
        	} GraphAxisInfo;
        '''
      file: widget_fullscreen.lua
    }
    GraphDataPoint2: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		double x;
        		double y;
        		bool inactive;
        	} GraphDataPoint2;
        '''
      file: widget_fullscreen.lua
    }
    GraphDataRecord: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		uint32_t MarkerType;
        		uint32_t MarkerSize;
        		Color MarkerColor;
        		float MarkerGlowFactor;
        		uint32_t LineType;
        		uint32_t LineWidth;
        		Color LineColor;
        		float LineGlowFactor;
        		size_t NumData;
        		bool Highlighted;
        		const char* MouseOverText;
        	} GraphDataRecord;
        '''
      file: widget_fullscreen.lua
    }
    GraphIcon: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		size_t DataRecordIdx;
        		size_t DataIdx;
        		const char* IconID;
        		const char* MouseOverText;
        	} GraphIcon;
        '''
      file: widget_fullscreen.lua
    }
    GraphTextInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* text;
        		Font font;
        		Color color;
        	} GraphTextInfo;
        '''
      file: widget_fullscreen.lua
    }
    HoloMapState: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		UIPosRot offset;
        		float cameradistance;
        	} HoloMapState;
        '''
      file: menu_map.lua
    }
    HotkeyInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* iconid;
        		uint32_t x;
        		uint32_t y;
        		bool display;
        	} HotkeyInfo;
        '''
      file: widget_fullscreen.lua
    }
    IconSet: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* active;
        		const char* inactive;
        		const char* select;
        	} IconSet;
        '''
      file: targetsystem.lua
    }
    InputData: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		int32_t source;
        		int32_t code;
        		int32_t signum;
        		bool istoggle;
        	} InputData;
        '''
      file: gameoptions.lua
    }
    InputFeedbackConfig: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* type;
        		uint32_t id;
        		const char* idname;
        		const char* textoption;
        		const char* voiceoption;
        	} InputFeedbackConfig;
        '''
      file: gameoptions.lua
    }
    InvalidPatchInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* id;
        		const char* name;
        		int32_t state;
        		const char* requiredversion;
        		const char* installedversion;
        	} InvalidPatchInfo;
        '''
      file: menu_mapeditor.lua
    }
    LanguageInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		int32_t id;
        		const char* name;
        		const char* warning;
        		const char* font;
        		bool voice;
        	} LanguageInfo;
        '''
      file: gameoptions.lua
    }
    LastAttackerInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		UniverseID attacker;
        		double time;
        		const char* method;
        	} LastAttackerInfo;
        '''
      file: menu_interactmenu.lua
    }
    LicenceInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* name;
        		const char* icon;
        	} LicenceInfo;
        '''
      file: menu_ship_configuration.lua
    }
    LoadingHint: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* HintText;
        		uint32_t HintID;
        	} LoadingHint;
        '''
      file: loading.lua
    }
    MailCount: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		size_t numImportantMails;
        		size_t numNormalMails;
        	} MailCount;
        '''
      file: monitors.lua
    }
    MessageDetails: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		uint64_t poiID;
        		UniverseID componentID;
        		const char* messageType;
        		const char* connectionName;
        		bool isAssociative;
        		bool isMissionObjective;
        		bool showIndicator;
        	} MessageDetails;
        '''
      file: monitors.lua
    }
    MessageDetails3: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		uint64_t poiID;
        		UniverseID componentID;
        		const char* messageType;
        		const char* connectionName;
        		bool isAssociative;
        		bool isMissionTarget;
        		bool isPriorityMissionTarget;
        		bool showIndicator;
        		bool hasAdditionalOffset;
        	} MessageDetails3;
        '''
      file: targetmonitor.lua
    }
    MessageID: {
      kind: uint64_t
      declaration: '''	typedef uint64_t MessageID;'''
      file: menu_playerinfo.lua
    }
    MessageInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		MessageID id;
        		double time;
        		const char* category;
        		const char* title;
        		const char* text;
        		const char* source;
        		UniverseID sourcecomponent;
        		const char* interaction;
        		UniverseID interactioncomponent;
        		const char* interactiontext;
        		const char* interactionshorttext;
        		const char* cutscenekey;
        		const char* entityname;
        		const char* factionname;
        		int64_t money;
        		int64_t bonus;
        		bool highlighted;
        		bool isread;
        	} MessageInfo;
        '''
      file: menu_playerinfo.lua
    }
    MissionBriefingIconInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* icon;
        		const char* caption;
        	} MissionBriefingIconInfo;
        '''
      file: menu_map.lua
    }
    MissionDetails: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* missionName;
        		const char* missionDescription;
        		int difficulty;
        		int upkeepalertlevel;
        		const char* threadType;
        		const char* mainType;
        		const char* subType;
        		const char* subTypeName;
        		const char* faction;
        		int64_t reward;
        		const char* rewardText;
        		size_t numBriefingObjectives;
        		int activeBriefingStep;
        		const char* opposingFaction;
        		const char* license;
        		float timeLeft;
        		double duration;
        		bool abortable;
        		bool hasObjective;
        		UniverseID associatedComponent;
        		UniverseID threadMissionID;
        	} MissionDetails;
        '''
      file: menu_map.lua
    }
    MissionGroupDetails: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* id;
        		const char* name;
        	} MissionGroupDetails;
        '''
      file: menu_map.lua
    }
    MissionID: {
      kind: uint64_t
      declaration: '''	typedef uint64_t MissionID;'''
      file: menu_map.lua
    }
    MissionInfo2: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		bool active;
        		bool callbackMode;
        		uint32_t barLine;
        		float barPercent;
        		const char* line1Left;
        		const char* line1Right;
        		const char* line2Left;
        		const char* line2Right;
        		const char* line3Left;
        		const char* line3Right;
        		const char* line4Left;
        		const char* line4Right;
        		const char* missionBarText;
        	} MissionInfo2;
        '''
      file: monitors.lua
    }
    MissionNPCInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		MissionID missionid;
        		uint32_t amount;
        		uint32_t numskills;
        		SkillInfo* skills;
        	} MissionNPCInfo;
        '''
      file: menu_map.lua
    }
    MissionObjective2: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* objectiveText;
        		float timeout;
        		const char* progressname;
        		uint32_t curProgress;
        		uint32_t maxProgress;
        		size_t numTargets;
        	} MissionObjective2;
        '''
      file: menu_map.lua
    }
    MissionObjectiveStep3: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* text;
        		const char* actiontext;
        		const char* detailtext;
        		int step;
        		bool failed;
        		bool completedoutofsequence;
        	} MissionObjectiveStep3;
        '''
      file: menu_map.lua
    }
    MissionShipDeliveryInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		MissionID missionid;
        		const char* macroname;
        		uint32_t amount;
        	} MissionShipDeliveryInfo;
        '''
      file: menu_ship_configuration.lua
    }
    MissionWareDeliveryCounts: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		UniverseID target;
        		uint32_t numwares;
        		MissionID missionid;
        	} MissionWareDeliveryCounts;
        '''
      file: menu_interactmenu.lua
    }
    MissionWareDeliveryInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		UniverseID target;
        		UIWareAmount* wares;
        		uint32_t numwares;
        	} MissionWareDeliveryInfo;
        '''
      file: menu_map.lua
    }
    MoneyLogEntry: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		double time;
        		int64_t money;
        		int64_t entryid;
        	} MoneyLogEntry;
        '''
      file: helper.lua
    }
    MonitorExtents: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		float x;
        		float y;
        		float width;
        		float height;
        	} MonitorExtents;
        '''
      file: menu_interactmenu.lua
    }
    MultiverseMapPickInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		uint32_t id;
        		bool ispin;
        		bool ishome;
        	} MultiverseMapPickInfo;
        '''
      file: menu_map.lua
    }
    NewGameParameter: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* key;
        		const char* value;
        	} NewGameParameter;
        '''
      file: gameoptions.lua
    }
    NewsInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* id;
        		const char* icon;
        		const char* text;
        		const char* link;
        		bool islinkappid;
        	} NewsInfo;
        '''
      file: promo.lua
    }
    NPCInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		NPCSeed seed;
        		const char* roleid;
        		int32_t tierid;
        		const char* name;
        		int32_t combinedskill;
        	} NPCInfo;
        '''
      file: menu_map.lua
    }
    NPCSeed: {
      kind: uint64_t
      declaration: '''	typedef uint64_t NPCSeed;'''
      file: menu_map.lua
    }
    OnlineMissionInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* chapter;
        		const char* onlineid;
        	} OnlineMissionInfo;
        '''
      file: menu_map.lua
    }
    Order: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		size_t queueidx;
        		const char* state;
        		const char* statename;
        		const char* orderdef;
        		size_t actualparams;
        		bool enabled;
        		bool isinfinite;
        		bool issyncpointreached;
        		bool istemporder;
        	} Order;
        '''
      file: menu_map.lua
    }
    Order2: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		size_t queueidx;
        		const char* state;
        		const char* statename;
        		const char* orderdef;
        		size_t actualparams;
        		bool enabled;
        		bool isinfinite;
        		bool issyncpointreached;
        		bool istemporder;
        		bool isoverride;
        	} Order2;
        '''
      file: menu_map.lua
    }
    OrderDefinition: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* id;
        		const char* name;
        		const char* icon;
        		const char* description;
        		const char* category;
        		const char* categoryname;
        		bool infinite;
        		uint32_t requiredSkill;
        	} OrderDefinition;
        '''
      file: menu_map.lua
    }
    OrderFailure: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		uint32_t id;
        		AIOrderID orderid;
        		const char* orderdef;
        		const char* message;
        		double timestamp;
        		bool wasdefaultorder;
        		bool wasinloop;
        	} OrderFailure;
        '''
      file: menu_map.lua
    }
    OverlayCellInfo3: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		uint32_t colidx;
        		uint32_t colspan;
        		const char* text;
        		Color textcolor;
        		float textglowfactor;
        		uint32_t fontsize;
        		bool wordwrap;
        		bool typewritereffect;
        		const char* icon;
        		Color iconcolor;
        		float iconglowfactor;
        		uint32_t iconwidth;
        		uint32_t iconheight;
        		int32_t offsetx;
        		int32_t offsety;
        		uint32_t cellheight;
        		const char* halign;
        		const char* valign;
        		Color backgroundcolor;
        		float backgroundglowfactor;
        		double flashduration;
        		double flashinterval;
        		Color flashcolor;
        		float flashglowfactor;
        	} OverlayCellInfo3;
        '''
      file: overlay.lua
    }
    OverlayInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		uint32_t numrows;
        		float fadein;
        		float fadeout;
        		float relwidth;
        		float reloffsetx;
        		float reloffsety;
        		bool fromright;
        		bool fromtop;
        	} OverlayInfo;
        '''
      file: overlay.lua
    }
    OverlayRowInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		uint32_t numcols;
        		float reloffsetx;
        		float reloffsety;
        		bool fromright;
        		bool fromtop;
        	} OverlayRowInfo;
        '''
      file: overlay.lua
    }
    PeopleDefinitionInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* id;
        		const char* name;
        		const char* desc;
        	} PeopleDefinitionInfo;
        '''
      file: menu_ship_configuration.lua
    }
    PeopleInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* id;
        		const char* name;
        		const char* desc;
        		uint32_t amount;
        		uint32_t numtiers;
        		bool canhire;
        	} PeopleInfo;
        '''
      file: menu_map.lua
    }
    PlayerAlertCounts: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		uint32_t numspaces;
        	} PlayerAlertCounts;
        '''
      file: menu_playerinfo.lua
    }
    PlayerAlertInfo2: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		size_t index;
        		double interval;
        		bool repeats;
        		bool muted;
        		uint32_t numspaces;
        		UniverseID* spaceids;
        		const char* objectclass;
        		const char* objectpurpose;
        		const char* objectidcode;
        		const char* objectowner;
        		const char* name;
        		const char* message;
        		const char* soundid;
        	} PlayerAlertInfo2;
        '''
      file: menu_playerinfo.lua
    }
    POIDetails: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* POIName;
        		const char* POIType;
        	} POIDetails;
        '''
      file: targetsystem.lua
    }
    Position2D: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		float x;
        		float y;
        	} Position2D;
        '''
      file: menu_interactmenu.lua
    }
    PosRot: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		float x;
        		float y;
        		float z;
        		float yaw;
        		float pitch;
        		float roll;
        	} PosRot;
        '''
      file: menu_interactmenu.lua
    }
    ProductionMethodInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* id;
        		const char* name;
        	} ProductionMethodInfo;
        '''
      file: menu_map.lua
    }
    ProductionMethodInfo2: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* id;
        		const char* name;
        		double productiontime;
        		double productionamount;
        	} ProductionMethodInfo2;
        '''
      file: menu_encyclopedia.lua
    }
    RaceInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* id;
        		const char* name;
        		const char* shortname;
        		const char* description;
        		const char* icon;
        	} RaceInfo;
        '''
      file: menu_map.lua
    }
    RegionBoundary: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* classid;
        		Coord3D size;
        		bool inverted;
        	} RegionBoundary;
        '''
      file: menu_mapeditor.lua
    }
    RegionDefinition: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* id;
        		uint32_t numfields;
        		uint32_t numboundaries;
        		uint32_t numresources;
        		Coord3D size;
        		float density;
        		float speed;
        		float rotationSpeed;
        		float defaultNoiseScale;
        		float defaultMinNoiseValue;
        		float defaultMaxNoiseValue;
        	} RegionDefinition;
        '''
      file: menu_mapeditor.lua
    }
    RegionField: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* fieldtype;
        		const char* groupref;
        	} RegionField;
        '''
      file: menu_mapeditor.lua
    }
    RegionResource: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* wareid;
        		const char* yield;
        	} RegionResource;
        '''
      file: menu_mapeditor.lua
    }
    RelationDetails: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		int relationStatus;
        		int relationValue;
        		int relationLEDValue;
        		bool isBoostedValue;
        	} RelationDetails;
        '''
      file: crosshair handling.lua
    }
    ResolutionInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		int x;
        		int y;
        	} ResolutionInfo;
        '''
      file: gameoptions.lua
    }
    ResponseInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* id;
        		const char* name;
        		const char* description;
        	} ResponseInfo;
        '''
      file: menu_map.lua
    }
    RoleTierData: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* name;
        		int32_t skilllevel;
        		uint32_t amount;
        	} RoleTierData;
        '''
      file: menu_map.lua
    }
    Rotation: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		float yaw;
        		float pitch;
        		float roll;
        	} Rotation;
        '''
      file: targetsystem.lua
    }
    ScenarioLoadingData: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		bool active;
        		bool reverse;
        		uint32_t numtexts;
        		uint32_t numinfotexts;
        	} ScenarioLoadingData;
        '''
      file: loading.lua
    }
    ScenarioStat: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* name;
        		const char* desc;
        		const char* value;
        		float score;
        		float maxscore;
        		bool hasscore;
        	} ScenarioStat;
        '''
      file: menu_scenario_debriefing.lua
    }
    ScreenPos: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		float x;
        		float y;
        		bool onScreen;
        	} ScreenPos;
        '''
      file: targetsystem.lua
    }
    ShieldGroup: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		UniverseID context;
        		const char* group;
        		UniverseID component;
        	} ShieldGroup;
        '''
      file: menu_map.lua
    }
    SignalInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* id;
        		const char* name;
        		const char* description;
        		uint32_t numresponses;
        		const char* defaultresponse;
        		bool ask;
        	} SignalInfo;
        '''
      file: menu_map.lua
    }
    Skill2: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		uint32_t textid;
        		uint32_t descriptionid;
        		uint32_t value;
        		uint32_t relevance;
        	} Skill2;
        '''
      file: menu_map.lua
    }
    SkillInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* id;
        		uint32_t textid;
        		uint32_t descriptionid;
        		uint32_t value;
        		uint32_t relevance;
        		const char* ware;
        	} SkillInfo;
        '''
      file: menu_map.lua
    }
    SliderCellDetails: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		double min;
        		double minSelect;
        		double max;
        		double maxSelect;
        		double start;
        		double step;
        		double infinitevalue;
        		uint32_t maxfactor;
        		bool exceedmax;
        		bool hidemaxvalue;
        		bool righttoleft;
        		bool fromcenter;
        		bool readonly;
        		bool useinfinitevalue;
        		bool usetimeformat;
        	} SliderCellDetails;
        '''
      file: widget_fullscreen.lua
    }
    SofttargetDetails2: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		UniverseID softtargetID;
        		const char* softtargetConnectionName;
        		uint32_t messageID;
        	} SofttargetDetails2;
        '''
      file: menu_docked.lua
    }
    SoftwareSlot: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* max;
        		const char* current;
        	} SoftwareSlot;
        '''
      file: menu_map.lua
    }
    SoundInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* id;
        		const char* name;
        	} SoundInfo;
        '''
      file: menu_playerinfo.lua
    }
    SpecialNPCSet: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		bool factionNPC;
        		bool missionActor;
        		bool shadyGuy;
        	} SpecialNPCSet;
        '''
      file: targetsystem.lua
    }
    SplineData: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		Coord3D offset;
        		Coord3D tangent;
        		float weight;
        		float inlength;
        		float outlength;
        	} SplineData;
        '''
      file: menu_mapeditor.lua
    }
    StartmenuBackgroundInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* cutsceneid;
        		uint32_t extensionidx;
        		bool isdefault;
        	} StartmenuBackgroundInfo;
        '''
      file: gameoptions.lua
    }
    StorageInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* name;
        		const char* transport;
        		uint32_t spaceused;
        		uint32_t capacity;
        	} StorageInfo;
        '''
      file: menu_map.lua
    }
    SubordinateGroup: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		UniverseID controllableid;
        		int group;
        	} SubordinateGroup;
        '''
      file: menu_map.lua
    }
    SupplyBudget: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		int64_t trade;
        		int64_t defence;
        		int64_t build;
        		int64_t repair;
        		int64_t missile;
        	} SupplyBudget;
        '''
      file: menu_station_overview.lua
    }
    SupplyOverride: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* macro;
        		int amount;
        	} SupplyOverride;
        '''
      file: menu_station_overview.lua
    }
    SupplyResourceInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* ware;
        		int total;
        		int current;
        		const char* supplytypes;
        	} SupplyResourceInfo;
        '''
      file: menu_station_overview.lua
    }
    SyncPointInfo2: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		uint32_t id;
        		UniverseID owningcontrollable;
        		size_t owningorderidx;
        		bool reached;
        	} SyncPointInfo2;
        '''
      file: menu_map.lua
    }
    TableSelectionInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		uint32_t toprow;
        		uint32_t selectedrow;
        		uint32_t selectedcol;
        		uint32_t shiftstart;
        		uint32_t shiftend;
        	} TableSelectionInfo;
        '''
      file: widget_fullscreen.lua
    }
    TextEntry: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* text;
        		const char* mouseovertext;
        	} TextEntry;
        '''
      file: menu_diplomacy.lua
    }
    TextInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* text;
        		int32_t x;
        		int32_t y;
        		const char* alignment;
        		Color color;
        		Font font;
        		float glowfactor;
        	} TextInfo;
        '''
      file: widget_fullscreen.lua
    }
    TickerCacheEntry: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		TickerCacheID id;
        		double time;
        		const char* category;
        		const char* title;
        		const char* text;
        	} TickerCacheEntry;
        '''
      file: menu_playerinfo.lua
    }
    TickerCacheID: {
      kind: uint64_t
      declaration: '''	typedef uint64_t TickerCacheID;'''
      file: menu_playerinfo.lua
    }
    TimelineInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* id;
        		const char* name;
        		const char* description;
        		const char* image;
        		const char* video;
        		const char* voice;
        		float date;
        		uint32_t group;
        	} TimelineInfo;
        '''
      file: menu_timeline.lua
    }
    TradeID: {
      kind: uint64_t
      declaration: '''	typedef uint64_t TradeID;'''
      file: menu_map.lua
    }
    TradeRuleCounts: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		uint32_t numfactions;
        	} TradeRuleCounts;
        '''
      file: menu_playerinfo.lua
    }
    TradeRuleID: {
      kind: int32_t
      declaration: '''	typedef int32_t TradeRuleID;'''
      file: menu_map.lua
    }
    TradeRuleInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		uint32_t id;
        		const char* name;
        		uint32_t numfactions;
        		const char** factions;
        		bool iswhitelist;
        	} TradeRuleInfo;
        '''
      file: menu_playerinfo.lua
    }
    TransactionLogEntry: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		double time;
        		int64_t money;
        		int64_t entryid;
        		const char* eventtype;
        		const char* eventtypename;
        		UniverseID partnerid;
        		const char* partnername;
        		const char* partneridcode;
        		int64_t tradeentryid;
        		const char* tradeeventtype;
        		const char* tradeeventtypename;
        		UniverseID buyerid;
        		UniverseID sellerid;
        		const char* ware;
        		uint32_t amount;
        		int64_t price;
        		bool complete;
        	} TransactionLogEntry;
        '''
      file: helper.lua
    }
    TurretDetails: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* icon;
        		const char* mode;
        		uint32_t damageState;
        		bool active;
        		bool usesAmmo;
        		uint32_t ammo;
        	} TurretDetails;
        '''
      file: crosshair handling.lua
    }
    UIAccountStatData: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		double time;
        		int64_t money;
        	} UIAccountStatData;
        '''
      file: menu_station_overview.lua
    }
    UIAction: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		uint32_t id;
        		const char* text;
        		const char* type;
        		bool ispossible;
        		bool istobedisplayed;
        	} UIAction;
        '''
      file: menu_interactmenu.lua
    }
    UIBlueprint: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* macro;
        		const char* ware;
        		const char* productionmethodid;
        	} UIBlueprint;
        '''
      file: menu_encyclopedia.lua
    }
    UIBuildOrderList: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		UniverseID shipid;
        		const char* macroname;
        		UILoadout loadout;
        		uint32_t amount;
        	} UIBuildOrderList;
        '''
      file: menu_map.lua
    }
    UICargoStat: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* wareid;
        		UICargoStatData* data;
        		uint32_t numdata;
        	} UICargoStat;
        '''
      file: menu_station_overview.lua
    }
    UICargoStatData: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		double time;
        		uint64_t amount;
        	} UICargoStatData;
        '''
      file: menu_station_overview.lua
    }
    UICelestialBodyInfo2: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* name;
        		const char* typeclass;
        		const char* geology;
        		const char* atmosphere;
        		const char* population;
        		const char* settlements;
        		uint32_t nummoons;
        		bool hasterraforming;
        	} UICelestialBodyInfo2;
        '''
      file: menu_encyclopedia.lua
    }
    UIClothingTheme: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* ID;
        		const char* Name;
        		const char* RawName;
        	} UIClothingTheme;
        '''
      file: menu_playerinfo.lua
    }
    UIColorProfileInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* filename;
        		const char* name;
        	} UIColorProfileInfo;
        '''
      file: gameoptions.lua
    }
    UIComponentSlot: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		UniverseID component;
        		const char* connection;
        	} UIComponentSlot;
        '''
      file: menu_transporter.lua
    }
    UIConstructionPlan: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* name;
        		const char* id;
        		const char* source;
        		bool deleteable;
        	} UIConstructionPlan;
        '''
      file: menu_mapeditor.lua
    }
    UIConstructionPlanEntry: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		size_t idx;
        		const char* macroid;
        		UniverseID componentid;
        		UIPosRot offset;
        		const char* connectionid;
        		size_t predecessoridx;
        		const char* predecessorconnectionid;
        		bool isfixed;
        	} UIConstructionPlanEntry;
        '''
      file: menu_map.lua
    }
    UIConstructionPlanInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* filename;
        		const char* name;
        		const char* id;
        	} UIConstructionPlanInfo;
        '''
      file: menu_station_configuration.lua
    }
    UICrewExchangeResult: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* reason;
        		NPCSeed person;
        		NPCSeed partnerperson;
        	} UICrewExchangeResult;
        '''
      file: menu_map.lua
    }
    UIEngineMod2: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* Name;
        		const char* RawName;
        		const char* Ware;
        		uint32_t Quality;
        		const char* PropertyType;
        		float ForwardThrustFactor;
        		float StrafeAccFactor;
        		float StrafeThrustFactor;
        		float RotationThrustFactor;
        		float BoostAccFactor;
        		float BoostThrustFactor;
        		float BoostDurationFactor;
        		float BoostAttackTimeFactor;
        		float BoostReleaseTimeFactor;
        		float BoostChargeTimeFactor;
        		float BoostRechargeTimeFactor;
        		float TravelThrustFactor;
        		float TravelStartThrustFactor;
        		float TravelAttackTimeFactor;
        		float TravelReleaseTimeFactor;
        		float TravelChargeTimeFactor;
        	} UIEngineMod2;
        '''
      file: menu_ship_configuration.lua
    }
    UIEquipmentMod: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* Name;
        		const char* RawName;
        		const char* Ware;
        		uint32_t Quality;
        	} UIEquipmentMod;
        '''
      file: menu_playerinfo.lua
    }
    UIFightRuleSetting: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* factionid;
        		const char* civiliansetting;
        		const char* militarysetting;
        	} UIFightRuleSetting;
        '''
      file: menu_playerinfo.lua
    }
    UIFormationInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* shape;
        		const char* name;
        		uint32_t requiredSkill;
        		float radius;
        		bool rollMembers;
        		bool rollFormation;
        		size_t maxShipsPerLine;
        	} UIFormationInfo;
        '''
      file: menu_map.lua
    }
    UIFrameTextureInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* iconid;
        		Color color;
        		uint32_t width;
        		uint32_t height;
        		int32_t rotationrate;
        		uint32_t rotstart;
        		float rotduration;
        		float rotinterval;
        		float initscale;
        		float scaleduration;
        		float glowfactor;
        	} UIFrameTextureInfo;
        '''
      file: widget_fullscreen.lua
    }
    UILoadout: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		UILoadoutMacroData* weapons;
        		uint32_t numweapons;
        		UILoadoutMacroData* turrets;
        		uint32_t numturrets;
        		UILoadoutMacroData* shields;
        		uint32_t numshields;
        		UILoadoutMacroData* engines;
        		uint32_t numengines;
        		UILoadoutGroupData* turretgroups;
        		uint32_t numturretgroups;
        		UILoadoutGroupData* shieldgroups;
        		uint32_t numshieldgroups;
        		UILoadoutAmmoData* ammo;
        		uint32_t numammo;
        		UILoadoutAmmoData* units;
        		uint32_t numunits;
        		UILoadoutSoftwareData* software;
        		uint32_t numsoftware;
        		UILoadoutVirtualMacroData thruster;
        	} UILoadout;
        '''
      file: menu_map.lua
    }
    UILoadout2: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		UILoadoutMacroData2* weapons;
        		uint32_t numweapons;
        		UILoadoutMacroData2* turrets;
        		uint32_t numturrets;
        		UILoadoutMacroData2* shields;
        		uint32_t numshields;
        		UILoadoutMacroData2* engines;
        		uint32_t numengines;
        		UILoadoutGroupData2* turretgroups;
        		uint32_t numturretgroups;
        		UILoadoutGroupData2* shieldgroups;
        		uint32_t numshieldgroups;
        		UILoadoutAmmoData* ammo;
        		uint32_t numammo;
        		UILoadoutAmmoData* units;
        		uint32_t numunits;
        		UILoadoutSoftwareData* software;
        		uint32_t numsoftware;
        		UILoadoutVirtualMacroData thruster;
        		uint32_t numcrew;
        		UILoadoutCrewData* crew;
        		bool hascrewexperience;
        	} UILoadout2;
        '''
      file: menu_ship_configuration.lua
    }
    UILoadoutAmmoData: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* macro;
        		uint32_t amount;
        		bool optional;
        	} UILoadoutAmmoData;
        '''
      file: menu_map.lua
    }
    UILoadoutCounts: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		uint32_t numweapons;
        		uint32_t numturrets;
        		uint32_t numshields;
        		uint32_t numengines;
        		uint32_t numturretgroups;
        		uint32_t numshieldgroups;
        		uint32_t numammo;
        		uint32_t numunits;
        		uint32_t numsoftware;
        	} UILoadoutCounts;
        '''
      file: menu_station_configuration.lua
    }
    UILoadoutCounts2: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		uint32_t numweapons;
        		uint32_t numturrets;
        		uint32_t numshields;
        		uint32_t numengines;
        		uint32_t numturretgroups;
        		uint32_t numshieldgroups;
        		uint32_t numammo;
        		uint32_t numunits;
        		uint32_t numsoftware;
        		uint32_t numcrew;
        	} UILoadoutCounts2;
        '''
      file: menu_ship_configuration.lua
    }
    UILoadoutCrewData: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* roleid;
        		uint32_t count;
        		bool optional;
        	} UILoadoutCrewData;
        '''
      file: menu_ship_configuration.lua
    }
    UILoadoutGroupData: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* macro;
        		const char* path;
        		const char* group;
        		uint32_t count;
        		bool optional;
        	} UILoadoutGroupData;
        '''
      file: menu_map.lua
    }
    UILoadoutGroupData2: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* macro;
        		const char* path;
        		const char* group;
        		uint32_t count;
        		bool optional;
        		UILoadoutWeaponSetting weaponsetting;
        	} UILoadoutGroupData2;
        '''
      file: menu_ship_configuration.lua
    }
    UILoadoutInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* id;
        		const char* name;
        		const char* iconid;
        		bool deleteable;
        	} UILoadoutInfo;
        '''
      file: menu_ship_configuration.lua
    }
    UILoadoutMacroData: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* macro;
        		const char* upgradetypename;
        		size_t slot;
        		bool optional;
        	} UILoadoutMacroData;
        '''
      file: menu_map.lua
    }
    UILoadoutMacroData2: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* macro;
        		const char* upgradetypename;
        		size_t slot;
        		bool optional;
        		UILoadoutWeaponSetting weaponsetting;
        	} UILoadoutMacroData2;
        '''
      file: menu_ship_configuration.lua
    }
    UILoadoutSlot: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* upgradetype;
        		size_t slot;
        	} UILoadoutSlot;
        '''
      file: menu_ship_configuration.lua
    }
    UILoadoutSoftwareData: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* ware;
        	} UILoadoutSoftwareData;
        '''
      file: menu_map.lua
    }
    UILoadoutStatistics5: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		float HullValue;
        		float ShieldValue;
        		double ShieldDelay;
        		float ShieldRate;
        		float GroupedShieldValue;
        		double GroupedShieldDelay;
        		float GroupedShieldRate;
        		float BurstDPS;
        		float SustainedDPS;
        		float TurretBurstDPS;
        		float TurretSustainedDPS;
        		float GroupedTurretBurstDPS;
        		float GroupedTurretSustainedDPS;
        		float ForwardSpeed;
        		float BoostSpeed;
        		float TravelSpeed;
        		float YawSpeed;
        		float PitchSpeed;
        		float RollSpeed;
        		float HorizontalStrafeSpeed;
        		float VerticalStrafeSpeed;
        		float ForwardAcceleration;
        		float HorizontalStrafeAcceleration;
        		float VerticalStrafeAcceleration;
        		float BoostAcceleration;
        		float BoostRechargeRate;
        		float BoostMaxDuration;
        		float TravelAcceleration;
        		float TravelChargeTime;
        		uint32_t NumDocksShipMedium;
        		uint32_t NumDocksShipSmall;
        		uint32_t ShipCapacityMedium;
        		uint32_t ShipCapacitySmall;
        		uint32_t CrewCapacity;
        		uint32_t ContainerCapacity;
        		uint32_t SolidCapacity;
        		uint32_t LiquidCapacity;
        		uint32_t CondensateCapacity;
        		uint32_t UnitCapacity;
        		uint32_t MissileCapacity;
        		uint32_t CountermeasureCapacity;
        		uint32_t DeployableCapacity;
        		float RadarRange;
        	} UILoadoutStatistics5;
        '''
      file: menu_ship_comparison.lua
    }
    UILoadoutVirtualMacroData: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* macro;
        		bool optional;
        	} UILoadoutVirtualMacroData;
        '''
      file: menu_map.lua
    }
    UILoadoutWeaponSetting: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* ammomacroname;
        		const char* weaponmode;
        	} UILoadoutWeaponSetting;
        '''
      file: menu_ship_configuration.lua
    }
    UILogo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* file;
        		const char* icon;
        		bool ispersonal;
        	} UILogo;
        '''
      file: menu_diplomacy.lua
    }
    UIMacroCount: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* macro;
        		uint32_t amount;
        	} UIMacroCount;
        '''
      file: menu_playerinfo.lua
    }
    UIMapTradeVolumeParameter: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* icon;
        		Color color;
        		uint32_t volume_s;
        		uint32_t volume_m;
        		uint32_t volume_l;
        	} UIMapTradeVolumeParameter;
        '''
      file: menu_map.lua
    }
    UIModuleSet: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* id;
        		const char* name;
        	} UIModuleSet;
        '''
      file: menu_map.lua
    }
    UINotificationType2: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* id;
        		const char* name;
        		const char* desc;
        		const char* category;
        		bool enabled;
        		bool enabledByDefault;
        	} UINotificationType2;
        '''
      file: menu_playerinfo.lua
    }
    UIOverlayInfo2: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* id;
        		const char* text;
        		uint32_t x;
        		uint32_t y;
        		uint32_t width;
        		uint32_t height;
        		bool highlightonly;
        		bool usebackgroundspan;
        	} UIOverlayInfo2;
        '''
      file: widget_fullscreen.lua
    }
    UIPaintMod: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* Name;
        		const char* RawName;
        		const char* Ware;
        		uint32_t Quality;
        		uint32_t Amount;
        	} UIPaintMod;
        '''
      file: menu_ship_configuration.lua
    }
    UIPaintTheme: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* ID;
        		const char* Name;
        		const char* RawName;
        		const char* Icon;
        	} UIPaintTheme;
        '''
      file: menu_playerinfo.lua
    }
    UIPosRot: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		float x;
        		float y;
        		float z;
        		float yaw;
        		float pitch;
        		float roll;
        	} UIPosRot;
        '''
      file: menu_map.lua
    }
    UISaveInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* filename;
        		const char* name;
        		const char* description;
        		const char* version;
        		uint32_t rawversion;
        		const char* time;
        		int64_t rawtime;
        		double playtime;
        		const char* playername;
        		const char* location;
        		int64_t money;
        		bool error;
        		bool invalidgameid;
        		bool invalidversion;
        		uint32_t numinvalidpatches;
        	} UISaveInfo;
        '''
      file: gameoptions.lua
    }
    UIShieldMod: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* Name;
        		const char* RawName;
        		const char* Ware;
        		uint32_t Quality;
        		const char* PropertyType;
        		float CapacityFactor;
        		float RechargeDelayFactor;
        		float RechargeRateFactor;
        	} UIShieldMod;
        '''
      file: menu_ship_configuration.lua
    }
    UIShipMod2: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* Name;
        		const char* RawName;
        		const char* Ware;
        		uint32_t Quality;
        		const char* PropertyType;
        		float MassFactor;
        		float DragFactor;
        		float MaxHullFactor;
        		float RadarRangeFactor;
        		uint32_t AddedUnitCapacity;
        		uint32_t AddedMissileCapacity;
        		uint32_t AddedCountermeasureCapacity;
        		uint32_t AddedDeployableCapacity;
        		float RadarCloakFactor;
        		float RegionDamageProtection;
        		float HideCargoChance;
        	} UIShipMod2;
        '''
      file: helper.lua
    }
    UISpaceInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* environment;
        	} UISpaceInfo;
        '''
      file: menu_encyclopedia.lua
    }
    UISunInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* name;
        		const char* typeclass;
        	} UISunInfo;
        '''
      file: menu_encyclopedia.lua
    }
    UISystemInfo2: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		UISpaceInfo space;
        		uint32_t numsuns;
        		UISunInfo* suns;
        		uint32_t numplanets;
        		UICelestialBodyInfo2* planets;
        	} UISystemInfo2;
        '''
      file: menu_encyclopedia.lua
    }
    UISystemInfoCounts: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		uint32_t numsuns;
        		uint32_t numplanets;
        	} UISystemInfoCounts;
        '''
      file: menu_encyclopedia.lua
    }
    UITerraformingDroneInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		uint32_t numbuildsinprogress;
        		uint32_t numbuildsinqueue;
        		uint32_t numcurrentdeliveries;
        	} UITerraformingDroneInfo;
        '''
      file: menu_terraforming.lua
    }
    UITerraformingMissionInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		MissionID missionid;
        		bool missioncompleted;
        	} UITerraformingMissionInfo;
        '''
      file: menu_terraforming.lua
    }
    UITerraformingProject2: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* id;
        		const char* group;
        		const char* name;
        		const char* description;
        		double duration;
        		double repeatcooldown;
        		uint32_t timescompleted;
        		int32_t successchance;
        		bool resilient;
        		bool showalways;
        		int64_t price;
        		float payoutfactor;
        		const char* requiredresearchid;
        		const char* pricescale;
        		const char* pricescaletext;
        		bool anypredecessor;
        		uint32_t numpredecessors;
        		uint32_t numpredecessorgroups;
        		uint32_t numblockingprojects;
        		uint32_t numconditions;
        		uint32_t numprimaryeffects;
        		uint32_t numsideeffects;
        		uint32_t numblockedprojects;
        		uint32_t numblockedgroups;
        		uint32_t numrebates;
        		uint32_t numresources;
        		uint32_t numremovedprojects;
        	} UITerraformingProject2;
        '''
      file: menu_station_overview.lua
    }
    UITerraformingProjectCondition: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* stat;
        		uint32_t min;
        		uint32_t max;
        		uint64_t minvalue;
        		uint64_t maxvalue;
        		bool issatisfied;
        	} UITerraformingProjectCondition;
        '''
      file: helper.lua
    }
    UITerraformingProjectEffect: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* text;
        		const char* stat;
        		int32_t change;
        		uint64_t value;
        		uint64_t minvalue;
        		uint64_t maxvalue;
        		bool onfail;
        		bool issideeffect;
        		uint32_t chance;
        		uint32_t setbackpercent;
        		bool isbeneficial;
        	} UITerraformingProjectEffect;
        '''
      file: helper.lua
    }
    UITerraformingProjectGroup: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* id;
        		const char* name;
        	} UITerraformingProjectGroup;
        '''
      file: helper.lua
    }
    UITerraformingProjectPredecessorGroup: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* id;
        		bool anyproject;
        	} UITerraformingProjectPredecessorGroup;
        '''
      file: helper.lua
    }
    UITerraformingProjectRebate: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* ware;
        		const char* waregroupname;
        		uint32_t value;
        	} UITerraformingProjectRebate;
        '''
      file: helper.lua
    }
    UITerraformingStat: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* id;
        		const char* name;
        		const char* description;
        		const char* inactivetext;
        		const char* iconid;
        		bool dynamic;
        		uint64_t value;
        		uint32_t state;
        		bool useranges;
        		uint32_t numranges;
        	} UITerraformingStat;
        '''
      file: menu_terraforming.lua
    }
    UITerraformingStatRange: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		uint64_t endvalue;
        		uint32_t state;
        		Color color;
        		const char* description;
        	} UITerraformingStatRange;
        '''
      file: menu_terraforming.lua
    }
    UITerraformingWorldInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* name;
        		bool ismoon;
        	} UITerraformingWorldInfo;
        '''
      file: menu_terraforming.lua
    }
    UITradeOfferStat: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* wareid;
        		bool isSellOffer;
        		UITradeOfferStatData* data;
        		uint32_t numdata;
        	} UITradeOfferStat;
        '''
      file: menu_encyclopedia.lua
    }
    UITradeOfferStatData: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		double time;
        		int64_t price;
        		int amount;
        		int limit;
        	} UITradeOfferStatData;
        '''
      file: menu_encyclopedia.lua
    }
    UIVentureInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* name;
        		const char* rawname;
        		const char* icon;
        		const char* rewardicon;
        		int64_t remainingtime;
        		uint32_t numships;
        	} UIVentureInfo;
        '''
      file: helper.lua
    }
    UIWareAmount: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* wareid;
        		uint32_t amount;
        	} UIWareAmount;
        '''
      file: menu_encyclopedia.lua
    }
    UIWareInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* ware;
        		const char* macro;
        		int amount;
        	} UIWareInfo;
        '''
      file: menu_ship_configuration.lua
    }
    UIWeaponGroup: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		bool primary;
        		uint32_t idx;
        	} UIWeaponGroup;
        '''
      file: menu_map.lua
    }
    UIWeaponMod: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* Name;
        		const char* RawName;
        		const char* Ware;
        		uint32_t Quality;
        		const char* PropertyType;
        		float DamageFactor;
        		float CoolingFactor;
        		float ReloadFactor;
        		float SpeedFactor;
        		float LifeTimeFactor;
        		float MiningFactor;
        		float StickTimeFactor;
        		float ChargeTimeFactor;
        		float BeamLengthFactor;
        		uint32_t AddedAmount;
        		float RotationSpeedFactor;
        		float SurfaceElementFactor;
        	} UIWeaponMod;
        '''
      file: menu_ship_configuration.lua
    }
    UIWorkforceInfluence: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* type;
        		const char* name;
        		float value;
        		bool active;
        	} UIWorkforceInfluence;
        '''
      file: menu_station_overview.lua
    }
    UnitData: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* macro;
        		const char* category;
        		uint32_t amount;
        	} UnitData;
        '''
      file: menu_ship_configuration.lua
    }
    UniverseID: {
      kind: uint64_t
      declaration: '''	typedef uint64_t UniverseID;'''
      file: menu_docked.lua
    }
    UpgradeGroup: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* path;
        		const char* group;
        	} UpgradeGroup;
        '''
      file: menu_encyclopedia.lua
    }
    UpgradeGroup2: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		UniverseID contextid;
        		const char* path;
        		const char* group;
        	} UpgradeGroup2;
        '''
      file: menu_docked.lua
    }
    UpgradeGroupInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		UniverseID currentcomponent;
        		const char* currentmacro;
        		const char* slotsize;
        		uint32_t count;
        		uint32_t operational;
        		uint32_t total;
        	} UpgradeGroupInfo;
        '''
      file: menu_docked.lua
    }
    VelocityInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		float speed;
        		float screenx;
        		float screeny;
        		bool onscreen;
        	} VelocityInfo;
        '''
      file: targetsystem.lua
    }
    WareGroupInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* id;
        		const char* icon;
        		const char* factoryname;
        		const char* factorydesc;
        		const char* factorymapicon;
        		const char* factoryhudicon;
        		uint32_t tier;
        	} WareGroupInfo;
        '''
      file: menu_map.lua
    }
    WareReservationInfo2: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		UniverseID reserverid;
        		const char* ware;
        		uint32_t amount;
        		bool isbuyreservation;
        		double eta;
        		TradeID tradedealid;
        		MissionID missionid;
        		bool isvirtual;
        		bool issupply;
        	} WareReservationInfo2;
        '''
      file: menu_map.lua
    }
    WareSource: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* sourcetype;
        		const char* sourcelocation;
        	} WareSource;
        '''
      file: menu_encyclopedia.lua
    }
    WareTransportInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* transport;
        		const char* name;
        		int value;
        	} WareTransportInfo;
        '''
      file: menu_encyclopedia.lua
    }
    WareYield: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* ware;
        		int32_t current;
        		int32_t max;
        	} WareYield;
        '''
      file: menu_encyclopedia.lua
    }
    WeaponDetails: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* icon;
        		uint32_t damageState;
        		bool active;
        		bool usesAmmo;
        		uint32_t ammo;
        		uint32_t mode;
        		float reloadPercent;
        		uint32_t heatState;
        		float heatPercent;
        		float lockPercent;
        		uint64_t counterMeasureTarget;
        	} WeaponDetails;
        '''
      file: targetsystem.lua
    }
    WeaponDetails3: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* icon;
        		uint32_t damageState;
        		bool active;
        		bool usesAmmo;
        		uint32_t ammo;
        		int32_t currentclip;
        		int32_t maxclip;
        		uint32_t mode;
        		float reloadPercent;
        		bool isAutoReloading;
        		uint32_t heatState;
        		float heatPercent;
        		float nextShotHeatPercent;
        		float lockPercent;
        		uint64_t counterMeasureTarget;
        	} WeaponDetails3;
        '''
      file: crosshair handling.lua
    }
    WeaponSystemInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* id;
        		const char* name;
        		bool active;
        	} WeaponSystemInfo;
        '''
      file: menu_map.lua
    }
    WorkforceInfluenceCounts: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		uint32_t numcapacityinfluences;
        		uint32_t numgrowthinfluences;
        	} WorkforceInfluenceCounts;
        '''
      file: menu_station_overview.lua
    }
    WorkforceInfluenceInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		uint32_t numcapacityinfluences;
        		UIWorkforceInfluence* capacityinfluences;
        		uint32_t numgrowthinfluences;
        		UIWorkforceInfluence* growthinfluences;
        		float basegrowth;
        		uint32_t capacity;
        		uint32_t current;
        		uint32_t sustainable;
        		uint32_t target;
        		int32_t change;
        	} WorkforceInfluenceInfo;
        '''
      file: menu_station_overview.lua
    }
    WorkForceInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		uint32_t current;
        		uint32_t capacity;
        		uint32_t optimal;
        		uint32_t available;
        		uint32_t maxavailable;
        		double timeuntilnextupdate;
        	} WorkForceInfo;
        '''
      file: menu_encyclopedia.lua
    }
    YieldInfo: {
      kind: struct
      declaration:
        '''
        	typedef struct {
        		const char* wareid;
        		int32_t amount;
        	} YieldInfo;
        '''
      file: menu_map.lua
    }
  }
}